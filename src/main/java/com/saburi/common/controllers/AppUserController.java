/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.common.controllers;

import java.net.URL;
import java.util.ResourceBundle;
import javafx.fxml.FXML;
import static com.saburi.common.utils.FXUIUtils.*;
import com.saburi.common.utils.Utilities.FormMode;
import static com.saburi.common.utils.FXUIUtils.warningOk;
import com.saburi.common.dbaccess.AppUserDA;
import javafx.scene.control.TextField;
import javafx.scene.control.ComboBox;
import com.saburi.common.dbaccess.UserRoleDA;
import com.saburi.common.entities.UserRole;
import javafx.scene.control.PasswordField;

public class AppUserController extends EditController {

    private final AppUserDA oAppUserDA = new AppUserDA();
    @FXML
    private TextField txtLoginID;
    @FXML
    private TextField txtFirstName;
    @FXML
    private TextField txtLastName;
    @FXML
    private TextField txtStaffNo;
    @FXML
    private PasswordField txaPassword;
    @FXML
    private PasswordField txtConfirmPassword;
    @FXML
    private ComboBox cboRole;

    @Override
    public void initialize(URL url, ResourceBundle rb) {
        try {

            this.minSize = 300;
            loadDBEntities(new UserRoleDA().getUserRoles(), cboRole);

        } catch (Exception e) {
            errorMessage(e);
        } finally {
        }
    }

    @Override
    protected void save() {
        try {
            this.editSuccessful = false;
            String loginID = getText(txtLoginID, "Login ID");
            String firstName = getText(txtFirstName, "First Name");
            String lastName = getText(txtLastName, "Last Name");
            String staffNo = getText(txtStaffNo);
            String password = getText(txaPassword, "Password");
            String confirmPassword = getText(txtConfirmPassword, "Confirm Password");
            UserRole userRole = (UserRole) getEntity(cboRole, "Role");

            if (!password.equals(confirmPassword)) {
                message("Passwords donot match");
                return;
            }

            AppUserDA appUserDA = new AppUserDA(loginID, firstName, lastName, staffNo, password, userRole);
            String buttonText = btnSave.getText();
            if (buttonText.equalsIgnoreCase(FormMode.Save.name())) {
                appUserDA.save();
                message("Saved Successfully");
                clear();
            } else if (buttonText.equalsIgnoreCase(FormMode.Update.name())) {
                appUserDA.update();
                message("Updated Successfully");
            }
            this.dbAccess = appUserDA;
            this.editSuccessful = true;
        } catch (Exception e) {
            errorMessage(e);
        } finally {
        }
    }

    public void setEdit(String text) {
        btnSave.setText(FormMode.Update.name());
        btnSearch.setVisible(true);
        btnDelete.setVisible(true);
        this.txtLoginID.setText(text);
        btnSearch.fire();
    }

    @Override
    protected void delete() {
        try {
            String loginID = getText(txtLoginID, "Login ID");
            AppUserDA appUserDA = oAppUserDA.get(loginID);
            if (!warningOk("Confirm Delete", "You are about to delete a record with ID: " + loginID + " Are you sure you want to continue?", "Remember this action cannot be un done")) {
                return;
            }
            if (appUserDA.delete()) {
                message("Deleted Successfully");
                this.clear();
            }
        } catch (Exception e) {
            errorMessage(e);
        }
    }

    public void loadData() {
        try {
            String loginID = getText(txtLoginID, "Login ID");

            AppUserDA appUserDA = oAppUserDA.get(loginID);
            txtLoginID.setText(appUserDA.getLoginID());
            txtFirstName.setText(appUserDA.getFirstName());
            txtLastName.setText(appUserDA.getLastName());
            txtStaffNo.setText(appUserDA.getStaffNo());
            txaPassword.setText(appUserDA.getPassword());
            cboRole.setValue(appUserDA.getRolePair());

        } catch (Exception e) {
            errorMessage(e);
        }

    }

    public void clear() {
        txtLoginID.clear();
        txtFirstName.clear();
        txtLastName.clear();
        txtStaffNo.clear();
        txaPassword.clear();
        txtConfirmPassword.clear();
        cboRole.setValue(null);

    }

}
