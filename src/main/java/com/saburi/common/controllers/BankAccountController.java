/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.common.controllers;

import java.net.URL;
import java.util.ResourceBundle;
import javafx.fxml.FXML;
import static com.saburi.common.utils.FXUIUtils.*;
import com.saburi.common.utils.Utilities.FormMode;
import static com.saburi.common.utils.FXUIUtils.warningOk;
import com.saburi.common.dbaccess.BankAccountDA;
import javafx.scene.control.TextField;
import javafx.scene.control.ComboBox;
import com.saburi.common.utils.CommonEnums.BankAccountTypes;
import javafx.collections.FXCollections;
import javafx.scene.control.MenuItem;
import com.saburi.common.dbaccess.CurrencyDA;
import com.saburi.common.entities.Currency;
import com.saburi.common.dbaccess.ChartAccountDA;
import com.saburi.common.entities.ChartAccount;
import javafx.scene.control.TextArea;
import javafx.scene.control.CheckBox;
import com.saburi.common.utils.CommonEnums.AccountTypes;
import com.saburi.common.utils.CommonNavigate;
import static com.saburi.common.utils.Utilities.formatNumber;

public class BankAccountController extends EditController {

    private final BankAccountDA oBankAccountDA = new BankAccountDA();
    @FXML
    private TextField txtBankAccountID;
    @FXML
    private TextField txtBankAccountName;
    @FXML
    private ComboBox cboBankAccountType;
    @FXML
    private ComboBox cboCurrency;
    @FXML
    private MenuItem cmiSelectCurrency;
    @FXML
    private TextField txtAccountNo;
    @FXML
    private TextField txtBankName;
    @FXML
    private TextField txtBranchName;
    @FXML
    private ComboBox cboPostingAccount;
    @FXML
    private MenuItem cmiSelectPostingAccount;
    @FXML
    private TextField txtPhoneNo;
    @FXML
    private TextField txtEmail;
    @FXML
    private TextArea txaAddress;
    @FXML
    private CheckBox chkisDefault;
    @FXML
    private TextField txtBalance;
    private final CurrencyDA oCurrencyDA = new CurrencyDA();
    private final ChartAccountDA oChartAccountDA = new ChartAccountDA();

    @Override
    public void initialize(URL url, ResourceBundle rb) {
        try {
            cboBankAccountType.setItems(FXCollections.observableArrayList(BankAccountTypes.values()));
            loadDBEntities(oCurrencyDA.getCurrencys(), cboCurrency);
            loadDBEntities(oChartAccountDA.getChartAccounts(AccountTypes.Asset), cboPostingAccount);

            validateNumber(txtBalance);
            formatValue(txtBalance);
            this.primaryKeyControl = txtBankAccountID;
            this.dbAccess = oBankAccountDA;
            this.restrainColumnConstraint = false;
            //this.minSize = 360;
            this.setNextBankAccountID();
            selectItem(CommonNavigate.mainClass, cmiSelectCurrency, oCurrencyDA, "View", "Currency", 700, 400, cboCurrency, true);
            selectItem(CommonNavigate.mainClass, cmiSelectPostingAccount, oChartAccountDA, "View", "PostingAccount", 700, 400, cboPostingAccount, true);
        } catch (Exception e) {
            errorMessage(e);
        } finally {
        }
    }

    @Override
    protected void save() {
        try {
            this.editSuccessful = false;
            String bankAccountID = getText(txtBankAccountID, "Bank Account ID");
            String bankAccountName = getText(txtBankAccountName, "Bank Account Name");
            BankAccountTypes bankAccountType = (BankAccountTypes) getSelectedValue(cboBankAccountType, "Bank Account Type");
            Currency currency = (Currency) getEntity(cboCurrency, "Currency");
            String accountNo = getText(txtAccountNo, "Account No", bankAccountType.equals(BankAccountTypes.Bank));
            String bankName = getText(txtBankName, "Bank Name", bankAccountType.equals(BankAccountTypes.Bank));
            String branchName = getText(txtBranchName, "Branch Name", bankAccountType.equals(BankAccountTypes.Bank)
            );
            ChartAccount postingAccount = (ChartAccount) getEntity(cboPostingAccount, "Posting Account");
            String phoneNo = getText(txtPhoneNo);
            String email = getText(txtEmail);
            String address = getText(txaAddress, "Address");
            boolean isDefault = chkisDefault.isSelected();
            double balance = getDouble(txtBalance, "Balance");

            BankAccountDA bankAccountDA = new BankAccountDA(bankAccountID, bankAccountName, bankAccountType, currency, accountNo, bankName, branchName, postingAccount, phoneNo, email, address, isDefault, balance);
            String buttonText = btnSave.getText();
            if (buttonText.equalsIgnoreCase(FormMode.Save.name())) {
                bankAccountDA.save();
                message("Saved Successfully");
                clear();
            } else if (buttonText.equalsIgnoreCase(FormMode.Update.name())) {
                bankAccountDA.update();
                message("Updated Successfully");
            }
            this.dbAccess = bankAccountDA;
            this.editSuccessful = true;
        } catch (Exception e) {
            errorMessage(e);
        } finally {
        }
    }

    @Override
    protected void delete() {
        try {
            String bankAccountID = getText(txtBankAccountID, "Bank Account ID");
            BankAccountDA bankAccountDA = oBankAccountDA.get(bankAccountID);
            if (!warningOk("Confirm Delete", "You are about to delete a record with ID: " + bankAccountID + " Are you sure you want to continue?", "Remember this action cannot be un done")) {
                return;
            }
            if (bankAccountDA.delete()) {
                message("Deleted Successfully");
                this.clear();
            }
        } catch (Exception e) {
            errorMessage(e);
        }
    }

    @Override
    public void loadData() {
        try {
            String bankAccountID = getText(txtBankAccountID, "Bank Account ID");

            BankAccountDA bankAccountDA = oBankAccountDA.get(bankAccountID);
            txtBankAccountID.setText(bankAccountDA.getBankAccountID());
            txtBankAccountName.setText(bankAccountDA.getBankAccountName());
            cboBankAccountType.setValue(bankAccountDA.getBankAccountType());
            cboCurrency.setValue(bankAccountDA.getCurrency());
            txtAccountNo.setText(bankAccountDA.getAccountNo());
            txtBankName.setText(bankAccountDA.getBankName());
            txtBranchName.setText(bankAccountDA.getBranchName());
            cboPostingAccount.setValue(bankAccountDA.getPostingAccount());
            txtPhoneNo.setText(bankAccountDA.getPhoneNo());
            txtEmail.setText(bankAccountDA.getEmail());
            txaAddress.setText(bankAccountDA.getAddress());
            chkisDefault.setSelected(bankAccountDA.isisDefault());
            txtBalance.setText(formatNumber(bankAccountDA.getBalance()));

        } catch (Exception e) {
            errorMessage(e);
        }

    }

    private void setNextBankAccountID() {
        try {
            if (btnSave.getText().equalsIgnoreCase(FormMode.Save.name())) {
                txtBankAccountID.setText(oBankAccountDA.getNextBankAccountID(oBankAccountDA.getNextIdHelper()));
            }
        } catch (Exception e) {
            errorMessage(e);
        }
    }

    private void clear() {
        txtBankAccountID.clear();
        txtBankAccountName.clear();
        cboBankAccountType.setValue(null);
        cboCurrency.setValue(null);
        txtAccountNo.clear();
        txtBankName.clear();
        txtBranchName.clear();
        cboPostingAccount.setValue(null);
        txtPhoneNo.clear();
        txtEmail.clear();
        txaAddress.clear();
        chkisDefault.setSelected(false);
        txtBalance.clear();
        this.setNextBankAccountID();

    }

}
