/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.common.controllers;

import java.net.URL;
import java.util.ResourceBundle;
import javafx.fxml.FXML;
import static com.saburi.common.utils.FXUIUtils.*;
import com.saburi.common.utils.Utilities.FormMode;
import static com.saburi.common.utils.FXUIUtils.warningOk;
import com.saburi.common.dbaccess.CustomerPostingGroupDA;
import javafx.scene.control.TextField;
import javafx.scene.control.ComboBox;
import javafx.scene.control.MenuItem;
import com.saburi.common.entities.LookupData;
import com.saburi.common.utils.CommonObjectNames;
import com.saburi.common.dbaccess.ChartAccountDA;
import com.saburi.common.entities.ChartAccount;
import com.saburi.common.utils.CommonEnums.AccountTypes;
import com.saburi.common.utils.CommonNavigate;

public class CustomerPostingGroupController extends EditController {

    private final CustomerPostingGroupDA oCustomerPostingGroupDA = new CustomerPostingGroupDA();
    @FXML
    private TextField txtCustomerPostingGroupID;
    @FXML
    private ComboBox cboCustomerGroup;
    @FXML
    private MenuItem cmiSelectCustomerGroup;
    @FXML
    private ComboBox cboReceivableAccount;
    @FXML
    private MenuItem cmiSelectReceivableAccount;
    @FXML
    private ComboBox cboServiceChargeAccount;
    @FXML
    private MenuItem cmiSelectServiceChargeAccount;
    @FXML
    private ComboBox cboPaymentDiscountAccount;
    @FXML
    private MenuItem cmiSelectPaymentDiscountAccount;
    private final ChartAccountDA oChartAccountDA = new ChartAccountDA();

    @Override
    public void initialize(URL url, ResourceBundle rb) {
        try {
            loadLookupData(cboCustomerGroup, CommonObjectNames.CUSTOMERGROUP);
            loadDBEntities(oChartAccountDA.getChartAccounts(AccountTypes.Income), cboReceivableAccount);
            loadDBEntities(oChartAccountDA.getChartAccounts(AccountTypes.Income), cboServiceChargeAccount);
            loadDBEntities(oChartAccountDA.getChartAccounts(AccountTypes.Expense), cboPaymentDiscountAccount);

            this.primaryKeyControl = txtCustomerPostingGroupID;
            this.dbAccess = oCustomerPostingGroupDA;
            this.restrainColumnConstraint = false;
//            this.minSize = 360;
            this.setNextCustomerPostingGroupID();
            selectLookupData(CommonNavigate.MAIN_CLASS,cmiSelectCustomerGroup, CommonObjectNames.CUSTOMERGROUP, "CustomerGroup", "Customer Group", 700, 400, cboCustomerGroup, false);

            selectItem(CommonNavigate.MAIN_CLASS, cmiSelectReceivableAccount, oChartAccountDA, oChartAccountDA.getChartAccountDAs(AccountTypes.Income), "ChartAccount", "Sales Account", 700, 400, cboReceivableAccount, true);
            selectItem(CommonNavigate.MAIN_CLASS, cmiSelectServiceChargeAccount, oChartAccountDA, oChartAccountDA.getChartAccountDAs(AccountTypes.Income), "ChartAccount", "Receivable Account", 700, 400, cboServiceChargeAccount, true);
            selectItem(CommonNavigate.MAIN_CLASS, cmiSelectPaymentDiscountAccount, oChartAccountDA, oChartAccountDA.getChartAccountDAs(AccountTypes.Expense), "ChartAccount", "Payment Discount Account", 700, 400, cboPaymentDiscountAccount, true);

        } catch (Exception e) {
            errorMessage(e);
        } finally {
        }
    }

    @Override
    protected void save() {
        try {
            this.editSuccessful = false;
            String customerPostingGroupID = getText(txtCustomerPostingGroupID, "Customer Posting Group ID");
            LookupData customerGroup = (LookupData) getEntity(cboCustomerGroup, "Customer Group");
            ChartAccount receivableAccount = (ChartAccount) getEntity(cboReceivableAccount, "Receivable Account");
            ChartAccount serviceChargeAccount = (ChartAccount) getEntity(cboServiceChargeAccount, "Service Charge Account");
            ChartAccount paymentDiscountAccount = (ChartAccount) getEntity(cboPaymentDiscountAccount, "Payment Discount Account");

            CustomerPostingGroupDA customerPostingGroupDA = new CustomerPostingGroupDA(customerPostingGroupID, customerGroup, receivableAccount, serviceChargeAccount, paymentDiscountAccount);
            String buttonText = btnSave.getText();
            if (buttonText.equalsIgnoreCase(FormMode.Save.name())) {
                customerPostingGroupDA.save();
                message("Saved Successfully");
                clear();
            } else if (buttonText.equalsIgnoreCase(FormMode.Update.name())) {
                customerPostingGroupDA.update();
                message("Updated Successfully");
            }
            this.dbAccess = customerPostingGroupDA;
            this.editSuccessful = true;
        } catch (Exception e) {
            errorMessage(e);
        } finally {
        }
    }

    @Override
    protected void delete() {
        try {
            String customerPostingGroupID = getText(txtCustomerPostingGroupID, "Customer Posting Group ID");
            CustomerPostingGroupDA customerPostingGroupDA = oCustomerPostingGroupDA.get(customerPostingGroupID);
            if (!warningOk("Confirm Delete", "You are about to delete a record with ID: " + customerPostingGroupID + " Are you sure you want to continue?", "Remember this action cannot be un done")) {
                return;
            }
            if (customerPostingGroupDA.delete()) {
                message("Deleted Successfully");
                this.clear();
            }
        } catch (Exception e) {
            errorMessage(e);
        }
    }

    @Override
    public void loadData() {
        try {
            String customerPostingGroupID = getText(txtCustomerPostingGroupID, "Customer Posting Group ID");

            CustomerPostingGroupDA customerPostingGroupDA = oCustomerPostingGroupDA.get(customerPostingGroupID);
            txtCustomerPostingGroupID.setText(customerPostingGroupDA.getCustomerPostingGroupID());
            cboCustomerGroup.setValue(customerPostingGroupDA.getCustomerGroup());
            cboReceivableAccount.setValue(customerPostingGroupDA.getReceivableAccount());
            cboServiceChargeAccount.setValue(customerPostingGroupDA.getServiceChargeAccount());
            cboPaymentDiscountAccount.setValue(customerPostingGroupDA.getPaymentDiscountAccount());

        } catch (Exception e) {
            errorMessage(e);
        }

    }

    private void setNextCustomerPostingGroupID() {
        try {
            if (btnSave.getText().equalsIgnoreCase(FormMode.Save.name())) {
                txtCustomerPostingGroupID.setText(oCustomerPostingGroupDA.getNextCustomerPostingGroupID(oCustomerPostingGroupDA.getNextIdHelper()));
            }
        } catch (Exception e) {
            errorMessage(e);
        }
    }

    private void clear() {
        txtCustomerPostingGroupID.clear();
        cboCustomerGroup.setValue(null);
        cboReceivableAccount.setValue(null);
        cboServiceChargeAccount.setValue(null);
        cboPaymentDiscountAccount.setValue(null);
        this.setNextCustomerPostingGroupID();

    }

}
