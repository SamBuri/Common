/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.common.controllers;

import java.net.URL;
import java.util.ResourceBundle;
import javafx.fxml.FXML;
import static com.saburi.common.utils.FXUIUtils.*;
import com.saburi.common.utils.Utilities.FormMode;
import static com.saburi.common.utils.FXUIUtils.warningOk;
import com.saburi.common.dbaccess.GeneralPostingGroupDA;
import javafx.scene.control.TextField;
import javafx.scene.control.ComboBox;
import javafx.scene.control.MenuItem;
import com.saburi.common.entities.LookupData;
import com.saburi.common.utils.CommonObjectNames;
import com.saburi.common.dbaccess.ChartAccountDA;
import com.saburi.common.entities.ChartAccount;
import java.io.IOException;
import com.saburi.common.utils.CommonEnums.AccountTypes;
import com.saburi.common.utils.CommonNavigate;

public class GeneralPostingGroupController extends EditController {

    private final GeneralPostingGroupDA oGeneralPostingGroupDA = new GeneralPostingGroupDA();
    @FXML
    private TextField txtGeneralPostingID;
    @FXML
    private ComboBox cboBusinessGroup;
    @FXML
    private MenuItem cmiSelectBusinessGroup;
    @FXML
    private ComboBox cboItemGroup;
    @FXML
    private MenuItem cmiSelectItemGroup;
    @FXML
    private ComboBox cboSalesAccount;
    @FXML
    private MenuItem cmiSelectSalesAccount;
    @FXML
    private ComboBox cboSalesDiscountAccount;
    @FXML
    private MenuItem cmiSelectSalesDiscountAccount;
    @FXML
    private ComboBox cboPurchasesAccount;
    @FXML
    private MenuItem cmiSelectPurchasesAccount;
    @FXML
    private ComboBox cboDirectCostAppliedAccount;
    @FXML
    private MenuItem cmiSelectDirectCostAppliedAccount;
    @FXML
    private ComboBox cboPurchaseDiscountAccount;
    @FXML
    private MenuItem cmiSelectPurchaseDiscountAccount;
    private final ChartAccountDA oChartAccountDA = new ChartAccountDA();

    @Override
    public void initialize(URL url, ResourceBundle rb) {
        try {
            loadLookupData(cboBusinessGroup, CommonObjectNames.BUSINESSGROUP);
            loadLookupData(cboItemGroup, CommonObjectNames.ITEMGROUP);
            loadDBEntities(oChartAccountDA.getChartAccounts(AccountTypes.Income), cboSalesAccount);
            loadDBEntities(oChartAccountDA.getChartAccounts(AccountTypes.Expense), cboSalesDiscountAccount);
            loadDBEntities(oChartAccountDA.getChartAccounts(AccountTypes.Expense), cboPurchasesAccount);
            loadDBEntities(oChartAccountDA.getChartAccounts(AccountTypes.Expense), cboDirectCostAppliedAccount);
            loadDBEntities(oChartAccountDA.getChartAccounts(AccountTypes.Income), cboPurchaseDiscountAccount);

            this.primaryKeyControl = txtGeneralPostingID;
            this.dbAccess = oGeneralPostingGroupDA;
            this.restrainColumnConstraint = false;
//            this.minSize = 360;
            this.setNextGeneralPostingID();
            selectLookupData(CommonNavigate.MAIN_CLASS, cmiSelectBusinessGroup, CommonObjectNames.BUSINESSGROUP, "view", "BusinessGroup", 700, 400, cboBusinessGroup, false);
            selectLookupData(CommonNavigate.MAIN_CLASS, cmiSelectItemGroup, CommonObjectNames.ITEMGROUP, "view", "ItemGroup", 700, 400, cboItemGroup, false);
            selectItem(CommonNavigate.MAIN_CLASS, cmiSelectSalesAccount, oChartAccountDA, oChartAccountDA.getChartAccountDAs(AccountTypes.Income),  "ChartAccount", "Sales Account", 700, 400, cboSalesAccount, true);
            selectItem(CommonNavigate.MAIN_CLASS, cmiSelectSalesDiscountAccount, oChartAccountDA, oChartAccountDA.getChartAccountDAs(AccountTypes.Expense), "ChartAccount", "Sales Discount Account", 700, 400, cboSalesDiscountAccount, true);
            selectItem(CommonNavigate.MAIN_CLASS, cmiSelectPurchasesAccount, oChartAccountDA, oChartAccountDA.getChartAccountDAs(AccountTypes.Expense), "ChartAccount", "Purchases Account", 700, 400, cboPurchasesAccount, true);
            selectItem(CommonNavigate.MAIN_CLASS, cmiSelectDirectCostAppliedAccount, oChartAccountDA, oChartAccountDA.getChartAccountDAs(AccountTypes.Expense), "ChartAccount", "Direct CostApplied Account", 700, 400, cboDirectCostAppliedAccount, true);
            selectItem(CommonNavigate.MAIN_CLASS, cmiSelectPurchaseDiscountAccount, oChartAccountDA, oChartAccountDA.getChartAccountDAs(AccountTypes.Income),  "ChartAccount", "Purchase Discount Account", 700, 400, cboPurchaseDiscountAccount, true);
        } catch (IOException e) {
            errorMessage(e);
        } finally {
        }
    }

    @Override
    protected void save() {
        try {
            this.editSuccessful = false;
            String generalPostingID = getText(txtGeneralPostingID, "General Posting ID");
            LookupData businessGroup = (LookupData) getEntity(cboBusinessGroup, "Business Group");
            LookupData itemGroup = (LookupData) getEntity(cboItemGroup, "Item Group");
            ChartAccount salesAccount = (ChartAccount) getEntity(cboSalesAccount, "Sales Account");
            ChartAccount salesDiscountAccount = (ChartAccount) getEntity(cboSalesDiscountAccount, "Sales Discout Account");
            ChartAccount purchasesAccount = (ChartAccount) getEntity(cboPurchasesAccount, "Purchases Account");
            ChartAccount directCostAppliedAccount = (ChartAccount) getEntity(cboDirectCostAppliedAccount, "Direct Cost Applied Account");
            ChartAccount purchaseDiscountAccount = (ChartAccount) getEntity(cboPurchaseDiscountAccount, "Purchase Discount Account");

            GeneralPostingGroupDA generalPostingGroupDA = new GeneralPostingGroupDA(generalPostingID, businessGroup, itemGroup, salesAccount, salesDiscountAccount, purchasesAccount, directCostAppliedAccount, purchaseDiscountAccount);
            String buttonText = btnSave.getText();
            if (buttonText.equalsIgnoreCase(FormMode.Save.name())) {
                generalPostingGroupDA.save();
                message("Saved Successfully");
                clear();
            } else if (buttonText.equalsIgnoreCase(FormMode.Update.name())) {
                generalPostingGroupDA.update();
                message("Updated Successfully");
            }
            this.dbAccess = generalPostingGroupDA;
            this.editSuccessful = true;
        } catch (Exception e) {
            errorMessage(e);
        } finally {
        }
    }

    @Override
    protected void delete() {
        try {
            String generalPostingID = getText(txtGeneralPostingID, "General Posting ID");
            GeneralPostingGroupDA generalPostingGroupDA = oGeneralPostingGroupDA.get(generalPostingID);
            if (!warningOk("Confirm Delete", "You are about to delete a record with ID: " + generalPostingID + " Are you sure you want to continue?", "Remember this action cannot be un done")) {
                return;
            }
            if (generalPostingGroupDA.delete()) {
                message("Deleted Successfully");
                this.clear();
            }
        } catch (Exception e) {
            errorMessage(e);
        }
    }

    @Override
    public void loadData() {
        try {
            String generalPostingID = getText(txtGeneralPostingID, "General Posting ID");

            GeneralPostingGroupDA generalPostingGroupDA = oGeneralPostingGroupDA.get(generalPostingID);
            txtGeneralPostingID.setText(generalPostingGroupDA.getGeneralPostingID());
            cboBusinessGroup.setValue(generalPostingGroupDA.getBusinessGroup());
            cboItemGroup.setValue(generalPostingGroupDA.getItemGroup());
            cboSalesAccount.setValue(generalPostingGroupDA.getSalesAccount());
            cboSalesDiscountAccount.setValue(generalPostingGroupDA.getSalesDiscountAccount());
            cboPurchasesAccount.setValue(generalPostingGroupDA.getPurchasesAccount());
            cboDirectCostAppliedAccount.setValue(generalPostingGroupDA.getDirectCostAppliedAccount());
            cboPurchaseDiscountAccount.setValue(generalPostingGroupDA.getPurchaseDiscountAccount());

        } catch (Exception e) {
            errorMessage(e);
        }

    }

    private void setNextGeneralPostingID() {
        try {
            if (btnSave.getText().equalsIgnoreCase(FormMode.Save.name())) {
                txtGeneralPostingID.setText(oGeneralPostingGroupDA.getNextGeneralPostingID(oGeneralPostingGroupDA.getNextIdHelper()));
            }
        } catch (Exception e) {
            errorMessage(e);
        }
    }

    private void clear() {
        txtGeneralPostingID.clear();
        cboBusinessGroup.setValue(null);
        cboItemGroup.setValue(null);
        cboSalesAccount.setValue(null);
        cboSalesDiscountAccount.setValue(null);
        cboPurchasesAccount.setValue(null);
        cboDirectCostAppliedAccount.setValue(null);
        cboPurchaseDiscountAccount.setValue(null);
        this.setNextGeneralPostingID();

    }

}
