/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.common.controllers;

import java.net.URL;
import java.util.ResourceBundle;
import javafx.fxml.FXML;
import static com.saburi.common.utils.FXUIUtils.*;
import com.saburi.common.utils.Utilities.FormMode;
import static com.saburi.common.utils.FXUIUtils.warningOk;
import com.saburi.common.dbaccess.InvoiceDA;
import javafx.scene.control.TextField;
import javafx.scene.control.DatePicker;
import java.time.LocalDate;
import javafx.scene.control.ComboBox;
import com.saburi.common.utils.CommonEnums.InvoiceTypes;
import javafx.collections.FXCollections;
import javafx.scene.control.MenuItem;
import com.saburi.common.dbaccess.CustomerDA;
import com.saburi.common.entities.Customer;
import static com.saburi.common.utils.Utilities.formatNumber;
import javafx.scene.control.TextArea;
import javafx.scene.control.TableView;
import java.util.List;
import com.saburi.common.dbaccess.InvoiceDetailsDA;
import com.saburi.common.dbaccess.ItemDA;
import com.saburi.common.dbaccess.LookupDataDA;
import com.saburi.common.dbaccess.MeasureGroupDA;
import com.saburi.common.dbaccess.MeasureRelationDA;
import com.saburi.common.entities.Invoice;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TablePosition;
import javafx.collections.ObservableList;
import com.saburi.common.utils.EditCell;
import com.saburi.common.entities.Item;
import com.saburi.common.utils.CommonNavigate;
import java.io.IOException;
import java.util.stream.Collectors;
import javafx.application.Platform;
import javafx.scene.input.KeyCode;
import com.saburi.common.utils.CommonObjectNames;
import com.saburi.common.utils.NumberToWord;
import static com.saburi.common.utils.Utilities.defortNumberOptional;



public class InvoiceController extends EditController {

    private final InvoiceDA oInvoiceDA = new InvoiceDA();
    @FXML
    private TextField txtInvoiceID;
    @FXML
    private DatePicker dtpInvoiceDate;
    @FXML
    private ComboBox cboInvoiceType;
    @FXML
    private ComboBox cboBillTo;
    @FXML
    private MenuItem cmiSelectBillTo;
    @FXML
    private TextField txtAmount;
    @FXML
    private TextArea txaAmountWords;
    @FXML
    private TableView<InvoiceDetailsDA> tblInvoiceDetails;
    @FXML
    private MenuItem cmiSelectItem;
    private final CustomerDA oCustomerDA = new CustomerDA();
    ItemDA oItemDA = new ItemDA();
    @FXML
    private TableColumn<InvoiceDetailsDA, String> tbcInvoiceDetailsItemID;
    @FXML
    private TableColumn<InvoiceDetailsDA, Integer> tbcInvoiceDetailsBaseQuantity;
    @FXML
    private TableColumn<InvoiceDetailsDA, String> tbcInvoiceDetailsUnitMeasure;

    @FXML
    private TableColumn<InvoiceDetailsDA, Integer> tbcInvoiceDetailsQuantity;
    @FXML
    private TableColumn<InvoiceDetailsDA, String> tbcInvoiceDetailsUnitPrice;
    @FXML
    private TableColumn<InvoiceDetailsDA, String> tbcInvoiceDetailsDiscount;
    @FXML
    private TableColumn<InvoiceDetailsDA, String> tbcInvoiceDetailsLocation;
    private Customer selectedBillTo;
    private final LookupDataDA oLookupDataDA = new LookupDataDA();

    @Override
    public void initialize(URL url, ResourceBundle rb) {
        try {
            cboInvoiceType.setItems(FXCollections.observableArrayList(InvoiceTypes.values()));
            loadDBEntities(oCustomerDA.getCustomers(), cboBillTo);
            validateNumber(txtAmount);
            formatValue(txtAmount);
            tblInvoiceDetails.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);
            setTableEditable();
            addRow(tblInvoiceDetails, new InvoiceDetailsDA());
            cmiSelectItem.setOnAction(e -> loadItem());
            this.primaryKeyControl = txtInvoiceID;
            this.dbAccess = oInvoiceDA;
            this.restrainColumnConstraint = false;
            this.minSize = 1000;
            this.setNextInvoiceID();
            setInvoiceDetailsItem();
            setInvoiceDetailsBaseQuantity();
            setInvoiceDetailsUnitMeasure();
            setInvoiceDetailsUnitPrice();
            setInvoiceDetailsDiscount();
            selectItem(CommonNavigate.mainClass,cmiSelectBillTo, oCustomerDA, "Customer", "Customer", 700, 400, cboBillTo, false);
            cboBillTo.setOnAction(e -> {
                this.selectedBillTo = ((Customer) getEntity(cboBillTo));
                InvoiceTypes invoiceType = (InvoiceTypes) cboInvoiceType.getValue();
                if (invoiceType.equals(InvoiceTypes.Direct)) {
                    tblInvoiceDetails.getItems().forEach(bi -> {
                        if (bi.getItemDA().getItemID() != null) {
                            setPrices(bi);
                        }

                    });
                } else {
                    tblInvoiceDetails.setItems(FXCollections.observableList(new CustomerDA(selectedBillTo).getToCreatePendingInvoiceDetailsDA()));

                }

                calculateAmount();
                tblInvoiceDetails.refresh();

            });
            tblInvoiceDetails.setOnMouseClicked(e -> {
                final TablePosition<InvoiceDetailsDA, String> focusedCell = tblInvoiceDetails
                        .focusModelProperty().get().focusedCellProperty().get();
                if (focusedCell.getTableColumn() == tbcInvoiceDetailsUnitMeasure) {
                    loadUnitMeasure();
                }
                else if(focusedCell.getTableColumn() == tbcInvoiceDetailsLocation){
                    loadLocation();
                }

            });

            cboInvoiceType.setOnAction(e -> setTableColumns());
            dtpInvoiceDate.setValue(LocalDate.now());

        } catch (Exception e) {
            errorMessage(e);
        } finally {
        }
    }

    @Override
    protected void save() {
        try {
            this.editSuccessful = false;
            String invoiceID = getText(txtInvoiceID, "Invoice ID");
            LocalDate invoiceDate = getDate(dtpInvoiceDate, "Invoice Date");
            InvoiceTypes invoiceType = (InvoiceTypes) getSelectedValue(cboInvoiceType, "Invoice Type");
            Customer billTo = (Customer) getEntity(cboBillTo, "Bill To");
            double amount = getDouble(txtAmount, "Amount");
            String amountWords = getText(txaAmountWords, "Amount Words");
            List<InvoiceDetailsDA> invoiceDetailsDAs = tblInvoiceDetails.getItems();
            invoiceDetailsDAs.removeIf((p) -> p.getItem()== null);

            InvoiceDA invoiceDA = new InvoiceDA(invoiceID, invoiceDate, invoiceType, billTo, amount, amountWords);
            invoiceDetailsDAs.forEach(e -> {
                e.setInvoice((Invoice) invoiceDA.getInvoice());
                if(invoiceType.equals(InvoiceTypes.Direct)){
                    e.setSellTo(billTo);
                }
            });
            invoiceDA.setInvoiceDetailsDAs(invoiceDetailsDAs);
            String buttonText = btnSave.getText();
            if (buttonText.equalsIgnoreCase(FormMode.Save.name())) {
                invoiceDA.save();
                message("Saved Successfully");
                clear();
            } else if (buttonText.equalsIgnoreCase(FormMode.Update.name())) {
                invoiceDA.update();
                message("Updated Successfully");
            }
            this.dbAccess = invoiceDA;
            this.editSuccessful = true;
        } catch (Exception e) {
            errorMessage(e);
        } finally {
        }
    }

    @Override
    protected void delete() {
        try {
            String invoiceID = getText(txtInvoiceID, "Invoice ID");
            InvoiceDA invoiceDA = oInvoiceDA.get(invoiceID);
            if (!warningOk("Confirm Delete", "You are about to delete a record with ID: " + invoiceID + " Are you sure you want to continue?", "Remember this action cannot be un done")) {
                return;
            }
            if (invoiceDA.delete()) {
                message("Deleted Successfully");
                this.clear();
            }
        } catch (Exception e) {
            errorMessage(e);
        }
    }

    @Override
    public void loadData() {
        try {
            String invoiceID = getText(txtInvoiceID, "Invoice ID");

            InvoiceDA invoiceDA = oInvoiceDA.get(invoiceID);
            txtInvoiceID.setText(invoiceDA.getInvoiceID());
            dtpInvoiceDate.setValue((LocalDate) invoiceDA.getInvoiceDate());
            cboInvoiceType.setValue(invoiceDA.getInvoiceType());
            cboBillTo.setValue(invoiceDA.getBillTo());
            txtAmount.setText(formatNumber(invoiceDA.getAmount()));
            txaAmountWords.setText(invoiceDA.getAmountWords());
            tblInvoiceDetails.setItems(FXCollections.observableArrayList(invoiceDA.getInvoiceDetailsDAs()));
            addRow(tblInvoiceDetails, new InvoiceDetailsDA());

        } catch (Exception e) {
            errorMessage(e);
        }

    }

    private void setNextInvoiceID() {
        try {
            if (btnSave.getText().equalsIgnoreCase(FormMode.Save.name())) {
                txtInvoiceID.setText(oInvoiceDA.getNextInvoiceID(oInvoiceDA.getNextIdHelper()));
            }
        } catch (Exception e) {
            errorMessage(e);
        }
    }

    private void setInvoiceDetailsItem() {
        tbcInvoiceDetailsItemID.setCellFactory(EditCell.StringTableColumn());
        tbcInvoiceDetailsItemID.setOnEditCommit(event -> {
            final String value = event.getNewValue() != null ? event.getNewValue()
                    : event.getOldValue();
            Item item = oItemDA.getItem(value);
            if (item == null) {
                Platform.runLater(() -> message("No Item with Id " + value + " found"));
                return;
            }
            InvoiceDetailsDA invoiceDetailsDA = event.getTableView().getItems().get(event.getTablePosition().getRow());
            invoiceDetailsDA.setItem(item);
            setPrices(invoiceDetailsDA);
            calculateAmount();
            tblInvoiceDetails.refresh();
            addRow(tblInvoiceDetails, new InvoiceDetailsDA());
        });
    }

    private void setInvoiceDetailsBaseQuantity() {
        tbcInvoiceDetailsBaseQuantity.setCellFactory(EditCell.IntegerTableColumn());
        tbcInvoiceDetailsBaseQuantity.setOnEditCommit(event -> {
            final int value = event.getNewValue() != null ? event.getNewValue()
                    : event.getOldValue();
            ((InvoiceDetailsDA) event.getTableView().getItems()
                    .get(event.getTablePosition().getRow()))
                    .setBaseQuantity(value);
            tblInvoiceDetails.refresh();
            addRow(tblInvoiceDetails, new InvoiceDetailsDA());
        });
    }

    private void setInvoiceDetailsUnitMeasure() {
        tbcInvoiceDetailsUnitMeasure.setCellFactory(EditCell.StringTableColumn());
        tbcInvoiceDetailsUnitMeasure.setOnEditCommit(event -> {
            final String value = event.getNewValue() != null ? event.getNewValue()
                    : event.getOldValue();
            ((InvoiceDetailsDA) event.getTableView().getItems()
                    .get(event.getTablePosition().getRow()))
                    .setUnitMeasure(value);
            tblInvoiceDetails.refresh();
            addRow(tblInvoiceDetails, new InvoiceDetailsDA());
        });
    }

    private void setInvoiceDetailsUnitPrice() {
        tbcInvoiceDetailsUnitPrice.setCellFactory(EditCell.StringTableColumn());
        tbcInvoiceDetailsUnitPrice.setOnEditCommit(event -> {
            final String value = event.getNewValue() != null ? event.getNewValue()
                    : event.getOldValue();
            ((InvoiceDetailsDA) event.getTableView().getItems()
                    .get(event.getTablePosition().getRow()))
                    .setUnitPrice(defortNumberOptional(value));
            tblInvoiceDetails.refresh();
            addRow(tblInvoiceDetails, new InvoiceDetailsDA());
        });
    }

    private void setInvoiceDetailsDiscount() {
        tbcInvoiceDetailsDiscount.setCellFactory(EditCell.StringTableColumn());
        tbcInvoiceDetailsDiscount.setOnEditCommit(event -> {
            final String value = event.getNewValue() != null ? event.getNewValue()
                    : event.getOldValue();
            ((InvoiceDetailsDA) event.getTableView().getItems()
                    .get(event.getTablePosition().getRow()))
                    .setDiscount(defortNumberOptional(value));
            tblInvoiceDetails.refresh();
            addRow(tblInvoiceDetails, new InvoiceDetailsDA());
            calculateAmount();
        });
    }

   

    private void clear() {
        txtInvoiceID.clear();
        dtpInvoiceDate.setValue(null);
        cboInvoiceType.setValue(null);
        cboBillTo.setValue(null);
        txtAmount.clear();
        txaAmountWords.clear();
        tblInvoiceDetails.getItems().clear();
        addRow(tblInvoiceDetails, new InvoiceDetailsDA());
        this.setNextInvoiceID();

    }

    private void loadItem() {
        try {
            ObservableList<InvoiceDetailsDA> selectedItems = tblInvoiceDetails.getSelectionModel().getSelectedItems();
            if (selectedItems.isEmpty() || selectedItems.size() > 1) {
                return;
            }
            ItemDA itemDA = (ItemDA) getSelectedItem(CommonNavigate.mainClass, new ItemDA(), "Item", "Items", 400, 450, tblInvoiceDetails, false);

            if (itemDA == null) {
                return;
            }

            if (tblInvoiceDetails.getItems().stream().map(InvoiceDetailsDA::getItemDA).collect(Collectors.toList()).contains(itemDA)) {
                throw new Exception("The record with id: " + itemDA.getId() + " is already selected");
            }

            final TablePosition<InvoiceDetailsDA, String> focusedCell = tblInvoiceDetails
                    .focusModelProperty().get().focusedCellProperty().get();
            InvoiceDetailsDA invoiceDetailsDA = tblInvoiceDetails.getItems().get(focusedCell.getRow());
            invoiceDetailsDA.setItem((Item) itemDA.getDBEntity());
            setPrices(invoiceDetailsDA);
            calculateAmount();
            addRow(tblInvoiceDetails, new InvoiceDetailsDA());
            tblInvoiceDetails.refresh();

        } catch (IOException e) {
            errorMessage(e);
        } catch (Exception e) {
            errorMessage(e);
        }
    }

    public void calculateAmount() {
        double totalAmount = tblInvoiceDetails.getItems().stream().mapToDouble(InvoiceDetailsDA::getAmount).sum();
        txtAmount.setText(formatNumber(totalAmount));
        txaAmountWords.setText(NumberToWord.toWords(totalAmount));

    }

    private void setPrices(InvoiceDetailsDA invoiceDetailsDA) {
        invoiceDetailsDA.setUnitPrice(invoiceDetailsDA.getItemDA().getUnitPrice(selectedBillTo));
        invoiceDetailsDA.setDiscount(invoiceDetailsDA.getItemDA().getDiscount(selectedBillTo));
    }

    private void setTableColumns() {
        InvoiceTypes invoiceType = (InvoiceTypes) cboInvoiceType.getValue();
        if (invoiceType.equals(InvoiceTypes.Direct)) {
            tbcInvoiceDetailsItemID.editableProperty().set(true);
            tbcInvoiceDetailsQuantity.editableProperty().set(true);
            tbcInvoiceDetailsUnitPrice.editableProperty().set(true);
            tbcInvoiceDetailsUnitPrice.editableProperty().set(true);
        } else {
            tbcInvoiceDetailsItemID.editableProperty().set(false);
            tbcInvoiceDetailsQuantity.editableProperty().set(false);
            tbcInvoiceDetailsUnitPrice.editableProperty().set(false);
            tbcInvoiceDetailsUnitPrice.editableProperty().set(false);
        }
        tblInvoiceDetails.getItems().clear();
        txtAmount.clear();
        txaAmountWords.clear();
        addRow(tblInvoiceDetails, new InvoiceDetailsDA());
    }

    public void setTableEditable() {
        tblInvoiceDetails.setEditable(true);
        // allows the individual cells to be selected
        tblInvoiceDetails.getSelectionModel().cellSelectionEnabledProperty().set(true);
        // when character or numbers pressed it will start edit in editable
        // fields
        tblInvoiceDetails.setOnKeyPressed(event -> {
            if (event.getCode().isLetterKey() || event.getCode().isDigitKey()) {
                final TablePosition<InvoiceDetailsDA, ?> focusedCell = tblInvoiceDetails
                        .focusModelProperty().get().focusedCellProperty().get();
                tblInvoiceDetails.edit(focusedCell.getRow(), focusedCell.getTableColumn());
            } else if (event.getCode() == KeyCode.RIGHT
                    || event.getCode() == KeyCode.TAB) {
                tblInvoiceDetails.getSelectionModel().selectNext();
                event.consume();
            } else if (event.getCode() == KeyCode.LEFT) {
                // work around due to
                // TableView.getSelectionModel().selectPrevious() due to a bug
                // stopping it from working on
                // the first column in the last row of the table
                selectPrevious(tblInvoiceDetails);
                event.consume();
            } else if (event.getCode() == KeyCode.DELETE) {
                tblInvoiceDetails.getItems().removeAll(tblInvoiceDetails.getSelectionModel().getSelectedItems());
                calculateAmount();
            }
        });
    }

    private void loadUnitMeasure() {
        try {
            ObservableList<InvoiceDetailsDA> selectedItems = tblInvoiceDetails.getSelectionModel().getSelectedItems();
            if (selectedItems.isEmpty() || selectedItems.size() > 1) {
                return;
            }

            final TablePosition<InvoiceDetailsDA, String> focusedCell = tblInvoiceDetails
                    .focusModelProperty().get().focusedCellProperty().get();

            if (focusedCell == null) {
                return;
            }

            InvoiceDetailsDA invoiceDetailsDa = tblInvoiceDetails.getItems().get(focusedCell.getRow());

            ItemDA itemDA = invoiceDetailsDa.getItemDA();
            if (itemDA == null) {
                return;
            }
            List<MeasureRelationDA> measureRelationDAs = new MeasureGroupDA().get(itemDA.getMeasureGroup().getMeasureGroupID()).getAllMeasureRelationsDAs();

            MeasureRelationDA measureRelationDA = (MeasureRelationDA) getSelectedItem(CommonNavigate.mainClass, new MeasureRelationDA(), measureRelationDAs, "View", "Item", 400, 450, tblInvoiceDetails, false);

            if (measureRelationDA != null) {
                invoiceDetailsDa.setUnitMeasure(measureRelationDA.getDisplayKey());
                invoiceDetailsDa.setMeasureSize(measureRelationDA.getBaseSize());

            }

            tblInvoiceDetails.refresh();
            calculateAmount();

        } catch (IOException e) {
            errorMessage(e);
        } catch (Exception e) {
            errorMessage(e);
        }
    }
    
    private void loadLocation() {
        try {
            ObservableList<InvoiceDetailsDA> selectedItems = tblInvoiceDetails.getSelectionModel().getSelectedItems();
            if (selectedItems.isEmpty() || selectedItems.size() > 1) {
                return;
            }

            final TablePosition<InvoiceDetailsDA, String> focusedCell = tblInvoiceDetails
                    .focusModelProperty().get().focusedCellProperty().get();

            if (focusedCell == null) {
                return;
            }

            InvoiceDetailsDA invoiceDetailsDa = tblInvoiceDetails.getItems().get(focusedCell.getRow());

            ItemDA itemDA = invoiceDetailsDa.getItemDA();
            if (itemDA == null) {
                return;
            }
            List<LookupDataDA> lookupDataDAs = LookupDataDA.getLookupDataDAs(oLookupDataDA.getLookupDataByObjectID(CommonObjectNames.LOCATION));
            
            LookupDataDA lookupDataDA = (LookupDataDA) getSelectedItem(CommonNavigate.mainClass, new LookupDataDA(), lookupDataDAs, "View", "Item", 400, 450, tblInvoiceDetails, false);

            if (lookupDataDA != null) {
                invoiceDetailsDa.setLocation(lookupDataDA.getLookupData());
                
            }

            tblInvoiceDetails.refresh();
           

        } catch (IOException e) {
            errorMessage(e);
        } catch (Exception e) {
            errorMessage(e);
        }
    }

}
