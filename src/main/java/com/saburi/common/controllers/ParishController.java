/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.common.controllers;

import java.net.URL;
import java.util.ResourceBundle;
import javafx.fxml.FXML;
import static com.saburi.common.utils.FXUIUtils.*;
import com.saburi.common.utils.Utilities.FormMode;
import static com.saburi.common.utils.FXUIUtils.warningOk;
import com.saburi.common.dbaccess.ParishDA;
import javafx.scene.control.TextField;
import javafx.scene.control.ComboBox;
import javafx.scene.control.MenuItem;
import com.saburi.common.entities.LookupData;
import com.saburi.common.utils.CommonNavigate;
import com.saburi.common.utils.CommonObjectNames;
import com.saburi.common.dbaccess.CountyDA;
import com.saburi.common.entities.County;
import com.saburi.common.dbaccess.SubCountyDA;
import com.saburi.common.entities.SubCounty;
import java.util.List;

public class ParishController extends EditController {

    private final ParishDA oParishDA = new ParishDA();
    @FXML
    private ComboBox cboDistrict;
    @FXML
    private MenuItem cmiSelectDistrict;
    @FXML
    private ComboBox cboCounty;
    @FXML
    private MenuItem cmiSelectCounty;
    @FXML
    private ComboBox cboSubCounty;
    @FXML
    private MenuItem cmiSelectSubCounty;
    @FXML
    private TextField txtParishID;
    @FXML
    private TextField txtParishName;
    private final CountyDA oCountyDA = new CountyDA();
    private final SubCountyDA oSubCountyDA = new SubCountyDA();

    @Override
    public void initialize(URL url, ResourceBundle rb) {
        try {
            loadLookupData(cboDistrict, CommonObjectNames.DISTRICT);
            loadDBEntities(cboCounty);
            loadDBEntities(cboSubCounty);

            this.primaryKeyControl = txtParishID;
            this.dbAccess = oParishDA;
            this.restrainColumnConstraint = false;
            //this.prefSize = 360;
            cboDistrict.setOnAction(e -> {
                LookupData district = (LookupData) getEntity(cboDistrict);
                if (district == null) {
                    return;
                }
                loadDBEntities(oCountyDA.getCounties(district), cboCounty);
            });

            cboCounty.setOnAction(e -> {
                County county = (County) getEntity(cboCounty);
                if (county == null) {
                    return;
                }
                loadDBEntities(oSubCountyDA.getSubCounties(county), cboSubCounty);
            });
            cboSubCounty.setOnAction(e -> this.setNextParishID());
            selectLookupData(cmiSelectDistrict, CommonObjectNames.DISTRICT, "District", cboDistrict, false);
            selectItem(CommonNavigate.MAIN_CLASS, cmiSelectCounty, oCountyDA, "County", "County", cboCounty, true);
            selectItem(CommonNavigate.MAIN_CLASS, cmiSelectSubCounty, oSubCountyDA, "SubCounty", "Sub County", cboSubCounty, true);
        } catch (Exception e) {
            errorMessage(e);
        } finally {
        }
    }

    @Override
    protected void save() {
        try {
            this.editSuccessful = false;

            SubCounty subCounty = (SubCounty) getEntity(cboSubCounty, "Sub County");
            String parishID = getText(txtParishID, "Parish ID");
            String parishName = getText(txtParishName, "Parish Name");

            ParishDA parishDA = new ParishDA(subCounty, parishID, parishName);
            String buttonText = btnSave.getText();
            if (buttonText.equalsIgnoreCase(FormMode.Save.name())) {
                parishDA.save();
                message("Saved Successfully");
                clear();
            } else if (buttonText.equalsIgnoreCase(FormMode.Update.name())) {
                parishDA.update();
                message("Updated Successfully");
            }
            this.dbAccess = parishDA;
            this.editSuccessful = true;
        } catch (Exception e) {
            errorMessage(e);
        } finally {
        }
    }

    @Override
    protected void delete() {
        try {
            String parishID = getText(txtParishID, "Parish ID");
            ParishDA parishDA = oParishDA.get(parishID);
            if (!warningOk("Confirm Delete", "You are about to delete a record with ID: " + parishID + " Are you sure you want to continue?", "Remember this action cannot be un done")) {
                return;
            }
            if (parishDA.delete()) {
                message("Deleted Successfully");
            }
        } catch (Exception e) {
            errorMessage(e);
        }
    }

    @Override
    public void loadData() {
        try {
            String parishID = getText(txtParishID, "Parish ID");

            ParishDA parishDA = oParishDA.get(parishID);
            cboDistrict.setValue(parishDA.getDistrict());
            cboSubCounty.setValue(parishDA.getSubCounty());
            txtParishID.setText(parishDA.getParishID());
            txtParishName.setText(parishDA.getParishName());
            County county = parishDA.getCounty();
            List<County> counties = cboCounty.getItems();
            if (!counties.contains(county)) {
                cboCounty.getItems().add(county);
            }
            cboCounty.setValue(parishDA.getCounty());
            SubCounty subCounty = parishDA.getSubCounty();
            List<SubCounty> subCounties = cboSubCounty.getItems();
            if (!subCounties.contains(subCounty)) {
                cboSubCounty.getItems().add(subCounty);
            }

        } catch (Exception e) {
            errorMessage(e);
        }

    }

    private void setNextParishID() {
        try {
            if (btnSave.getText().equalsIgnoreCase(FormMode.Save.name())) {
                SubCounty subCounty = (SubCounty) getEntity(cboSubCounty);
                if (subCounty == null) {
                    return;
                }
                txtParishID.setText(oParishDA.getNextParishID(oParishDA.getNextIdHelper(subCounty), subCounty.getId().toString()));
            }
        } catch (Exception e) {
            errorMessage(e);
        }
    }

}
