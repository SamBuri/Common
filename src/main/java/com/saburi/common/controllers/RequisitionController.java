/*
 Sam Buriima
generated by Saburi Tools
*/
package com.saburi.common.controllers;

import java.net.URL;
import java.util.ResourceBundle;
import javafx.fxml.FXML;
import static com.saburi.common.utils.FXUIUtils.*;
import com.saburi.common.utils.Utilities.FormMode;
import static com.saburi.common.utils.FXUIUtils.warningOk;
import com.saburi.common.dbaccess.RequisitionDA;
import javafx.scene.control.TextField;
import javafx.scene.control.DatePicker;
import java.time.LocalDate;
import javafx.scene.control.ComboBox;
import com.saburi.common.utils.CommonEnums.OpenStatus;
import javafx.collections.FXCollections;
import javafx.scene.control.MenuItem;
import com.saburi.common.dbaccess.LookupDataDA;
import  com.saburi.common.entities.LookupData;
import  com.saburi.common.utils.CommonNavigate;
import com.saburi.common.utils.CommonObjectNames;


public class RequisitionController  extends EditController{

 private final RequisitionDA oRequisitionDA = new RequisitionDA();
@FXML private TextField txtRequisitionID;
@FXML private DatePicker dtpRequistionDate;
@FXML private ComboBox cboStatus;
@FXML private ComboBox cboItemGroup;
@FXML private MenuItem cmiSelectItemGroup;



 @Override
public void initialize(URL url, ResourceBundle rb){
try{
  loadLookupData(cboItemGroup, CommonObjectNames.ITEMGROUP);
cboStatus.setItems(FXCollections.observableArrayList(OpenStatus.values()));
this.primaryKeyControl = txtRequisitionID;
          this.dbAccess = oRequisitionDA;
          this.restrainColumnConstraint = false;
 //this.minSize = 360;
this.setNextRequisitionID();
selectLookupData(CommonNavigate.MAIN_CLASS, cmiSelectItemGroup, CommonObjectNames.ITEMGROUP, "LookupData", "Item Group", cboItemGroup, false);}catch(Exception e){errorMessage(e);}finally{}
}
@Override
protected void save(){
try{
 this.editSuccessful = false;String requisitionID =  getText(txtRequisitionID, "Requistion ID");
LocalDate requistionDate = getDate(dtpRequistionDate, "Requisition Date");
OpenStatus status =  (OpenStatus)getSelectedValue(cboStatus, "Status");
LookupData itemGroup =(LookupData) getEntity(cboItemGroup, "Item Group");

RequisitionDA requisitionDA= new RequisitionDA(requisitionID,requistionDate,status,itemGroup);
String buttonText =btnSave.getText();
if (buttonText.equalsIgnoreCase(FormMode.Save.name())) {
                requisitionDA.save();
                message("Saved Successfully");
                clear();
            } else if (buttonText.equalsIgnoreCase(FormMode.Update.name())) {
                requisitionDA.update();
                message("Updated Successfully");
            }
this.dbAccess = requisitionDA;
this.editSuccessful = true;
}catch(Exception e){errorMessage(e);}finally{}
}
@Override
protected void delete(){
        try {
String requisitionID =  getText(txtRequisitionID, "Requistion ID");
RequisitionDA requisitionDA = oRequisitionDA .get(requisitionID);
 if(!warningOk("Confirm Delete", "You are about to delete a record with ID: "+requisitionID+" Are you sure you want to continue?", "Remember this action cannot be un done"))return;
            if(requisitionDA.delete()){
                message("Deleted Successfully");
                this.clear();
            }
        } catch (Exception e) {
            errorMessage(e);
        }
        }
@Override
public void loadData() {
        try {
String requisitionID =  getText(txtRequisitionID, "Requistion ID");

RequisitionDA requisitionDA = oRequisitionDA .get(requisitionID);
txtRequisitionID.setText(requisitionDA. getRequisitionID());
dtpRequistionDate.setValue((LocalDate)requisitionDA. getRequistionDate());
cboStatus.setValue(requisitionDA. getStatus());
cboItemGroup.setValue(requisitionDA.getItemGroup());

        } catch (Exception e) {
            errorMessage(e);
        }

    }
private void setNextRequisitionID(){
 try{if(btnSave.getText ().equalsIgnoreCase(FormMode.Save.name())){
txtRequisitionID.setText(oRequisitionDA.getNextRequisitionID(oRequisitionDA.getNextIdHelper()));
}}catch(Exception e){errorMessage(e);}
}
private void clear(){
 txtRequisitionID.clear();
dtpRequistionDate.setValue(null);
cboStatus.setValue(null);
cboItemGroup.setValue(null);
this.setNextRequisitionID();

}


}
