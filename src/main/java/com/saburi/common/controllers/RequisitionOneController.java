/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.common.controllers;

import java.net.URL;
import java.util.ResourceBundle;
import javafx.fxml.FXML;
import static com.saburi.common.utils.FXUIUtils.*;
import com.saburi.common.utils.Utilities.FormMode;
import static com.saburi.common.utils.FXUIUtils.warningOk;
import com.saburi.common.dbaccess.RequisitionOneDA;
import javafx.scene.control.TextField;
import javafx.scene.control.DatePicker;
import java.time.LocalDate;
import javafx.scene.control.ComboBox;
import com.saburi.common.utils.CommonEnums.OpenStatus;
import javafx.collections.FXCollections;
import javafx.scene.control.MenuItem;
import com.saburi.common.entities.LookupData;
import com.saburi.common.utils.CommonNavigate;
import com.saburi.common.utils.CommonObjectNames;

public class RequisitionOneController extends EditController {

    private final RequisitionOneDA oRequisitionOneDA = new RequisitionOneDA();
    @FXML
    private TextField txtRequisitionID;
    @FXML
    private DatePicker dtpRequistionDate;
    @FXML
    private ComboBox cboStatus;
    @FXML
    private ComboBox cboItemGroup;
    @FXML
    private MenuItem cmiSelectItemGroup;

    @Override
    public void initialize(URL url, ResourceBundle rb) {
        try {
            loadLookupData(cboItemGroup, CommonObjectNames.ITEMGROUP);
            cboStatus.setItems(FXCollections.observableArrayList(OpenStatus.values()));
            this.primaryKeyControl = txtRequisitionID;
            this.dbAccess = oRequisitionOneDA;
            this.restrainColumnConstraint = false;
            //this.minSize = 360;
            this.setNextRequisitionID();
            selectLookupData(CommonNavigate.MAIN_CLASS, cmiSelectItemGroup, CommonObjectNames.ITEMGROUP, "LookupData", "Item Group", cboItemGroup, false);
        } catch (Exception e) {
            errorMessage(e);
        } finally {
        }
    }

    @Override
    protected void save() {
        try {
            this.editSuccessful = false;
            String requisitionID = getText(txtRequisitionID, "Requistion ID");
            LocalDate requistionDate = getDate(dtpRequistionDate, "Requisition Date");
            OpenStatus status = (OpenStatus) getSelectedValue(cboStatus, "Status");
            LookupData itemGroup = (LookupData) getEntity(cboItemGroup, "Item Group");

            RequisitionOneDA requisitionOneDA = new RequisitionOneDA(requisitionID, requistionDate, status, itemGroup);
            String buttonText = btnSave.getText();
            if (buttonText.equalsIgnoreCase(FormMode.Save.name())) {
                requisitionOneDA.save();
                message("Saved Successfully");
                clear();
            } else if (buttonText.equalsIgnoreCase(FormMode.Update.name())) {
                requisitionOneDA.update();
                message("Updated Successfully");
            }
            this.dbAccess = requisitionOneDA;
            this.editSuccessful = true;
        } catch (Exception e) {
            errorMessage(e);
        } finally {
        }
    }

    @Override
    protected void delete() {
        try {
            String requisitionID = getText(txtRequisitionID, "Requistion ID");
            RequisitionOneDA requisitionOneDA = oRequisitionOneDA.get(requisitionID);
            if (!warningOk("Confirm Delete", "You are about to delete a record with ID: " + requisitionID + " Are you sure you want to continue?", "Remember this action cannot be un done")) {
                return;
            }
            if (requisitionOneDA.delete()) {
                message("Deleted Successfully");
                this.clear();
            }
        } catch (Exception e) {
            errorMessage(e);
        }
    }

    @Override
    public void loadData() {
        try {
            String requisitionID = getText(txtRequisitionID, "Requistion ID");

            RequisitionOneDA requisitionOneDA = oRequisitionOneDA.get(requisitionID);
            txtRequisitionID.setText(requisitionOneDA.getRequisitionID());
            dtpRequistionDate.setValue((LocalDate) requisitionOneDA.getRequistionDate());
            cboStatus.setValue(requisitionOneDA.getStatus());
            cboItemGroup.setValue(requisitionOneDA.getItemGroup());

        } catch (Exception e) {
            errorMessage(e);
        }

    }

    private void setNextRequisitionID() {
        try {
            if (btnSave.getText().equalsIgnoreCase(FormMode.Save.name())) {
                txtRequisitionID.setText(oRequisitionOneDA.getNextRequisitionID(oRequisitionOneDA.getNextIdHelper()));
            }
        } catch (Exception e) {
            errorMessage(e);
        }
    }

    private void clear() {
        txtRequisitionID.clear();
        dtpRequistionDate.setValue(null);
        cboStatus.setValue(null);
        cboItemGroup.setValue(null);
        this.setNextRequisitionID();

    }

}
