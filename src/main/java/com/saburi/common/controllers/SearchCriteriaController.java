/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.common.controllers;

import com.saburi.common.dbaccess.DBAccess;
import com.saburi.common.utils.CommonEnums.LogicalOperators;
import java.net.URL;
import java.util.ResourceBundle;
import javafx.fxml.FXML;
import static com.saburi.common.utils.FXUIUtils.*;
import javafx.scene.control.ComboBox;
import javafx.scene.control.MenuItem;
import com.saburi.common.utils.SearchColumn;
import com.saburi.common.utils.SearchColumn.SearchDataTypes;
import javafx.scene.control.TextField;
import javafx.scene.control.CheckBox;
import javafx.scene.control.TableView;

import javafx.scene.control.TableColumn;
import com.saburi.common.utils.SearchCriteria;
import java.util.ArrayList;
import java.util.List;
import java.util.function.Predicate;
import javafx.beans.property.SimpleBooleanProperty;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.scene.control.Button;
import javafx.scene.control.DatePicker;
import javafx.scene.control.TableCell;
import javafx.scene.control.cell.CheckBoxTableCell;
import javafx.scene.layout.HBox;
import javafx.util.Callback;

public class SearchCriteriaController extends UIController {

    @FXML
    private ComboBox<SearchColumn> cboSearchColumn;
    @FXML
    private MenuItem cmiSelectSearchColumn;
    @FXML
    private ComboBox<String> cboSearchType;
    @FXML
    private TextField txtSearch, txtSecondValue;
    @FXML
    private CheckBox chkValue;
    @FXML
    private HBox hbxTextFields, hbxDatePickers, hbxCheckBox;
    @FXML
    private DatePicker dtpFirst, dtpSecond;
    @FXML
    private CheckBox chkNegate;
    @FXML
    private ComboBox cboPredicateType;
    @FXML
    private Button btnAdd, btnClose, btnOK;
    @FXML
    private TableView<SearchCriteria> tblSearchCriteria;
    @FXML
    private TableColumn<SearchCriteria, String> tbcSearchCriteriaColumnName;
    @FXML
    private TableColumn<SearchCriteria, String> tbcSearchCriteriaValue;
    @FXML
    private TableColumn<SearchCriteria, String> tbcSearchCriteriaSecondValue;
    @FXML
    private TableColumn<SearchCriteria, Boolean> tbcSearchCriteriaNegate;
    private boolean resultOk;
    protected List<SearchCriteria> searchCriterias = new ArrayList<>();

    @Override
    public void initialize(URL url, ResourceBundle rb) {
        try {
            formatDatePicker(dtpFirst);
            formatDatePicker(dtpSecond);
            final Callback<TableColumn<SearchCriteria, Boolean>, TableCell<SearchCriteria, Boolean>> cellFCallback = CheckBoxTableCell.forTableColumn(tbcSearchCriteriaNegate);
            tbcSearchCriteriaNegate.setCellFactory(cellFCallback);
            tbcSearchCriteriaNegate.setCellValueFactory((TableColumn.CellDataFeatures<SearchCriteria, Boolean> param) -> {
                SimpleBooleanProperty navigateProperty = new SimpleBooleanProperty(param.getValue().isNegate());
                navigateProperty.addListener((ObservableValue<? extends Boolean> observable, Boolean oldValue, Boolean newValue) -> {
                    navigateProperty.set(newValue);
                });
                return navigateProperty;
            });
            setTableEditable(tblSearchCriteria);

            tblSearchCriteria.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);
            cboPredicateType.setItems(FXCollections.observableArrayList(LogicalOperators.values()));
            cboPredicateType.setValue(LogicalOperators.AND);
            this.cboSearchColumn.setOnAction(e -> searchColumnSelected());

            cboSearchType.setOnAction(e -> {
                String searchType = getText(cboSearchType);
                boolean showSecond = searchType.equals(SearchColumn.SearchType.Between.name()) || searchType.equals(SearchColumn.SearchType.Between_Inclusive.name());
                this.txtSecondValue.setVisible(showSecond);
                this.dtpSecond.setVisible(showSecond);
            });

            btnAdd.setOnAction(e -> setSearchCriteria());
            btnClose.setOnAction(e -> btnClose.getScene().getWindow().hide());
            btnOK.setOnAction(e -> {
                List<SearchCriteria> criterias = tblSearchCriteria.getItems();
                if (criterias.size() < 1) {
                    message("You must select atleast one condition");
                    return;
                }

                this.searchCriterias = criterias;
                this.resultOk = true;
                btnOK.getScene().getWindow().hide();
            });

        } catch (Exception e) {
            errorMessage(e);
        } finally {
        }
    }

    public void loadSearchColumns(ObservableList<SearchColumn> searchColumns) {
        loadSearchColumnCombo(searchColumns, cboSearchColumn);
    }

    private void searchColumnSelected() {
        SearchColumn searchColumn = cboSearchColumn.getValue();
        if (searchColumn == null) {
            hbxTextFields.setVisible(true);
            hbxDatePickers.setVisible(false);
            hbxCheckBox.setVisible(false);
            return;
        }
        ObservableList searchTypes = FXCollections.observableList(searchColumn.getSearchTypes());
        cboSearchType.setItems(searchTypes);
        cboSearchType.setValue(searchColumn.getDefaultSearchType().name());
        String searchDataType = searchColumn.getDataType().name();

        if (searchDataType.equalsIgnoreCase(SearchColumn.SearchDataTypes.DATE.name())) {
            hbxTextFields.setVisible(false);
            hbxDatePickers.setVisible(true);
            hbxCheckBox.setVisible(false);
        } else if (searchDataType.equalsIgnoreCase(SearchColumn.SearchDataTypes.BOOLEAN.name())) {
            hbxTextFields.setVisible(false);
            hbxDatePickers.setVisible(false);
            hbxCheckBox.setVisible(true);
            cboSearchType.setValue(SearchColumn.SearchType.Equal.name());
        } else {
            hbxTextFields.setVisible(true);
            hbxDatePickers.setVisible(false);
            hbxCheckBox.setVisible(false);
        }

    }

    private void setSearchCriteria() {
        try {
            LogicalOperators operator = (LogicalOperators) getSelectedValue(cboPredicateType, "Operator");
            SearchColumn searchColumn = cboSearchColumn.getValue();
            String searchType = getText(cboSearchType, "Search Type");

            SearchDataTypes searchDateType = searchColumn.getDataType();
            boolean enforceSecondValue = txtSecondValue.isVisible();
            Object value;
            Object secondValue;
            switch (searchDateType) {
                case DATE:
                    value = getDate(dtpFirst, "First Date");
                    secondValue = getDate(dtpSecond, "Second Date", enforceSecondValue);
                    break;
                case BOOLEAN:
                    value = chkValue.isSelected();
                    secondValue = null;
                    break;
                case NUMBER:
                    value = getDouble(txtSearch, "Value");
                    secondValue = getDouble(txtSecondValue, "Second Value", enforceSecondValue);
                    break;
                case MONEY:
                    value = getDouble(txtSearch, "Value");
                    secondValue = getDouble(txtSecondValue, "Second Value", enforceSecondValue);
                    break;
                case INTEGER:
                    value = getDouble(txtSearch, "Value");
                    secondValue = getDouble(txtSecondValue, "Second Value", enforceSecondValue);
                    break;
                default:
                    value = getText(txtSearch, "Value");
                    secondValue = getText(txtSecondValue, "Second Value", enforceSecondValue);
                    break;
            }
            boolean negate = chkNegate.isSelected();

            SearchCriteria searchCriteria = new SearchCriteria(operator, searchColumn, searchType, value, secondValue, negate);
            if (!enforceSecondValue) {
                searchCriteria.setSecondValue("");
                searchCriteria.setSecondValueDisplay("");
            }
            tblSearchCriteria.getItems().add(searchCriteria);

        } catch (Exception e) {
            errorMessage(e);
        } finally {
        }
    }

    public void loadTable(ObservableList<SearchCriteria> searchCriterias) {
        tblSearchCriteria.setItems(searchCriterias);
    }

    public List<SearchCriteria> getSearchCriterias() {
        return this.searchCriterias;
    }

    public Predicate<DBAccess> getPredicate() {
        List<SearchCriteria> sCriteria = tblSearchCriteria.getItems();
        SearchCriteria sc = sCriteria.get(0);
        Predicate<DBAccess> predicate = sc.makePredicate();
        sCriteria.remove(0);
        for (SearchCriteria searchCriteria : sCriteria) {
            if (searchCriteria.getOperator().equals(LogicalOperators.OR)) {
                predicate = predicate.or(searchCriteria.makePredicate());
            } else {
                predicate = predicate.and(searchCriteria.makePredicate());
            }
        }
        sCriteria.add(0, sc);
        return predicate;
    }

    public boolean isResultOk() {
        return resultOk;
    }

}
