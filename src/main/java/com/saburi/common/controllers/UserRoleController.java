/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.common.controllers;

import com.saburi.common.dbaccess.AccessObjectDA;
import java.net.URL;
import java.util.ResourceBundle;
import javafx.fxml.FXML;
import static com.saburi.common.utils.FXUIUtils.*;
import com.saburi.common.utils.Utilities.FormMode;
import static com.saburi.common.utils.FXUIUtils.warningOk;
import com.saburi.common.dbaccess.UserRoleDA;
import javafx.scene.control.TextField;
import javafx.scene.control.TextArea;
import javafx.scene.control.TableView;
import java.util.List;
import com.saburi.common.dbaccess.UserRoleDetailDA;
import com.saburi.common.entities.AccessObject;
import javafx.collections.FXCollections;
import com.saburi.common.entities.UserRole;
import com.saburi.common.utils.CommonNavigate;
import java.util.stream.Collectors;
import javafx.beans.value.ObservableValue;
import javafx.scene.control.MenuItem;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TablePosition;
import javafx.collections.ObservableList;
import javafx.scene.control.TableCell;
import javafx.scene.control.cell.CheckBoxTableCell;
import javafx.util.Callback;
import com.saburi.common.utils.EditCell;

public class UserRoleController extends EditController {

    private final UserRoleDA oUserRoleDA = new UserRoleDA();
    @FXML
    private TextField txtRoleName;
    @FXML
    private TextArea txaDescription;
    @FXML
    private TableView<UserRoleDetailDA> tblUserRoleDetails;
    @FXML
    private MenuItem cmiSelectAccessObjects;
    @FXML
    private TableColumn<UserRoleDetailDA, Boolean> tbcUserRoleDetailCanCreate;
    @FXML
    private TableColumn<UserRoleDetailDA, Boolean> tbcUserRoleDetailCanUpdate;
    @FXML
    private TableColumn<UserRoleDetailDA, Boolean> tbcUserRoleDetailCanRead;
    @FXML
    private TableColumn<UserRoleDetailDA, Boolean> tbcUserRoleDetailCanDelete;
    @FXML
    private TableColumn<UserRoleDetailDA, Boolean> tbcUserRoleDetailCanPrint;

    @Override
    public void initialize(URL url, ResourceBundle rb) {
        try {

            tblUserRoleDetails.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);
            setTableEditable(tblUserRoleDetails);
            addRow(tblUserRoleDetails, new UserRoleDetailDA());
            cmiSelectAccessObjects.setOnAction(e -> loadAccessObject());
            this.primaryKeyControl = txtRoleName;
            this.dbAccess = oUserRoleDA;
            this.restrainColumnConstraint = false;
            //this.prefSize = 360;
            setUserRoleDetailCanCreate();
            setUserRoleDetailCanUpdate();
            setUserRoleDetailCanRead();
            setUserRoleDetailCanDelete();
            setUserRoleDetailCanPrint();

            final Callback<TableColumn<UserRoleDetailDA, Boolean>, TableCell<UserRoleDetailDA, Boolean>> createFactory = CheckBoxTableCell.forTableColumn(tbcUserRoleDetailCanCreate);
            final Callback<TableColumn<UserRoleDetailDA, Boolean>, TableCell<UserRoleDetailDA, Boolean>> readFactory = CheckBoxTableCell.forTableColumn(tbcUserRoleDetailCanRead);
            final Callback<TableColumn<UserRoleDetailDA, Boolean>, TableCell<UserRoleDetailDA, Boolean>> updateFactory = CheckBoxTableCell.forTableColumn(tbcUserRoleDetailCanUpdate);
            final Callback<TableColumn<UserRoleDetailDA, Boolean>, TableCell<UserRoleDetailDA, Boolean>> deleteFactory = CheckBoxTableCell.forTableColumn(tbcUserRoleDetailCanDelete);
            final Callback<TableColumn<UserRoleDetailDA, Boolean>, TableCell<UserRoleDetailDA, Boolean>> printFactory = CheckBoxTableCell.forTableColumn(tbcUserRoleDetailCanPrint);

            tbcUserRoleDetailCanCreate.setCellValueFactory((TableColumn.CellDataFeatures<UserRoleDetailDA, Boolean> param) -> {
                UserRoleDetailDA UserRoleDetailDA = param.getValue();
                UserRoleDetailDA.getCanCreate().addListener((ObservableValue<? extends Boolean> observable, Boolean oldValue, Boolean newValue) -> {
                    UserRoleDetailDA.setCanCreate(newValue);
                });
                return UserRoleDetailDA.getCanCreate();
            });

            tbcUserRoleDetailCanRead.setCellValueFactory((TableColumn.CellDataFeatures<UserRoleDetailDA, Boolean> param) -> {
                UserRoleDetailDA UserRoleDetailDA = param.getValue();
                UserRoleDetailDA.getCanRead().addListener((ObservableValue<? extends Boolean> observable, Boolean oldValue, Boolean newValue) -> {
                    UserRoleDetailDA.setCanRead(newValue);
                });
                return UserRoleDetailDA.getCanRead();
            });

            tbcUserRoleDetailCanUpdate.setCellValueFactory((TableColumn.CellDataFeatures<UserRoleDetailDA, Boolean> param) -> {
                UserRoleDetailDA UserRoleDetailDA = param.getValue();
                UserRoleDetailDA.getCanUpdate().addListener((ObservableValue<? extends Boolean> observable, Boolean oldValue, Boolean newValue) -> {
                    UserRoleDetailDA.setCanUpdate(newValue);
                });
                return UserRoleDetailDA.getCanUpdate();
            });

            tbcUserRoleDetailCanDelete.setCellValueFactory((TableColumn.CellDataFeatures<UserRoleDetailDA, Boolean> param) -> {
                UserRoleDetailDA UserRoleDetailDA = param.getValue();
                UserRoleDetailDA.getCanDelete().addListener((ObservableValue<? extends Boolean> observable, Boolean oldValue, Boolean newValue) -> {
                    UserRoleDetailDA.setCanDelete(newValue);
                });
                return UserRoleDetailDA.getCanDelete();
            });

            tbcUserRoleDetailCanPrint.setCellValueFactory((TableColumn.CellDataFeatures<UserRoleDetailDA, Boolean> param) -> {
                UserRoleDetailDA UserRoleDetailDA = param.getValue();
                UserRoleDetailDA.getCanPrint().addListener((ObservableValue<? extends Boolean> observable, Boolean oldValue, Boolean newValue) -> {
                    UserRoleDetailDA.setCanPrint(newValue);
                });
                return UserRoleDetailDA.getCanPrint();
            });

            tbcUserRoleDetailCanCreate.setCellFactory(createFactory);
            tbcUserRoleDetailCanRead.setCellFactory(readFactory);
            tbcUserRoleDetailCanUpdate.setCellFactory(updateFactory);
            tbcUserRoleDetailCanDelete.setCellFactory(deleteFactory);
            tbcUserRoleDetailCanPrint.setCellFactory(printFactory);
        } catch (Exception e) {
            errorMessage(e);
        } finally {
        }
    }

    @Override
    protected void save() {
        try {
            this.editSuccessful = false;
            String roleName = getText(txtRoleName, "Role Name");
            String description = getText(txaDescription, "Description");
            List<UserRoleDetailDA> userRoleDetailsDAs = tblUserRoleDetails.getItems();
            userRoleDetailsDAs.removeIf((p) -> p.getAccessObject() == null);
            UserRoleDA userRoleDA = new UserRoleDA(roleName, description);
             userRoleDetailsDAs.forEach(ur->{
                 ur.setUserRole(userRoleDA.getUserRole());
             })
                     ;
            userRoleDA.setUserRoleDetailsDAs(userRoleDetailsDAs);
            String buttonText = btnSave.getText();
            if (buttonText.equalsIgnoreCase(FormMode.Save.name())) {
                userRoleDA.save();
                message("Saved Successfully");
                clear();
            } else if (buttonText.equalsIgnoreCase(FormMode.Update.name())) {
                userRoleDA.update();
                message("Updated Successfully");
            }
            this.dbAccess = userRoleDA;
            this.editSuccessful = true;
        } catch (Exception e) {
            errorMessage(e);
        } finally {
        }
    }

    @Override
    protected void delete() {
        try {
            String roleName = getText(txtRoleName, "Role Name");
            UserRoleDA userRoleDA = oUserRoleDA.get(roleName);
            if (!warningOk("Confirm Delete", "You are about to delete a record with ID: " + roleName + " Are you sure you want to continue?", "Remember this action cannot be un done")) {
                return;
            }
            if (userRoleDA.delete()) {
                message("Deleted Successfully");
                this.clear();
            }
        } catch (Exception e) {
            errorMessage(e);
        }
    }

    @Override
    public void loadData() {
        try {
            String roleName = getText(txtRoleName, "Role Name");

            UserRoleDA userRoleDA = oUserRoleDA.get(roleName);
            txtRoleName.setText(userRoleDA.getRoleName());
            txaDescription.setText(userRoleDA.getDescription());
            tblUserRoleDetails.setItems(FXCollections.observableArrayList(userRoleDA.getUserRoleDetailsDAs()));
            addRow(tblUserRoleDetails, new UserRoleDetailDA());

        } catch (Exception e) {
            errorMessage(e);
        }

    }

    private void setUserRoleDetailCanCreate() {
        tbcUserRoleDetailCanCreate.setCellFactory(EditCell.BooleanTableColumn());
        tbcUserRoleDetailCanCreate.setOnEditCommit(event -> {
            final boolean value = event.getNewValue() != null ? event.getNewValue()
                    : event.getOldValue();
            ((UserRoleDetailDA) event.getTableView().getItems()
                    .get(event.getTablePosition().getRow()))
                    .setCanCreate(value);
            tblUserRoleDetails.refresh();
            addRow(tblUserRoleDetails, new UserRoleDetailDA());
        });
    }

    private void setUserRoleDetailCanUpdate() {
        tbcUserRoleDetailCanUpdate.setCellFactory(EditCell.BooleanTableColumn());
        tbcUserRoleDetailCanUpdate.setOnEditCommit(event -> {
            final boolean value = event.getNewValue() != null ? event.getNewValue()
                    : event.getOldValue();
            ((UserRoleDetailDA) event.getTableView().getItems()
                    .get(event.getTablePosition().getRow()))
                    .setCanUpdate(value);
            tblUserRoleDetails.refresh();
            addRow(tblUserRoleDetails, new UserRoleDetailDA());
        });
    }

    private void setUserRoleDetailCanRead() {
        tbcUserRoleDetailCanRead.setCellFactory(EditCell.BooleanTableColumn());
        tbcUserRoleDetailCanRead.setOnEditCommit(event -> {
            final boolean value = event.getNewValue() != null ? event.getNewValue()
                    : event.getOldValue();
            ((UserRoleDetailDA) event.getTableView().getItems()
                    .get(event.getTablePosition().getRow()))
                    .setCanRead(value);
            tblUserRoleDetails.refresh();
            addRow(tblUserRoleDetails, new UserRoleDetailDA());
        });
    }

    private void setUserRoleDetailCanDelete() {
        tbcUserRoleDetailCanDelete.setCellFactory(EditCell.BooleanTableColumn());
        tbcUserRoleDetailCanDelete.setOnEditCommit(event -> {
            final boolean value = event.getNewValue() != null ? event.getNewValue()
                    : event.getOldValue();
            ((UserRoleDetailDA) event.getTableView().getItems()
                    .get(event.getTablePosition().getRow()))
                    .setCanDelete(value);
            tblUserRoleDetails.refresh();
            addRow(tblUserRoleDetails, new UserRoleDetailDA());
        });
    }

    private void setUserRoleDetailCanPrint() {
        tbcUserRoleDetailCanPrint.setCellFactory(EditCell.BooleanTableColumn());
        tbcUserRoleDetailCanPrint.setOnEditCommit(event -> {
            final boolean value = event.getNewValue() != null ? event.getNewValue()
                    : event.getOldValue();
            ((UserRoleDetailDA) event.getTableView().getItems()
                    .get(event.getTablePosition().getRow()))
                    .setCanPrint(value);
            tblUserRoleDetails.refresh();
            addRow(tblUserRoleDetails, new UserRoleDetailDA());
        });
    }

    private void loadAccessObject() {
        try {
            String roleName = getText(txtRoleName, "Role Name");
            UserRole userRole = oUserRoleDA.getUserRole(roleName);
            userRole= userRole==null?new UserRole(roleName, txaDescription.getText()):userRole;
            ObservableList<UserRoleDetailDA> selectedItems = tblUserRoleDetails.getSelectionModel().getSelectedItems();
            if (selectedItems.isEmpty() || selectedItems.size() > 1) {
                return;
            }

            List<AccessObject> tableAccessObjects = tblUserRoleDetails.getItems()
                    .stream()
                    .map(UserRoleDetailDA::getAccessObject)
                    .collect(Collectors.toList());
            List<AccessObject> allAccessObjects = new AccessObjectDA().getAccessObjects();
            allAccessObjects.removeAll(tableAccessObjects);
            List<AccessObjectDA> accessObjectDAs = AccessObjectDA.getAccessObjectDAs(allAccessObjects);
            AccessObjectDA accessObjectDA = (AccessObjectDA) getSelectedItem(CommonNavigate.MAIN_CLASS, new AccessObjectDA(), accessObjectDAs, "View", "User Role Details", 700, 450, tblUserRoleDetails, true);

            if (accessObjectDA == null) {
                return;
            }

//            if (tblUserRoleDetails.getItems().stream().map(UserRoleDetailDA::getAccessObjectDA).collect(Collectors.toList()).contains(accessObjectDA)) {
//                throw new Exception("The record with id: " + accessObjectDA.getId() + " is already selected");
//            }
            UserRoleDetailDA userRoleDetailDA = tblUserRoleDetails.getSelectionModel().getSelectedItem();
            userRoleDetailDA.setUserRole(userRole);
            userRoleDetailDA.setAccessObject(accessObjectDA.getAccessObject());
            final TablePosition<UserRoleDetailDA, String> focusedCell = tblUserRoleDetails
                    .focusModelProperty().get().focusedCellProperty().get();
            tblUserRoleDetails.getItems().set(focusedCell.getRow(), userRoleDetailDA);
            tblUserRoleDetails.refresh();
            addRow(tblUserRoleDetails, new UserRoleDetailDA());
        } catch (Exception e) {
            errorMessage(e);
        }
    }

    @Override
    protected void clear() {
        super.clear();
        addRow(tblUserRoleDetails, new UserRoleDetailDA());

    }

}
