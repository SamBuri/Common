/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.common.controllers;

import java.net.URL;
import java.util.ResourceBundle;
import javafx.fxml.FXML;
import static com.saburi.common.utils.FXUIUtils.*;
import com.saburi.common.utils.Utilities.FormMode;
import static com.saburi.common.utils.FXUIUtils.warningOk;
import com.saburi.common.dbaccess.VATPostingGroupDA;
import javafx.scene.control.TextField;
import javafx.scene.control.ComboBox;
import javafx.scene.control.MenuItem;
import com.saburi.common.entities.LookupData;
import com.saburi.common.utils.CommonObjectNames;
import static com.saburi.common.utils.Utilities.formatNumber;
import com.saburi.common.dbaccess.ChartAccountDA;
import com.saburi.common.entities.ChartAccount;
import com.saburi.common.utils.CommonEnums.AccountTypes;
import com.saburi.common.utils.CommonNavigate;

public class VATPostingGroupController extends EditController {

    private final VATPostingGroupDA oVATPostingGroupDA = new VATPostingGroupDA();
    @FXML
    private TextField txtVATPostingGroupID;
    @FXML
    private ComboBox cboVATBusinessGroup;
    @FXML
    private MenuItem cmiSelectVATBusinessGroup;
    @FXML
    private ComboBox cboVATItemGroup;
    @FXML
    private MenuItem cmiSelectVATItemGroup;
    @FXML
    private TextField txtVATPercent;
    @FXML
    private ComboBox cboVATSalesAccount;
    @FXML
    private MenuItem cmiSelectVATSalesAccount;
    @FXML
    private ComboBox cboVATPurchaseAccount;
    @FXML
    private MenuItem cmiSelectVATPurchaseAccount;
    private final ChartAccountDA oChartAccountDA = new ChartAccountDA();

    @Override
    public void initialize(URL url, ResourceBundle rb) {
        try {
            loadLookupData(cboVATBusinessGroup, CommonObjectNames.VATBUSINESSGROUP);
            loadLookupData(cboVATItemGroup, CommonObjectNames.VATITEMGROUP);
            loadDBEntities(oChartAccountDA.getChartAccounts(AccountTypes.Liability), cboVATSalesAccount);
            loadDBEntities(oChartAccountDA.getChartAccounts(AccountTypes.Asset), cboVATPurchaseAccount);

            validateNumber(txtVATPercent);
            formatValue(txtVATPercent);
            this.primaryKeyControl = txtVATPostingGroupID;
            this.dbAccess = oVATPostingGroupDA;
            this.restrainColumnConstraint = false;
            this.minSize = 360;
            this.setNextVATPostingGroupID();
            selectLookupData(CommonNavigate.mainClass, cmiSelectVATBusinessGroup, CommonObjectNames.VATBUSINESSGROUP, "ChartAccount", "VAT Business Group", 700, 400, cboVATBusinessGroup, false);
            selectLookupData(CommonNavigate.mainClass, cmiSelectVATItemGroup, CommonObjectNames.VATITEMGROUP, "ChartAccount", "VAT Item Group", 700, 400, cboVATItemGroup, false);
            selectItem(CommonNavigate.mainClass, cmiSelectVATSalesAccount, oChartAccountDA, oChartAccountDA.getChartAccountDAs(AccountTypes.Liability), "ChartAccount", "VAT Sales Account", 700, 400, cboVATSalesAccount, true);
            selectItem(CommonNavigate.mainClass, cmiSelectVATPurchaseAccount, oChartAccountDA, oChartAccountDA.getChartAccountDAs(AccountTypes.Asset), "ChartAccount", "VAT Purchase Account", 700, 400, cboVATPurchaseAccount, true);
        } catch (Exception e) {
            errorMessage(e);
        } finally {
        }
    }

    @Override
    protected void save() {
        try {
            this.editSuccessful =false;
            String vATPostingGroupID = getText(txtVATPostingGroupID, "VAT Posting Group ID");
            LookupData vATBusinessGroup = (LookupData) getEntity(cboVATBusinessGroup, "VAT Business Group");
            LookupData vATItemGroup = (LookupData) getEntity(cboVATItemGroup, "VAT Item Group");
            float vATPercent = getFloat(txtVATPercent, "VAT Percent");
            ChartAccount vATSalesAccount = (ChartAccount) getEntity(cboVATSalesAccount, "VAT Sales Account");
            ChartAccount vATPurchaseAccount = (ChartAccount) getEntity(cboVATPurchaseAccount, "VAT Purchase Account");

            VATPostingGroupDA vATPostingGroupDA = new VATPostingGroupDA(vATPostingGroupID, vATBusinessGroup, vATItemGroup, vATPercent, vATSalesAccount, vATPurchaseAccount);
            String buttonText = btnSave.getText();
            if (buttonText.equalsIgnoreCase(FormMode.Save.name())) {
                vATPostingGroupDA.save();
                message("Saved Successfully");
                clear();
            } else if (buttonText.equalsIgnoreCase(FormMode.Update.name())) {
                vATPostingGroupDA.update();
                message("Updated Successfully");
            }
            this.dbAccess = vATPostingGroupDA;
            this.editSuccessful = true;
        } catch (Exception e) {
            errorMessage(e);
        } finally {
        }
    }

    @Override
    protected void delete() {
        try {
            String vATPostingGroupID = getText(txtVATPostingGroupID, "VAT Posting Group ID");
            VATPostingGroupDA vATPostingGroupDA = oVATPostingGroupDA.get(vATPostingGroupID);
            if (!warningOk("Confirm Delete", "You are about to delete a record with ID: " + vATPostingGroupID + " Are you sure you want to continue?", "Remember this action cannot be un done")) {
                return;
            }
            if (vATPostingGroupDA.delete()) {
                message("Deleted Successfully");
                this.clear();
            }
        } catch (Exception e) {
            errorMessage(e);
        }
    }

    @Override
    public void loadData() {
        try {
            String vATPostingGroupID = getText(txtVATPostingGroupID, "VAT Posting Group ID");

            VATPostingGroupDA vATPostingGroupDA = oVATPostingGroupDA.get(vATPostingGroupID);
            txtVATPostingGroupID.setText(vATPostingGroupDA.getVATPostingGroupID());
            cboVATBusinessGroup.setValue(vATPostingGroupDA.getVATBusinessGroup());
            cboVATItemGroup.setValue(vATPostingGroupDA.getVATItemGroup());
            txtVATPercent.setText(formatNumber(vATPostingGroupDA.getVATPercent()));
            cboVATSalesAccount.setValue(vATPostingGroupDA.getVATSalesAccount());
            cboVATPurchaseAccount.setValue(vATPostingGroupDA.getVATPurchaseAccount());

        } catch (Exception e) {
            errorMessage(e);
        }

    }

    private void setNextVATPostingGroupID() {
        try {
            if (btnSave.getText().equalsIgnoreCase(FormMode.Save.name())) {
                txtVATPostingGroupID.setText(oVATPostingGroupDA.getNextVATPostingGroupID(oVATPostingGroupDA.getNextIdHelper()));
            }
        } catch (Exception e) {
            errorMessage(e);
        }
    }

    private void clear() {
        txtVATPostingGroupID.clear();
        cboVATBusinessGroup.setValue(null);
        cboVATItemGroup.setValue(null);
        txtVATPercent.clear();
        cboVATSalesAccount.setValue(null);
        cboVATPurchaseAccount.setValue(null);
        this.setNextVATPostingGroupID();

    }

}
