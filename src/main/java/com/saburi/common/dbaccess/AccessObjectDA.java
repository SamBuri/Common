/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.common.dbaccess;

import com.saburi.common.entities.AccessObject;
import javafx.beans.property.*;
import java.util.ArrayList;
import com.saburi.common.entities.AppRevisionEntity;
import java.util.List;
import com.saburi.common.utils.SearchColumn;
import com.saburi.common.utils.SearchColumn.SearchDataTypes;
import org.hibernate.envers.RevisionType;
import com.saburi.common.utils.CommonEnums.ObjectTypes;

public class AccessObjectDA extends DBAccess {

    private AccessObject accessObject = new AccessObject();
    private final SimpleStringProperty objectName = new SimpleStringProperty(this, "objectName");
    private final SimpleStringProperty caption = new SimpleStringProperty(this, "caption");
    private final SimpleObjectProperty objectType = new SimpleObjectProperty(this, "objectType");

    public AccessObjectDA() {
        createSearchColumns();
    }

    public AccessObjectDA(String persistenceUnit) {
        super(persistenceUnit);
    }

    public AccessObjectDA(AccessObject accessObject) {
        this.accessObject = accessObject;
        initialseProprties();
        createSearchColumns();
    }

    public AccessObjectDA(String persistenceUnit, AccessObject accessObject) {
        super(persistenceUnit);
        this.accessObject = accessObject;
        initialseProprties();
        createSearchColumns();
    }

    public AccessObjectDA(String objectName, String caption, ObjectTypes objectType) {
        this.accessObject = new AccessObject(objectName, caption, objectType);
        initialseProprties();
        createSearchColumns();
    }

    public AccessObjectDA(String persistenceUnit, String objectName, String caption, ObjectTypes objectType) {
        super(persistenceUnit);
        this.accessObject = new AccessObject(objectName, caption, objectType);
        initialseProprties();
        createSearchColumns();
    }

    public String getObjectName() {
        return objectName.get();
    }

    public void setObjectName(String objectName) {
        accessObject.setObjectName(objectName);
        this.objectName.set(objectName);
    }

    public String getCaption() {
        return caption.get();
    }

    public void setCaption(String caption) {
        accessObject.setCaption(caption);
        this.caption.set(caption);
    }

    public Object getObjectType() {
        return objectType.get();
    }

    public void setObjectType(ObjectTypes objectType) {
        accessObject.setObjectType(objectType);
        this.objectType.set(objectType);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof AccessObjectDA)) {
            return false;
        }

        AccessObjectDA accessObjectDA = (AccessObjectDA) o;

        if (accessObjectDA.getDBEntity() == null || this.getDBEntity() == null) {
            return false;
        }
        return this.getId().equals(accessObjectDA.getId());
    }

    @Override
    public int hashCode() {
        return accessObject.getId().hashCode();
    }

    private void initialseProprties() {
        this.dBEntity = accessObject;
        this.objectName.set(accessObject.getObjectName());
        this.caption.set(accessObject.getCaption());
        this.objectType.set(accessObject.getObjectType());
        initCommonProprties();
    }

    private void createSearchColumns() {
        this.searchColumns.add(new SearchColumn("objectName", "Object Name", this.objectName.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("caption", "Caption", this.caption.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("objectType", "Object Type", this.objectType.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal));
        this.searchColumns.addAll(this.getDefaultSearchColumns());
    }

    @Override
    public List<SearchColumn> getSearchColumns() {
        return this.searchColumns;
    }

    @Override
    public Object getId() {
        return this.accessObject.getId();
    }

    @Override
    public String getDisplayKey() {
        return this.accessObject.getDisplayKey();
    }

    public static List<AccessObjectDA> getAccessObjectDAs(List<AccessObject> accessObjects) {
        List<AccessObjectDA> list = new ArrayList<>();
        accessObjects.forEach((accessObject) -> {
            list.add(new AccessObjectDA(accessObject));
        });
        return list;
    }

    public static List<AccessObject> getAccessObjectList(List<AccessObjectDA> accessObjectDAs) {
        List<AccessObject> accessObjects = new ArrayList<>();
        accessObjectDAs.forEach(a -> accessObjects.add(a.accessObject));
        return accessObjects;
    }

    public boolean save() throws Exception {
        return super.persist(this.accessObject);

    }

    public boolean update() throws Exception {
        return super.merge(this.accessObject);

    }

    public boolean delete() {
        return super.remove(this.accessObject);

    }

    public AccessObject getAccessObject(String objectName) {
        return (AccessObject) super.find(AccessObject.class, objectName);
    }

    public AccessObject getAccessObject() {
        return this.accessObject;
    }

    public List<AccessObject> getAccessObjects() {
        return super.find(AccessObject.class);
    }

    @Override
    public List<DBAccess> get() {
        List<DBAccess> list = new ArrayList<>();
        selectQuery(AccessObject.class).forEach(o -> list.add(new AccessObjectDA((AccessObject) o)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public AccessObjectDA get(String objectName) throws Exception {
        AccessObject oAccessObject = getAccessObject(objectName);
        if (oAccessObject == null) {
            throw new Exception("No Record with id: " + objectName);
        }
        return new AccessObjectDA(oAccessObject);
    }

    public List<AccessObjectDA> get(String columName, Object value) {
        List<AccessObjectDA> list = new ArrayList<>();
        super.selectQuery(AccessObject.class, columName, value).forEach(da -> list.add(new AccessObjectDA((AccessObject) da)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public List<AccessObjectDA> toDaList(List<AccessObject> accessObjects) {
        List<AccessObjectDA> accessObjectDAs = new ArrayList<>();
        accessObjects.forEach(s -> accessObjectDAs.add(new AccessObjectDA(s)));
        return accessObjectDAs;
    }

    public List<DBAccess> toDBAccessList(List<AccessObject> accessObjects) {
        List<DBAccess> dbAccesses = new ArrayList<>();
        accessObjects.forEach(s -> dbAccesses.add(new AccessObjectDA(s)));
        return dbAccesses;
    }

    public int getMax(String columnName) {
        return super.getMax(AccessObject.class, columnName);
    }

    public int getMax(String columnName, String comparatorColumn, Object comparatorVaue) {
        return super.getMax(AccessObject.class, columnName, comparatorColumn, comparatorVaue);
    }

    public List<AccessObject> getAccessObjects(String columName, Object value) {
        return super.find(AccessObject.class, columName, value);
    }

    @Override
    public List<DBAccess> getRevisions() {
        try {

            List<Object[]> list = getEntityRevisions(AccessObject.class);
            List<DBAccess> dBAccesses = new ArrayList<>();
            list.forEach(e -> {

                AccessObjectDA accessObjectDA = new AccessObjectDA((AccessObject) e[0]);
                accessObjectDA.revisionEntity = (AppRevisionEntity) e[1];
                accessObjectDA.oRevisionType = (RevisionType) e[2];
                accessObjectDA.initRevProprties();
                accessObjectDA.searchColumns.addAll(accessObjectDA.getRevSearchColumns());
                dBAccesses.add(accessObjectDA);

            });

            return dBAccesses;
        } catch (Exception e) {
            throw e;
        } finally {
            if (entityManager == null) {
                entityManager.close();
            }
        }

    }

}
