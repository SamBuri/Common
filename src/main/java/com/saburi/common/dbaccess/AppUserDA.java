/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.common.dbaccess;

import com.saburi.common.entities.AppUser;
import javafx.beans.property.*;
import java.util.ArrayList;
import java.util.List;
import javafx.util.Pair;
import com.saburi.common.utils.SearchColumn;
import com.saburi.common.utils.SearchColumn.SearchDataTypes;
import com.saburi.common.utils.Utilities;
import com.saburi.common.entities.UserRole;
import java.time.LocalDateTime;
import com.saburi.common.utils.CurrentUser;
import java.util.Objects;

public class AppUserDA extends DBAccess {

    private AppUser appUser;
    private SimpleStringProperty loginID = new SimpleStringProperty(this, "loginID");
    private SimpleStringProperty firstName = new SimpleStringProperty(this, "firstName");
    private SimpleStringProperty lastName = new SimpleStringProperty(this, "lastName");
    private SimpleStringProperty staffNo = new SimpleStringProperty(this, "staffNo");
    private SimpleStringProperty password = new SimpleStringProperty(this, "password");
    private SimpleStringProperty roleDisplay = new SimpleStringProperty(this, "roleDisplay");
    private SimpleObjectProperty roleID = new SimpleObjectProperty(this, "roleID");
    private UserRole role;

    public AppUserDA() {

    }

    public AppUserDA(String persistenceUnit) {
        super(persistenceUnit);
    }

    public AppUserDA(AppUser appUser) {
        this.appUser = appUser;
        initialseProprties();
        createSearchColumns();
    }

    public AppUserDA(String persistenceUnit, AppUser appUser) {
        super(persistenceUnit);
        this.appUser = appUser;
        initialseProprties();
        createSearchColumns();
    }

    public AppUserDA(String loginID, String firstName, String lastName, String staffNo, String password, UserRole userRole) {
        this.appUser = new AppUser(loginID, firstName, lastName, staffNo, password, userRole);
        initialseProprties();
        createSearchColumns();
    }

    public AppUserDA(String persistenceUnit, String loginID, String firstName, String lastName, String staffNo, String password, String roleID) {
        super(persistenceUnit);
        this.appUser = new AppUser(loginID, firstName, lastName, staffNo, password, (UserRole) super.find(UserRole.class, roleID));
        initialseProprties();
        createSearchColumns();
    }

    public String getLoginID() {
        return loginID.get();
    }

    public void setLoginID(String loginID) {
        appUser.setLoginID(loginID);
        this.loginID.set(loginID);
    }

    public String getFirstName() {
        return firstName.get();
    }

    public void setFirstName(String firstName) {
        appUser.setFirstName(firstName);
        this.firstName.set(firstName);
    }

    public String getLastName() {
        return lastName.get();
    }

    public void setLastName(String lastName) {
        appUser.setLastName(lastName);
        this.lastName.set(lastName);
    }

    public String getStaffNo() {
        return staffNo.get();
    }

    public void setStaffNo(String staffNo) {
        appUser.setStaffNo(staffNo);
        this.staffNo.set(staffNo);
    }

    public String getPassword() {
        return password.get();
    }

    public void setPassword(String password) {
        appUser.setPassword(password);
        this.password.set(password);
    }

    public UserRole getRole() {
        return role;
    }

    public Object getRoleID() {
        return roleID.get();
    }

    public String getRoleDisplay() {
        return roleDisplay.get();
    }

    public UserRoleDA getRoleDA() {
        if (this.role == null) {
            return new UserRoleDA();
        } else {
            return new UserRoleDA(this.role);
        }
    }

    public Pair<String, Object> getRolePair() {
        if (this.getRoleDA() == null) {
            return new Pair<>("", "");
        } else {
            return this.getRoleDA().keyValuePair();
        }
    }

    public void setRole(UserRole role) {
        appUser.setRole(role);
        this.role = role;
    }

    private void initialseProprties() {
        this.dBEntity = appUser;
        this.loginID = new SimpleStringProperty(appUser.getLoginID());
        this.firstName = new SimpleStringProperty(appUser.getFirstName());
        this.lastName = new SimpleStringProperty(appUser.getLastName());
        this.staffNo = new SimpleStringProperty(appUser.getStaffNo());
        this.password = new SimpleStringProperty(appUser.getPassword());
        this.role = appUser.getRole();
        this.roleID = new SimpleObjectProperty(role.getId());
        this.roleDisplay = new SimpleStringProperty(role.getDisplayKey());
        this.userID = new SimpleStringProperty(appUser.getUserID());
        this.userFullName = new SimpleStringProperty(appUser.getUserFullName());
        this.clientMachine = new SimpleStringProperty(appUser.getClientMachine());
        this.recordDateTime = new SimpleObjectProperty(appUser.getRecordDateTime());
        this.recordDateTimeDisplay = new SimpleStringProperty(Utilities.formatDateTime(appUser.getRecordDateTime()));
        this.lastUpdateDateTime = new SimpleObjectProperty(appUser.getLastUpdateDateTime());
        this.lastUpdateDateTimeDisplay = new SimpleStringProperty(Utilities.formatDateTime(appUser.getLastUpdateDateTime()));
        initCommonProprties();
    }

    private void createSearchColumns() {
        this.searchColumns.add(new SearchColumn("loginID", "Login ID", this.loginID.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("firstName", "First Name", this.firstName.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("lastName", "Last Name", this.lastName.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("staffNo", "Staff No", this.staffNo.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("password", "Password", this.password.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("roleID", "Role ID", this.roleID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal));
        this.searchColumns.add(new SearchColumn("roleDisplay", "Role", this.roleDisplay.get(), SearchDataTypes.STRING));

    }

    @Override
    public List<SearchColumn> getSearchColumns() {
        return this.searchColumns;
    }

    @Override
    public Object getId() {
        return this.appUser.getId();
    }

    @Override
    public String getDisplayKey() {
        return this.appUser.getDisplayKey();
    }

    public Pair<String, Object> keyValuePair() {
        return new Pair(this.appUser.getDisplayKey(), this.appUser.getId());
    }

    public static List<AppUserDA> getAppUserDAs(List<AppUser> appUsers) {
        List<AppUserDA> list = new ArrayList<>();
        appUsers.forEach((appUser) -> {
            list.add(new AppUserDA(appUser));
        });
        return list;
    }

    public static List<AppUser> getAppUserList(List<AppUserDA> appUserDAs) {
        List<AppUser> appUsers = new ArrayList<>();
        appUserDAs.forEach(a -> appUsers.add(a.appUser));
        return appUsers;
    }

    public boolean save() throws Exception {
        return super.persist(this.appUser);

    }

    public boolean update() throws Exception {
        return super.merge(this.appUser);

    }

    public boolean delete() {
        return super.remove(this.appUser);

    }

    public AppUser getAppUser(String loginID) {
        return (AppUser) super.find(AppUser.class, loginID);
    }

    public List<AppUser> getAppUsers() {
        return super.find(AppUser.class);
    }

    public List<AppUserDA> get1() {
        List<AppUserDA> list = new ArrayList<>();
        List<AppUser> datas = super.find(AppUser.class);
        datas.forEach((data) -> {
            list.add(new AppUserDA(data));
        });
        return list;
    }

    public AppUserDA get(String loginID) throws Exception {
        AppUser oAppUser = (AppUser) super.find(AppUser.class, loginID);
        if (oAppUser == null) {
            throw new Exception("No Record with id: " + loginID);
        }
        return new AppUserDA(oAppUser);
    }

    public List<AppUserDA> get(String columName, Object value) {
        List<AppUser> data = super.find(AppUser.class, columName, value);
        List<AppUserDA> list = new ArrayList<>();
        data.forEach(da -> list.add(new AppUserDA(da)));
        return list;
    }

    public List<Pair<String, Object>> keyValuePairs() {
        List<Pair<String, Object>> pairs = new ArrayList<>();
        this.get().forEach((t) -> pairs.add(t.keyValuePair()));
        return pairs;
    }

    public List<Pair<String, Object>> keyValuePairs(String columName, Object value) {
        List<Pair<String, Object>> pairs = new ArrayList<>();
        this.get(columName, value).forEach((t) -> pairs.add(t.keyValuePair()));
        return pairs;
    }

    public int getMax(String columnName) {
        return super.getMax(AppUser.class, columnName);
    }

    public int getMax(String columnName, String comparatorColumn, Object comparatorVaue) {
        return super.getMax(AppUser.class, columnName, comparatorColumn, comparatorVaue);
    }

    public List<AppUser> getAppUsers(String columName, Object value) {
        return super.find(AppUser.class, columName, value);
    }

    public boolean login(String loginID, String password) throws Exception {
        try {
            AppUser aUser = getAppUser(loginID);
            if (aUser == null) {
                return false;
            } else {
                if (aUser.getPassword().equals(password)) {
                    CurrentUser.setAppUser(aUser);
                    CurrentUser.setLoginTime(LocalDateTime.now());
                    return true;
                } else {
                    throw new Exception("Invalid login username and password combination");
                }
            }
        } catch (Exception e) {
            throw e;
        }
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof AppUserDA)) {
            return false;
        }

        AppUserDA appUserDA = (AppUserDA) o;

        if (appUserDA.getDBEntity() == null || this.getDBEntity() == null) {
            return false;
        }
        return Objects.equals(this.getId(), appUserDA.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(appUser.getId());
    }

    public AppUser getAppUser() {
        return appUser;
    }

}
