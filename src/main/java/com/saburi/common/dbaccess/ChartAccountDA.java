/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.common.dbaccess;

import com.saburi.common.entities.ChartAccount;
import javafx.beans.property.*;
import java.util.ArrayList;
import java.util.List;
import javafx.util.Pair;
import com.saburi.common.utils.SearchColumn;
import com.saburi.common.utils.SearchColumn.SearchDataTypes;
import com.saburi.common.utils.CommonEnums.AccountTypes;
import com.saburi.common.entities.AccountCategory;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Join;
import javax.persistence.criteria.Root;
import com.saburi.common.utils.CommonEnums.AccountActions;
import com.saburi.common.utils.CommonEnums.AccountReports;
import com.saburi.common.utils.CurrentFinacialPeriod;
import static com.saburi.common.utils.Utilities.formatNumber;

public class ChartAccountDA extends DBAccess {

    private ChartAccount chartAccount;
    private SimpleIntegerProperty idHelper = new SimpleIntegerProperty(this, "idHelper");
    private SimpleObjectProperty accountType = new SimpleObjectProperty(this, "accountType");
    private SimpleStringProperty categoryDisplay = new SimpleStringProperty(this, "categoryDisplay");
    private SimpleObjectProperty categoryID = new SimpleObjectProperty(this, "categoryID");
    private AccountCategory category;
    private SimpleStringProperty accountID = new SimpleStringProperty(this, "accountID");
    private SimpleStringProperty accountName = new SimpleStringProperty(this, "accountName");
    private SimpleObjectProperty accountAction = new SimpleObjectProperty(this, "accountAction");
    private SimpleObjectProperty accountReport = new SimpleObjectProperty(this, "accountReport");
    private SimpleDoubleProperty openingBalance = new SimpleDoubleProperty(this, "openingBalance");
    private SimpleStringProperty openingBalanceDisplay = new SimpleStringProperty(this, "openingBalanceDisplay");
    private SimpleDoubleProperty closingBalance = new SimpleDoubleProperty(this, "closingBalance");
    private SimpleStringProperty closingBalanceDisplay = new SimpleStringProperty(this, "closingBalanceDisplay");
    private SimpleBooleanProperty contra = new SimpleBooleanProperty(this, "contra");
    private SimpleBooleanProperty readOnly = new SimpleBooleanProperty(this, "readOnly");
    private SimpleBooleanProperty controlAccount = new SimpleBooleanProperty(this, "controlAccount");
    private SimpleBooleanProperty hidden = new SimpleBooleanProperty(this, "hidden");

    public ChartAccountDA() {
        createSearchColumns();
    }

    public ChartAccountDA(String persistenceUnit) {
        super(persistenceUnit);
    }

    public ChartAccountDA(ChartAccount chartAccount) {
        this.chartAccount = chartAccount;
        initialseProprties();
        createSearchColumns();
    }

    public ChartAccountDA(String persistenceUnit, ChartAccount chartAccount) {
        super(persistenceUnit);
        this.chartAccount = chartAccount;
        initialseProprties();
        createSearchColumns();
    }

    public ChartAccountDA(AccountTypes accountType, AccountCategory category, String accountID, String accountName, AccountActions accountAction, AccountReports accountReport, double openingBalance, double closingBalance, boolean contra, boolean readOnly, boolean controlAccount, boolean hidden) {
        this.chartAccount = new ChartAccount(getNextIdHelper(category), category, accountID, accountName, accountAction, accountReport, openingBalance, closingBalance, contra, readOnly, controlAccount, hidden);
        initialseProprties();
        createSearchColumns();
    }

    public ChartAccountDA(String persistenceUnit, AccountTypes accountType, AccountCategory category, String accountID, String accountName, AccountActions accountAction, AccountReports accountReport, double openingBalance, double closingBalance, boolean contra, boolean readOnly, boolean controlAccount, boolean hidden) {
        super(persistenceUnit);
        this.chartAccount = new ChartAccount(getNextIdHelper(category), category, accountID, accountName, accountAction, accountReport, openingBalance, closingBalance, contra, readOnly, controlAccount, hidden);
        initialseProprties();
        createSearchColumns();
    }

    public int getIdHelper() {
        return idHelper.get();
    }

    public void setIdHelper(int idHelper) {
        chartAccount.setIdHelper(idHelper);
        this.idHelper.set(idHelper);
    }

    public Object getAccountType() {
        return accountType.get();
    }

    public void setAccountType(AccountTypes accountType) {
        chartAccount.getCategory().setAccountType(accountType);
        this.accountType.set(accountType);
    }

    public AccountCategory getCategory() {
        return category;
    }

    public Object getCategoryID() {
        return categoryID.get();
    }

    public String getCategoryDisplay() {
        return categoryDisplay.get();
    }

    public AccountCategoryDA getCategoryDA() {
        if (this.category == null) {
            return new AccountCategoryDA();
        } else {
            return new AccountCategoryDA(this.category);
        }
    }

    public Pair<String, Object> getCategoryPair() {
        if (this.getCategoryDA() == null) {
            return new Pair<>("", "");
        } else {
            return this.getCategoryDA().keyValuePair();
        }
    }

    public void setCategory(AccountCategory category) {
        chartAccount.setCategory(category);
        this.category = category;
    }

    public String getAccountID() {
        return accountID.get();
    }

    public void setAccountID(String accountID) {
        chartAccount.setAccountID(accountID);
        this.accountID.set(accountID);
    }

    public String getAccountName() {
        return accountName.get();
    }

    public void setAccountName(String accountName) {
        chartAccount.setAccountName(accountName);
        this.accountName.set(accountName);
    }

    public Object getAccountAction() {
        return accountAction.get();
    }

    public void setAccountAction(AccountActions accountAction) {
        chartAccount.setAccountAction(accountAction);
        this.accountAction.set(accountAction);
    }

    public Object getAccountReport() {
        return accountReport.get();
    }

    public void setAccountReport(AccountReports accountReport) {
        chartAccount.setAccountReport(accountReport);
        this.accountReport.set(accountReport);
    }

    public double getOpeningBalance() {
        return openingBalance.get();
    }

    public String getOpeningBalanceDisplay() {
        return openingBalanceDisplay.get();
    }

    public void setOpeningBalance(double openingBalance) {
        chartAccount.setOpeningBalance(openingBalance);
        this.openingBalance.set(openingBalance);
    }

    public double getClosingBalance() {
        return closingBalance.get();
    }

    public String getClosingBalanceDisplay() {
        return closingBalanceDisplay.get();
    }

    public void setClosingBalance(double closingBalance) {
        chartAccount.setClosingBalance(closingBalance);
        this.closingBalance.set(closingBalance);
    }

    public boolean isContra() {
        return contra.get();
    }

    public void setContra(boolean contra) {
        chartAccount.setContra(contra);
        this.contra.set(contra);
    }

    public boolean isReadOnly() {
        return readOnly.get();
    }

    public void setReadOnly(boolean readOnly) {
        chartAccount.setReadOnly(readOnly);
        this.readOnly.set(readOnly);
    }

    public boolean isControlAccount() {
        return controlAccount.get();
    }

    public void setControlAccount(boolean controlAccount) {
        chartAccount.setControlAccount(controlAccount);
        this.controlAccount.set(controlAccount);
    }

    public boolean isHidden() {
        return hidden.get();
    }

    public void setHidden(boolean hidden) {
        chartAccount.setHidden(hidden);
        this.hidden.set(hidden);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof ChartAccountDA)) {
            return false;
        }

        ChartAccountDA chartAccountDA = (ChartAccountDA) o;

        if (chartAccountDA.getDBEntity() == null || this.getDBEntity() == null) {
            return false;
        }
        return this.getId().equals(chartAccountDA.getId());
    }

    @Override
    public int hashCode() {
        return chartAccount.getId().hashCode();
    }

    private void initialseProprties() {
        this.dBEntity = chartAccount;
        this.idHelper = new SimpleIntegerProperty(chartAccount.getIdHelper());
        this.accountType = new SimpleObjectProperty(chartAccount.getCategory().getAccountType());
        this.category = chartAccount.getCategory();
        if (this.category != null) {
            this.categoryID = new SimpleObjectProperty(category.getId());
            this.categoryDisplay = new SimpleStringProperty(category.getDisplayKey());
        }
        this.accountID = new SimpleStringProperty(chartAccount.getAccountID());
        this.accountName = new SimpleStringProperty(chartAccount.getAccountName());
        this.accountAction = new SimpleObjectProperty(chartAccount.getAccountAction());
        this.accountReport = new SimpleObjectProperty(chartAccount.getAccountReport());
        this.openingBalance = new SimpleDoubleProperty(chartAccount.getOpeningBalance());
        this.openingBalanceDisplay = new SimpleStringProperty(formatNumber(chartAccount.getOpeningBalance()));
        this.closingBalance = new SimpleDoubleProperty(chartAccount.getClosingBalance());
        this.closingBalanceDisplay = new SimpleStringProperty(formatNumber(chartAccount.getClosingBalance()));
        this.contra = new SimpleBooleanProperty(chartAccount.isContra());
        this.readOnly = new SimpleBooleanProperty(chartAccount.isReadOnly());
        this.controlAccount = new SimpleBooleanProperty(chartAccount.isControlAccount());
        this.hidden = new SimpleBooleanProperty(chartAccount.isHidden());
        initCommonProprties();
    }

    private void createSearchColumns() {
        this.searchColumns.add(new SearchColumn("accountType", "Account Type", this.accountType.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal));
        this.searchColumns.add(new SearchColumn("categoryID", "Category ID", this.categoryID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("categoryDisplay", "Category", this.categoryDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("accountID", "Account ID", this.accountID.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("accountName", "Account Name", this.accountName.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("accountAction", "Account Action", this.accountAction.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal));
        this.searchColumns.add(new SearchColumn("accountReport", "Account Report", this.accountReport.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal));
        this.searchColumns.add(new SearchColumn("openingBalance", "Opening Balance", this.openingBalance.get(), SearchDataTypes.NUMBER));
        this.searchColumns.add(new SearchColumn("closingBalance", "Closing Balance", this.closingBalance.get(), SearchDataTypes.NUMBER));
        this.searchColumns.add(new SearchColumn("contra", "Contra", this.contra.get(), SearchDataTypes.BOOLEAN));
        this.searchColumns.add(new SearchColumn("readOnly", "Read Only", this.readOnly.get(), SearchDataTypes.BOOLEAN));
        this.searchColumns.add(new SearchColumn("controlAccount", "Control Account", this.controlAccount.get(), SearchDataTypes.BOOLEAN));
        this.searchColumns.add(new SearchColumn("hidden", "Hidden", this.hidden.get(), SearchDataTypes.BOOLEAN));
        this.searchColumns.addAll(this.getDefaultSearchColumns());
    }

    @Override
    public List<SearchColumn> getSearchColumns() {
        return this.searchColumns;
    }

    @Override
    public Object getId() {
        return this.chartAccount.getId();
    }

    @Override
    public String getDisplayKey() {
        return this.chartAccount.getDisplayKey();
    }

    public static List<ChartAccountDA> getChartAccountDAs(List<ChartAccount> chartAccounts) {
        List<ChartAccountDA> list = new ArrayList<>();
        chartAccounts.forEach((chartAccount) -> {
            list.add(new ChartAccountDA(chartAccount));
        });
        return list;
    }

    public static List<ChartAccount> getChartAccountList(List<ChartAccountDA> chartAccountDAs) {
        List<ChartAccount> chartAccounts = new ArrayList<>();
        chartAccountDAs.forEach(a -> chartAccounts.add(a.chartAccount));
        return chartAccounts;
    }

    public boolean save() throws Exception {
        return super.persist(this.chartAccount);

    }

    public boolean update() throws Exception {
        return super.merge(this.chartAccount);

    }

    public boolean delete() {
        return super.remove(this.chartAccount);

    }

    public ChartAccount getChartAccount(String accountID) {
        return (ChartAccount) super.find(ChartAccount.class, accountID);
    }

    public List<ChartAccount> getChartAccounts() {
        return super.find(ChartAccount.class);
    }

    @Override
    public List<DBAccess> get() {
        List<DBAccess> list = new ArrayList<>();
        List<ChartAccount> datas = super.find(ChartAccount.class);
        datas.forEach((data) -> {
            list.add(new ChartAccountDA(data));
        });
        return list;
    }

    public ChartAccountDA get(String accountID) throws Exception {
        ChartAccount oChartAccount = getChartAccount(accountID);
        if (oChartAccount == null) {
            throw new Exception("No Record with id: " + accountID);
        }
        return new ChartAccountDA(oChartAccount);
    }

    public List<ChartAccountDA> get(String columName, Object value) {
        List<ChartAccount> data = super.find(ChartAccount.class, columName, value);
        List<ChartAccountDA> list = new ArrayList<>();
        data.forEach(da -> list.add(new ChartAccountDA(da)));
        return list;
    }

    public List<Pair<String, Object>> keyValuePairs() {
        List<Pair<String, Object>> pairs = new ArrayList<>();
        this.get().forEach((t) -> pairs.add(t.keyValuePair()));
        return pairs;
    }

    public List<Pair<String, Object>> keyValuePairs(String columName, Object value) {
        List<Pair<String, Object>> pairs = new ArrayList<>();
        this.get(columName, value).forEach((t) -> pairs.add(t.keyValuePair()));
        return pairs;
    }

    public List<ChartAccountDA> toDaList(List<ChartAccount> chartAccounts) {
        List<ChartAccountDA> chartAccountDAs = new ArrayList<>();
        chartAccounts.forEach(s -> chartAccountDAs.add(new ChartAccountDA(s)));
        return chartAccountDAs;
    }

    public List<DBAccess> toDBAccessList(List<ChartAccount> chartAccounts) {
        List<DBAccess> dbAccesses = new ArrayList<>();
        chartAccounts.forEach(s -> dbAccesses.add(new ChartAccountDA(s)));
        return dbAccesses;
    }

    public int getMax(String columnName) {
        return super.getMax(ChartAccount.class, columnName);
    }

    public int getMax(String columnName, String comparatorColumn, Object comparatorVaue) {
        return super.getMax(ChartAccount.class, columnName, comparatorColumn, comparatorVaue);
    }

    public final int getNextIdHelper(AccountCategory category) {
        return this.getMax("idHelper", "category", category) + 1;
    }

    public String getNextAccountID(int idHelper, String category) {
        return new IDGeneratorDA().getToAppendString(ChartAccount.class.getSimpleName(), category, idHelper);
    }

    public List<ChartAccount> getChartAccounts(String columName, Object value) {
        return super.find(ChartAccount.class, columName, value);
    }

    public List<ChartAccount> getChartAccountsByAccountCategoryDA(AccountCategoryDA accountCategoryDA) {
        return this.getChartAccounts("accountCategory", accountCategoryDA != null ? accountCategoryDA.dBEntity : null);
    }

    public double getCurrentBalance() {
        if (CurrentFinacialPeriod.getFinancialPeriodDA() == null) {
            return 0;
        } else {
            return new GeneralLedgerDA().getAccountBalance(chartAccount, CurrentFinacialPeriod.getFinancialPeriodDA().getFinancialPeriod().getCompany());
        }
    }

    public List<ChartAccount> getChartAccounts(AccountTypes accountType) {

        try {
            entityManager = entityManagerFactory.createEntityManager();
            CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
            CriteriaQuery<ChartAccount> criteriaQuery = criteriaBuilder.createQuery(ChartAccount.class);
            Root<ChartAccount> root = criteriaQuery.from(ChartAccount.class);
            Join<ChartAccount, AccountCategory> join = root.join("category");
            criteriaQuery.where(criteriaBuilder.equal(join.get("accountType"), accountType));
            criteriaQuery.orderBy(criteriaBuilder.desc(root.get("accountName")));

            return entityManager.createQuery(criteriaQuery).getResultList();
        } catch (Exception e) {
            throw e;
        } finally {
            entityManager.close();
        }

    }

    public List<ChartAccountDA> getChartAccountDAs(AccountTypes accountType) {
        return toDaList(this.getChartAccounts(accountType));
    }

}
