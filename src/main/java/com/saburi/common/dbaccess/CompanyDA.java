/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.common.dbaccess;

import com.saburi.common.entities.Company;
import javafx.beans.property.*;
import java.util.ArrayList;
import java.util.List;
import javafx.util.Pair;
import com.saburi.common.utils.SearchColumn;
import com.saburi.common.utils.SearchColumn.SearchDataTypes;
import com.saburi.common.utils.CommonEnums.BusinessTypes;
import javafx.scene.image.ImageView;
import com.saburi.common.utils.FXUIUtils;

public class CompanyDA extends DBAccess {

    private Company company;
    private SimpleIntegerProperty iDHelper = new SimpleIntegerProperty(this, "iDHelper");
    private SimpleStringProperty companyID = new SimpleStringProperty(this, "companyID");
    private SimpleStringProperty companyName = new SimpleStringProperty(this, "companyName");
    private SimpleObjectProperty businessType = new SimpleObjectProperty(this, "businessType");
    private SimpleStringProperty physicalAddress = new SimpleStringProperty(this, "physicalAddress");
    private SimpleStringProperty phone = new SimpleStringProperty(this, "phone");
    private SimpleStringProperty email = new SimpleStringProperty(this, "email");
    private SimpleStringProperty webSite = new SimpleStringProperty(this, "webSite");
    private SimpleStringProperty tagLine = new SimpleStringProperty(this, "tagLine");
    private byte[] logo;
    private ImageView imvLogo = new ImageView();

    public CompanyDA() {
        createSearchColumns();
    }

    public CompanyDA(String persistenceUnit) {
        super(persistenceUnit);
    }

    public CompanyDA(Company company) {
        this.company = company;
        initialseProprties();
        createSearchColumns();
    }

    public CompanyDA(String persistenceUnit, Company company) {
        super(persistenceUnit);
        this.company = company;
        initialseProprties();
        createSearchColumns();
    }

    public CompanyDA(String companyID, String companyName, BusinessTypes businessType, String physicalAddress, String phone, String email, String webSite, String tagLine, byte[] logo) {
        this.company = new Company(getNextIDHelper(), companyID, companyName, businessType, physicalAddress, phone, email, webSite, tagLine, logo);
        initialseProprties();
        createSearchColumns();
    }

    public CompanyDA(String persistenceUnit, String companyID, String companyName, BusinessTypes businessType, String physicalAddress, String phone, String email, String webSite, String tagLine, byte[] logo) {
        super(persistenceUnit);
        this.company = new Company(getNextIDHelper(), companyID, companyName, businessType, physicalAddress, phone, email, webSite, tagLine, logo);
        initialseProprties();
        createSearchColumns();
    }

    public int getIDHelper() {
        return iDHelper.get();
    }

    public void setIDHelper(int iDHelper) {
        company.setIDHelper(iDHelper);
        this.iDHelper.set(iDHelper);
    }

    public String getCompanyID() {
        return companyID.get();
    }

    public void setCompanyID(String companyID) {
        company.setCompanyID(companyID);
        this.companyID.set(companyID);
    }

    public String getCompanyName() {
        return companyName.get();
    }

    public void setCompanyName(String companyName) {
        company.setCompanyName(companyName);
        this.companyName.set(companyName);
    }

    public Object getBusinessType() {
        return businessType.get();
    }

    public void setBusinessType(BusinessTypes businessType) {
        company.setBusinessType(businessType);
        this.businessType.set(businessType);
    }

    public String getPhysicalAddress() {
        return physicalAddress.get();
    }

    public void setPhysicalAddress(String physicalAddress) {
        company.setPhysicalAddress(physicalAddress);
        this.physicalAddress.set(physicalAddress);
    }

    public String getPhone() {
        return phone.get();
    }

    public void setPhone(String phone) {
        company.setPhone(phone);
        this.phone.set(phone);
    }

    public String getEmail() {
        return email.get();
    }

    public void setEmail(String email) {
        company.setEmail(email);
        this.email.set(email);
    }

    public String getWebSite() {
        return webSite.get();
    }

    public void setWebSite(String webSite) {
        company.setWebSite(webSite);
        this.webSite.set(webSite);
    }

    public String getTagLine() {
        return tagLine.get();
    }

    public void setTagLine(String tagLine) {
        company.setTagLine(tagLine);
        this.tagLine.set(tagLine);
    }

    public byte[] getLogo() {
        return logo;
    }

    public ImageView getImvLogo() {
        return imvLogo;
    }

    public void setLogo(byte[] logo) {
        company.setLogo(logo);
        this.logo = logo;
    }

    public void setImvLogo(ImageView imvLogo) {
        this.imvLogo = imvLogo;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof CompanyDA)) {
            return false;
        }

        CompanyDA companyDA = (CompanyDA) o;

        if (companyDA.getDBEntity() == null || this.getDBEntity() == null) {
            return false;
        }
        return this.getId().equals(companyDA.getId());
    }

    @Override
    public int hashCode() {
        return company.getId().hashCode();
    }

    private void initialseProprties() {
        this.dBEntity = company;
        this.iDHelper = new SimpleIntegerProperty(company.getIDHelper());
        this.companyID = new SimpleStringProperty(company.getCompanyID());
        this.companyName = new SimpleStringProperty(company.getCompanyName());
        this.businessType = new SimpleObjectProperty(company.getBusinessType());
        this.physicalAddress = new SimpleStringProperty(company.getPhysicalAddress());
        this.phone = new SimpleStringProperty(company.getPhone());
        this.email = new SimpleStringProperty(company.getEmail());
        this.webSite = new SimpleStringProperty(company.getWebSite());
        this.tagLine = new SimpleStringProperty(company.getTagLine());
        this.logo = company.getLogo();
        this.imvLogo = FXUIUtils.setTableSizeImage(imvLogo, company.getLogo());
        initCommonProprties();
    }

    private void createSearchColumns() {
        this.searchColumns.add(new SearchColumn("companyID", "Company ID", this.companyID.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("companyName", "Company Name", this.companyName.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("businessType", "Business Type", this.businessType.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal));
        this.searchColumns.add(new SearchColumn("physicalAddress", "Physical Address", this.physicalAddress.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("phone", "Phone", this.phone.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("email", "Email", this.email.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("webSite", "Web Site", this.webSite.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("tagLine", "Tag Line", this.tagLine.get(), SearchDataTypes.STRING));
        this.searchColumns.addAll(this.getDefaultSearchColumns());
    }

    @Override
    public List<SearchColumn> getSearchColumns() {
        return this.searchColumns;
    }

    @Override
    public Object getId() {
        return this.company.getId();
    }

    @Override
    public String getDisplayKey() {
        return this.company.getDisplayKey();
    }

    public static List<CompanyDA> getCompanyDAs(List<Company> companys) {
        List<CompanyDA> list = new ArrayList<>();
        companys.forEach((company) -> {
            list.add(new CompanyDA(company));
        });
        return list;
    }

    public static List<Company> getCompanyList(List<CompanyDA> companyDAs) {
        List<Company> companys = new ArrayList<>();
        companyDAs.forEach(a -> companys.add(a.company));
        return companys;
    }

    public boolean save() throws Exception {
        return super.persist(this.company);

    }

    public boolean update() throws Exception {
        return super.merge(this.company);

    }

    public boolean delete() {
        return super.remove(this.company);

    }

    public Company getCompany(String companyID) {
        return (Company) super.find(Company.class, companyID);
    }

    public List<Company> getCompanys() {
        return super.find(Company.class);
    }

    @Override
    public List<DBAccess> get() {
        List<DBAccess> list = new ArrayList<>();
        List<Company> datas = super.find(Company.class);
        datas.forEach((data) -> {
            list.add(new CompanyDA(data));
        });
        return list;
    }

    public CompanyDA get(String companyID) throws Exception {
        Company oCompany = getCompany(companyID);
        if (oCompany == null) {
            throw new Exception("No Record with id: " + companyID);
        }
        return new CompanyDA(oCompany);
    }

    public List<CompanyDA> get(String columName, Object value) {
        List<Company> data = super.find(Company.class, columName, value);
        List<CompanyDA> list = new ArrayList<>();
        data.forEach(da -> list.add(new CompanyDA(da)));
        return list;
    }

    public List<Pair<String, Object>> keyValuePairs() {
        List<Pair<String, Object>> pairs = new ArrayList<>();
        this.get().forEach((t) -> pairs.add(t.keyValuePair()));
        return pairs;
    }

    public List<Pair<String, Object>> keyValuePairs(String columName, Object value) {
        List<Pair<String, Object>> pairs = new ArrayList<>();
        this.get(columName, value).forEach((t) -> pairs.add(t.keyValuePair()));
        return pairs;
    }

    public int getMax(String columnName) {
        return super.getMax(Company.class, columnName);
    }

    public int getMax(String columnName, String comparatorColumn, Object comparatorVaue) {
        return super.getMax(Company.class, columnName, comparatorColumn, comparatorVaue);
    }

    public final int getNextIDHelper() {
        return this.getMax("iDHelper") + 1;
    }

    public String getNextCompanyID(int iDHelper) {
        return new IDGeneratorDA().getToAppendString(Company.class.getSimpleName(), iDHelper);
    }

    public List<Company> getCompanys(String columName, Object value) {
        return super.find(Company.class, columName, value);
    }
    
    public static CompanyDA getLatestCompanyDA(){
        List<Company> companys = new CompanyDA().getCompanys();
         return companys.isEmpty()?null:new CompanyDA(companys.get(0));
    }

}
