/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.common.dbaccess;

import com.saburi.common.entities.Licence;
import com.saburi.common.utils.SaburiEncryptor;
import javafx.beans.property.*;
import java.util.ArrayList;
import java.util.List;
import javafx.util.Pair;
import com.saburi.common.utils.SearchColumn;
import com.saburi.common.utils.SearchColumn.SearchDataTypes;
import java.time.LocalDate;

public class LicenceDA extends DBAccess {

    private Licence licence;
    private SimpleStringProperty lC1 = new SimpleStringProperty(this, "lC1");
    private SimpleStringProperty lC2 = new SimpleStringProperty(this, "lC2");
    private SimpleStringProperty lC3 = new SimpleStringProperty(this, "lC3");
    private SimpleStringProperty lC4 = new SimpleStringProperty(this, "lC4");
    private SimpleStringProperty lC5 = new SimpleStringProperty(this, "lC5");
    private SimpleStringProperty lC6 = new SimpleStringProperty(this, "lC6");
    private SimpleStringProperty lC7 = new SimpleStringProperty(this, "lC7");
    private SimpleStringProperty lC8 = new SimpleStringProperty(this, "lC8");

    public LicenceDA() {
        createSearchColumns();
    }

    public LicenceDA(String persistenceUnit) {
        super(persistenceUnit);
    }

    public LicenceDA(Licence licence) {
        this.licence = licence;
        initialseProprties();
        createSearchColumns();
    }

    public LicenceDA(String persistenceUnit, Licence licence) {
        super(persistenceUnit);
        this.licence = licence;
        initialseProprties();
        createSearchColumns();
    }

    public LicenceDA(String lC1, String lC2, String lC3, String lC4, String lC5, String lC6, String lC7, String lC8) {
        this.licence = new Licence(lC1, lC2, lC3, lC4, lC5, lC6, lC7, lC8);
        initialseProprties();
        createSearchColumns();
    }

    public LicenceDA(String persistenceUnit, String lC1, String lC2, String lC3, String lC4, String lC5, String lC6, String lC7, String lC8) {
        super(persistenceUnit);
        this.licence = new Licence(lC1, lC2, lC3, lC4, lC5, lC6, lC7, lC8);
        initialseProprties();
        createSearchColumns();
    }

    public String getLC1() {
        return lC1.get();
    }

    public void setLC1(String lC1) {
        licence.setLC1(lC1);
        this.lC1.set(lC1);
    }

    public String getLC2() {
        return lC2.get();
    }

    public void setLC2(String lC2) {
        licence.setLC2(lC2);
        this.lC2.set(lC2);
    }

    public String getLC3() {
        return lC3.get();
    }

    public void setLC3(String lC3) {
        licence.setLC3(lC3);
        this.lC3.set(lC3);
    }

    public String getLC4() {
        return lC4.get();
    }

    public void setLC4(String lC4) {
        licence.setLC4(lC4);
        this.lC4.set(lC4);
    }

    public String getLC5() {
        return lC5.get();
    }

    public void setLC5(String lC5) {
        licence.setLC5(lC5);
        this.lC5.set(lC5);
    }

    public String getLC6() {
        return lC6.get();
    }

    public void setLC6(String lC6) {
        licence.setLC6(lC6);
        this.lC6.set(lC6);
    }

    public String getLC7() {
        return lC7.get();
    }

    public void setLC7(String lC7) {
        licence.setLC7(lC7);
        this.lC7.set(lC7);
    }

    public String getLC8() {
        return lC8.get();
    }

    public void setLC8(String lC8) {
        licence.setLC8(lC8);
        this.lC8.set(lC8);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof LicenceDA)) {
            return false;
        }

        LicenceDA licenceDA = (LicenceDA) o;

        if (licenceDA.getDBEntity() == null || this.getDBEntity() == null) {
            return false;
        }
        return this.getId().equals(licenceDA.getId());
    }

    @Override
    public int hashCode() {
        return licence.getId().hashCode();
    }

    private void initialseProprties() {
        this.dBEntity = licence;
        this.lC1 = new SimpleStringProperty(licence.getLC1());
        this.lC2 = new SimpleStringProperty(licence.getLC2());
        this.lC3 = new SimpleStringProperty(licence.getLC3());
        this.lC4 = new SimpleStringProperty(licence.getLC4());
        this.lC5 = new SimpleStringProperty(licence.getLC5());
        this.lC6 = new SimpleStringProperty(licence.getLC6());
        this.lC7 = new SimpleStringProperty(licence.getLC7());
        this.lC8 = new SimpleStringProperty(licence.getLC8());
        initCommonProprties();
    }

    private void createSearchColumns() {
        this.searchColumns.add(new SearchColumn("lC1", "LC1", this.lC1.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("lC2", "LC2", this.lC2.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("lC3", "LC3", this.lC3.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("lC4", "LC4", this.lC4.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("lC5", "LC5", this.lC5.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("lC6", "LC6", this.lC6.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("lC7", "LC7", this.lC7.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("lC8", "LC8", this.lC8.get(), SearchDataTypes.STRING));
        this.searchColumns.addAll(this.getDefaultSearchColumns());
    }

    @Override
    public List<SearchColumn> getSearchColumns() {
        return this.searchColumns;
    }

    @Override
    public Object getId() {
        return this.licence.getId();
    }

    @Override
    public String getDisplayKey() {
        return this.licence.getDisplayKey();
    }

    public static List<LicenceDA> getLicenceDAs(List<Licence> licences) {
        List<LicenceDA> list = new ArrayList<>();
        licences.forEach((licence) -> {
            list.add(new LicenceDA(licence));
        });
        return list;
    }

    public static List<Licence> getLicenceList(List<LicenceDA> licenceDAs) {
        List<Licence> licences = new ArrayList<>();
        licenceDAs.forEach(a -> licences.add(a.licence));
        return licences;
    }

    public boolean save() throws Exception {
        return super.persist(this.licence);

    }

    public boolean update() throws Exception {
        return super.merge(this.licence);

    }

    public boolean delete() {
        return super.remove(this.licence);

    }

    public Licence getLicence(String lC1) {
        return (Licence) super.find(Licence.class, lC1);
    }

    public List<Licence> getLicences() {
        return super.find(Licence.class);
    }

    @Override
    public List<DBAccess> get() {
        List<DBAccess> list = new ArrayList<>();
        List<Licence> datas = super.find(Licence.class);
        datas.forEach((data) -> {
            list.add(new LicenceDA(data));
        });
        return list;
    }

    public LicenceDA get(String lC1) throws Exception {
        Licence oLicence = getLicence(lC1);
        if (oLicence == null) {
            throw new Exception("No Record with id: " + lC1);
        }
        return new LicenceDA(oLicence);
    }

    public List<LicenceDA> get(String columName, Object value) {
        List<Licence> data = super.find(Licence.class, columName, value);
        List<LicenceDA> list = new ArrayList<>();
        data.forEach(da -> list.add(new LicenceDA(da)));
        return list;
    }

    public List<Pair<String, Object>> keyValuePairs() {
        List<Pair<String, Object>> pairs = new ArrayList<>();
        this.get().forEach((t) -> pairs.add(t.keyValuePair()));
        return pairs;
    }

    public List<Pair<String, Object>> keyValuePairs(String columName, Object value) {
        List<Pair<String, Object>> pairs = new ArrayList<>();
        this.get(columName, value).forEach((t) -> pairs.add(t.keyValuePair()));
        return pairs;
    }

    public int getMax(String columnName) {
        return super.getMax(Licence.class, columnName);
    }

    public int getMax(String columnName, String comparatorColumn, Object comparatorVaue) {
        return super.getMax(Licence.class, columnName, comparatorColumn, comparatorVaue);
    }

    public List<Licence> getLicences(String columName, Object value) {
        return super.find(Licence.class, columName, value);
    }
    
    public  static boolean noUploadedLicences(){
       return new LicenceDA().getLicences().isEmpty();
    }
    
    public static LicenceDA getLatestLicenceDA(){
       List<Licence> licences = new LicenceDA().getLicences();
       return licences.isEmpty()?new LicenceDA():new LicenceDA(licences.get(0));
    }
    
    
     public static boolean isValid() {
        return !LocalDate.parse(SaburiEncryptor.decrypt(getLatestLicenceDA().getLC5())).isBefore(LocalDate.now());
    }

}
