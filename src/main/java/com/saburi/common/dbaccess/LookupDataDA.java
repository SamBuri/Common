/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.common.dbaccess;

import com.saburi.common.entities.LookupData;
import javafx.beans.property.*;
import java.util.ArrayList;
import com.saburi.common.entities.AppRevisionEntity;
import java.util.List;
import com.saburi.common.utils.SearchColumn;
import com.saburi.common.utils.SearchColumn.SearchDataTypes;
import org.hibernate.envers.RevisionType;
import com.saburi.common.entities.LookupObject;

public class LookupDataDA extends DBAccess {

    private LookupData lookupData = new LookupData();
    private final SimpleIntegerProperty idHelper = new SimpleIntegerProperty(this, "idHelper");
    private final SimpleStringProperty lookupObjectDisplay = new SimpleStringProperty(this, "lookupObjectDisplay");
    private final SimpleObjectProperty lookupObjectID = new SimpleObjectProperty(this, "lookupObjectID");
    private LookupObject lookupObject;
    private final SimpleStringProperty lookupDataID = new SimpleStringProperty(this, "lookupDataID");
    private final SimpleStringProperty lookupDataName = new SimpleStringProperty(this, "lookupDataName");
    private final SimpleBooleanProperty readOnly = new SimpleBooleanProperty(this, "readOnly");
    private final SimpleBooleanProperty hidden = new SimpleBooleanProperty(this, "hidden");
    private final SimpleBooleanProperty isDefault = new SimpleBooleanProperty(this, "isDefault");

    public LookupDataDA() {
        createSearchColumns();
    }

    public LookupDataDA(String persistenceUnit) {
        super(persistenceUnit);
    }

    public LookupDataDA(LookupData lookupData) {
        this.lookupData = lookupData;
        initialseProprties();
        createSearchColumns();
    }

    public LookupDataDA(String persistenceUnit, LookupData lookupData) {
        super(persistenceUnit);
        this.lookupData = lookupData;
        initialseProprties();
        createSearchColumns();
    }

    public LookupDataDA(LookupObject lookupObject, String lookupDataID, String lookupDataName, boolean readOnly, boolean hidden, boolean isDefault) {
        this.lookupData = new LookupData(getNextIdHelper(lookupObject), lookupObject, lookupDataID, lookupDataName, readOnly, hidden, isDefault);
        initialseProprties();
        createSearchColumns();
    }

    public LookupDataDA(String persistenceUnit, LookupObject lookupObject, String lookupDataID, String lookupDataName, boolean readOnly, boolean hidden, boolean isDefault) {
        super(persistenceUnit);
        this.lookupData = new LookupData(getNextIdHelper(lookupObject), lookupObject, lookupDataID, lookupDataName, readOnly, hidden, isDefault);
        initialseProprties();
        createSearchColumns();
    }

    public int getIdHelper() {
        return idHelper.get();
    }

    public void setIdHelper(int idHelper) {
        lookupData.setIdHelper(idHelper);
        this.idHelper.set(idHelper);
    }

    public LookupObject getLookupObject() {
        return lookupObject;
    }

    public Object getLookupObjectID() {
        return lookupObjectID.get();
    }

    public String getLookupObjectDisplay() {
        return lookupObjectDisplay.get();
    }

    public LookupObjectDA getLookupObjectDA() {
        return this.lookupObject != null ? new LookupObjectDA(this.lookupObject) : null;
    }

    public void setLookupObject(LookupObject lookupObject) {
        lookupData.setLookupObject(lookupObject);
        this.lookupObject = lookupObject;
        this.lookupObjectID.set(lookupObject.getId());
        this.lookupObjectDisplay.set(lookupObject.getDisplayKey());
    }

    public String getLookupDataID() {
        return lookupDataID.get();
    }

    public void setLookupDataID(String lookupDataID) {
        lookupData.setLookupDataID(lookupDataID);
        this.lookupDataID.set(lookupDataID);
    }

    public String getLookupDataName() {
        return lookupDataName.get();
    }

    public void setLookupDataName(String lookupDataName) {
        lookupData.setLookupDataName(lookupDataName);
        this.lookupDataName.set(lookupDataName);
    }

    public boolean isReadOnly() {
        return readOnly.get();
    }

    public void setReadOnly(boolean readOnly) {
        lookupData.setReadOnly(readOnly);
        this.readOnly.set(readOnly);
    }

    public boolean isHidden() {
        return hidden.get();
    }

    public void setHidden(boolean hidden) {
        lookupData.setHidden(hidden);
        this.hidden.set(hidden);
    }

    public boolean isIsDefault() {
        return isDefault.get();
    }

    public void setIsDefault(boolean isDefault) {
        lookupData.setIsDefault(isDefault);
        this.isDefault.set(isDefault);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof LookupDataDA)) {
            return false;
        }

        LookupDataDA lookupDataDA = (LookupDataDA) o;

        if (lookupDataDA.getDBEntity() == null || this.getDBEntity() == null) {
            return false;
        }
        return this.getId().equals(lookupDataDA.getId());
    }

    @Override
    public int hashCode() {
        return lookupData.getId().hashCode();
    }

    private void initialseProprties() {
        this.dBEntity = lookupData;
        this.idHelper.set(lookupData.getIdHelper());
        this.lookupObject = lookupData.getLookupObject();
        if (this.lookupObject != null) {
            this.lookupObjectID.set(lookupObject.getId());
            this.lookupObjectDisplay.set(lookupObject.getDisplayKey());
        }
        this.lookupDataID.set(lookupData.getLookupDataID());
        this.lookupDataName.set(lookupData.getLookupDataName());
        this.readOnly.set(lookupData.isReadOnly());
        this.hidden.set(lookupData.isHidden());
        this.isDefault.set(lookupData.isIsDefault());
        initCommonProprties();
    }

    private void createSearchColumns() {
        this.searchColumns.add(new SearchColumn("lookupObjectID", "Lookup Object ID", this.lookupObjectID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("lookupObjectDisplay", "Lookup Object", this.lookupObjectDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("lookupDataID", "Lookup Data ID", this.lookupDataID.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("lookupDataName", "Lookup Data Name", this.lookupDataName.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("readOnly", "ReadOnly", this.readOnly.get(), SearchDataTypes.BOOLEAN));
        this.searchColumns.add(new SearchColumn("hidden", "Hidden", this.hidden.get(), SearchDataTypes.BOOLEAN));
        this.searchColumns.add(new SearchColumn("isDefault", "IsDefault", this.isDefault.get(), SearchDataTypes.BOOLEAN));
        this.searchColumns.addAll(this.getDefaultSearchColumns());
    }

    @Override
    public List<SearchColumn> getSearchColumns() {
        return this.searchColumns;
    }

    @Override
    public Object getId() {
        return this.lookupData.getId();
    }

    @Override
    public String getDisplayKey() {
        return this.lookupData.getDisplayKey();
    }

    public static List<LookupDataDA> getLookupDataDAs(List<LookupData> lookupDatas) {
        List<LookupDataDA> list = new ArrayList<>();
        lookupDatas.forEach((lookupData) -> {
            list.add(new LookupDataDA(lookupData));
        });
        return list;
    }

    public static List<LookupData> getLookupDataList(List<LookupDataDA> lookupDataDAs) {
        List<LookupData> lookupDatas = new ArrayList<>();
        lookupDataDAs.forEach(a -> lookupDatas.add(a.lookupData));
        return lookupDatas;
    }

    public boolean save() throws Exception {
        if (validateLookupData()) {
            return super.persist(this.lookupData);
        }
        return false;
    }

    public boolean update() throws Exception {
        if (validateLookupData()) {
            return super.merge(this.lookupData);
        }
        return false;
    }

    public boolean delete() {
        return super.remove(this.lookupData);

    }

    public LookupData getLookupData(String lookupDataID) {
        return (LookupData) super.find(LookupData.class, lookupDataID);
    }

    public LookupData getLookupData() {
        return this.lookupData;
    }

    public List<LookupData> getLookupDatas() {
        return super.find(LookupData.class);
    }

    @Override
    public List<DBAccess> get() {
        List<DBAccess> list = new ArrayList<>();
        selectQuery(LookupData.class).forEach(o -> list.add(new LookupDataDA((LookupData) o)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public LookupDataDA get(String lookupDataID) throws Exception {
        LookupData oLookupData = getLookupData(lookupDataID);
        if (oLookupData == null) {
            throw new Exception("No Record with id: " + lookupDataID);
        }
        return new LookupDataDA(oLookupData);
    }

    public List<LookupDataDA> get(String columName, Object value) {
        List<LookupDataDA> list = new ArrayList<>();
        super.selectQuery(LookupData.class, columName, value).forEach(da -> list.add(new LookupDataDA((LookupData) da)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public List<LookupDataDA> toDaList(List<LookupData> lookupDatas) {
        List<LookupDataDA> lookupDataDAs = new ArrayList<>();
        lookupDatas.forEach(s -> lookupDataDAs.add(new LookupDataDA(s)));
        return lookupDataDAs;
    }

    public List<DBAccess> toDBAccessList(List<LookupData> lookupDatas) {
        List<DBAccess> dbAccesses = new ArrayList<>();
        lookupDatas.forEach(s -> dbAccesses.add(new LookupDataDA(s)));
        return dbAccesses;
    }

    public int getMax(String columnName) {
        return super.getMax(LookupData.class, columnName);
    }

    public int getMax(String columnName, String comparatorColumn, Object comparatorVaue) {
        return super.getMax(LookupData.class, columnName, comparatorColumn, comparatorVaue);
    }

    public final int getNextIdHelper(LookupObject lookupObject) {
        return this.getMax("idHelper", "lookupObject", lookupObject) + 1;
    }

    public String getNextLookupDataID(int idHelper, int lookupObject) {
        return new IDGeneratorDA().getToAppendString(LookupData.class.getSimpleName(), lookupObject, idHelper);
    }

    public List<LookupData> getLookupDatas(String columName, Object value) {
        return super.find(LookupData.class, columName, value);
    }

    @Override
    public List<DBAccess> getRevisions() {
        try {

            List<Object[]> list = getEntityRevisions(LookupData.class);
            List<DBAccess> dBAccesses = new ArrayList<>();
            list.forEach(e -> {

                LookupDataDA lookupDataDA = new LookupDataDA((LookupData) e[0]);
                lookupDataDA.revisionEntity = (AppRevisionEntity) e[1];
                lookupDataDA.oRevisionType = (RevisionType) e[2];
                lookupDataDA.initRevProprties();
                lookupDataDA.searchColumns.addAll(lookupDataDA.getRevSearchColumns());
                dBAccesses.add(lookupDataDA);

            });

            return dBAccesses;
        } catch (Exception e) {
            throw e;
        } finally {
            if (entityManager == null) {
                entityManager.close();
            }
        }

    }

    public List<LookupData> getLookupDatas(String columName, Object value, String columName1, Object value1) {
        return super.find(LookupData.class, columName, value, columName1, value1);
    }

    public List<LookupData> getLookupDataByObjectID(Object value) {
        return super.find(LookupData.class, "lookupObject", super.find(LookupObject.class, value));
    }

    private List<LookupData> getDefaultLookupDatas(LookupObject value) {
        return getLookupDatas("lookupObject", value, "isDefault", true);
    }

    public LookupData getDefaultLookupData(LookupObject value) {
        List<LookupData> lookupDatas = getDefaultLookupDatas(value);
        return lookupDatas.isEmpty() ? null : getDefaultLookupDatas(value).get(0);
    }

    public LookupData getDefaultLookupData(int value) {
        List<LookupData> lookupDatas = getDefaultLookupDatas((LookupObject) super.find(LookupObject.class, value));
        return lookupDatas.isEmpty() ? null : lookupDatas.get(0);
    }

    public LookupDataDA getDefaultLookupDataDA(int value) {
        LookupData ld = getDefaultLookupData(value);
        return ld == null ? null : new LookupDataDA(ld);
    }

    private boolean validateLookupData() throws Exception {
        List<LookupData> defaultLookupDatas = getDefaultLookupDatas(this.lookupData.getLookupObject());
        defaultLookupDatas.remove(this.lookupData);
        if (!defaultLookupDatas.isEmpty() && this.lookupData.isIsDefault()) {
            throw new Exception("There is already a record set as default for Lookup object: " + lookupData.getLookupObject().getDisplayKey() + ". You can't have more than one");

        } else {
            return true;
        }

    }

}
