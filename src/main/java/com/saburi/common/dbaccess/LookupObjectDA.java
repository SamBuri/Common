/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.common.dbaccess;

import com.saburi.common.entities.LookupObject;
import javafx.beans.property.*;
import java.util.ArrayList;
import com.saburi.common.entities.AppRevisionEntity;
import java.util.List;
import com.saburi.common.utils.SearchColumn;
import com.saburi.common.utils.SearchColumn.SearchDataTypes;
import org.hibernate.envers.RevisionType;

public class LookupObjectDA extends DBAccess {

    private LookupObject lookupObject = new LookupObject();
    private final SimpleIntegerProperty lookupObjectID = new SimpleIntegerProperty(this, "lookupObjectID");
    private final SimpleStringProperty lookupObjectName = new SimpleStringProperty(this, "lookupObjectName");
    private final SimpleBooleanProperty readOnly = new SimpleBooleanProperty(this, "readOnly");
    private final SimpleBooleanProperty hidden = new SimpleBooleanProperty(this, "hidden");

    public LookupObjectDA() {
        createSearchColumns();
    }

    public LookupObjectDA(String persistenceUnit) {
        super(persistenceUnit);
    }

    public LookupObjectDA(LookupObject lookupObject) {
        this.lookupObject = lookupObject;
        initialseProprties();
        createSearchColumns();
    }

    public LookupObjectDA(String persistenceUnit, LookupObject lookupObject) {
        super(persistenceUnit);
        this.lookupObject = lookupObject;
        initialseProprties();
        createSearchColumns();
    }

    public LookupObjectDA(int lookupObjectID, String lookupObjectName, boolean readOnly, boolean hidden) {
        this.lookupObject = new LookupObject(lookupObjectID, lookupObjectName, readOnly, hidden);
        initialseProprties();
        createSearchColumns();
    }

    public LookupObjectDA(String persistenceUnit, int lookupObjectID, String lookupObjectName, boolean readOnly, boolean hidden) {
        super(persistenceUnit);
        this.lookupObject = new LookupObject(lookupObjectID, lookupObjectName, readOnly, hidden);
        initialseProprties();
        createSearchColumns();
    }

    public int getLookupObjectID() {
        return lookupObjectID.get();
    }

    public void setLookupObjectID(int lookupObjectID) {
        lookupObject.setLookupObjectID(lookupObjectID);
        this.lookupObjectID.set(lookupObjectID);
    }

    public String getLookupObjectName() {
        return lookupObjectName.get();
    }

    public void setLookupObjectName(String lookupObjectName) {
        lookupObject.setLookupObjectName(lookupObjectName);
        this.lookupObjectName.set(lookupObjectName);
    }

    public boolean isReadOnly() {
        return readOnly.get();
    }

    public void setReadOnly(boolean readOnly) {
        lookupObject.setReadOnly(readOnly);
        this.readOnly.set(readOnly);
    }

    public boolean isHidden() {
        return hidden.get();
    }

    public void setHidden(boolean hidden) {
        lookupObject.setHidden(hidden);
        this.hidden.set(hidden);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof LookupObjectDA)) {
            return false;
        }

        LookupObjectDA lookupObjectDA = (LookupObjectDA) o;

        if (lookupObjectDA.getDBEntity() == null || this.getDBEntity() == null) {
            return false;
        }
        return this.getId().equals(lookupObjectDA.getId());
    }

    @Override
    public int hashCode() {
        return lookupObject.getId().hashCode();
    }

    private void initialseProprties() {
        this.dBEntity = lookupObject;
        this.lookupObjectID.set(lookupObject.getLookupObjectID());
        this.lookupObjectName.set(lookupObject.getLookupObjectName());
        this.readOnly.set(lookupObject.isReadOnly());
        this.hidden.set(lookupObject.isHidden());
        initCommonProprties();
    }

    private void createSearchColumns() {
        this.searchColumns.add(new SearchColumn("lookupObjectID", "Lookup Object ID", this.lookupObjectID.get(), SearchDataTypes.NUMBER));
        this.searchColumns.add(new SearchColumn("lookupObjectName", "Lookup Object Name", this.lookupObjectName.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("readOnly", "ReadOnly", this.readOnly.get(), SearchDataTypes.BOOLEAN));
        this.searchColumns.add(new SearchColumn("hidden", "Hidden", this.hidden.get(), SearchDataTypes.BOOLEAN));
        this.searchColumns.addAll(this.getDefaultSearchColumns());
    }

    @Override
    public List<SearchColumn> getSearchColumns() {
        return this.searchColumns;
    }

    @Override
    public Object getId() {
        return this.lookupObject.getId();
    }

    @Override
    public String getDisplayKey() {
        return this.lookupObject.getDisplayKey();
    }

    public static List<LookupObjectDA> getLookupObjectDAs(List<LookupObject> lookupObjects) {
        List<LookupObjectDA> list = new ArrayList<>();
        lookupObjects.forEach((lookupObject) -> {
            list.add(new LookupObjectDA(lookupObject));
        });
        return list;
    }

    public static List<LookupObject> getLookupObjectList(List<LookupObjectDA> lookupObjectDAs) {
        List<LookupObject> lookupObjects = new ArrayList<>();
        lookupObjectDAs.forEach(a -> lookupObjects.add(a.lookupObject));
        return lookupObjects;
    }

    public boolean save() throws Exception {
        return super.persist(this.lookupObject);

    }

    public boolean update() throws Exception {
        return super.merge(this.lookupObject);

    }

    public boolean delete() {
        return super.remove(this.lookupObject);

    }

    public LookupObject getLookupObject(String lookupObjectID) {
        return (LookupObject) super.find(LookupObject.class, lookupObjectID);
    }

    public LookupObject getLookupObject() {
        return this.lookupObject;
    }

    public List<LookupObject> getLookupObjects() {
        return super.find(LookupObject.class);
    }

    @Override
    public List<DBAccess> get() {
        List<DBAccess> list = new ArrayList<>();
        selectQuery(LookupObject.class).forEach(o -> list.add(new LookupObjectDA((LookupObject) o)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public LookupObjectDA get(String lookupObjectID) throws Exception {
        LookupObject oLookupObject = getLookupObject(lookupObjectID);
        if (oLookupObject == null) {
            throw new Exception("No Record with id: " + lookupObjectID);
        }
        return new LookupObjectDA(oLookupObject);
    }

    public List<LookupObjectDA> get(String columName, Object value) {
        List<LookupObjectDA> list = new ArrayList<>();
        super.selectQuery(LookupObject.class, columName, value).forEach(da -> list.add(new LookupObjectDA((LookupObject) da)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public List<LookupObjectDA> toDaList(List<LookupObject> lookupObjects) {
        List<LookupObjectDA> lookupObjectDAs = new ArrayList<>();
        lookupObjects.forEach(s -> lookupObjectDAs.add(new LookupObjectDA(s)));
        return lookupObjectDAs;
    }

    public List<DBAccess> toDBAccessList(List<LookupObject> lookupObjects) {
        List<DBAccess> dbAccesses = new ArrayList<>();
        lookupObjects.forEach(s -> dbAccesses.add(new LookupObjectDA(s)));
        return dbAccesses;
    }

    public int getMax(String columnName) {
        return super.getMax(LookupObject.class, columnName);
    }

    public int getMax(String columnName, String comparatorColumn, Object comparatorVaue) {
        return super.getMax(LookupObject.class, columnName, comparatorColumn, comparatorVaue);
    }

    public List<LookupObject> getLookupObjects(String columName, Object value) {
        return super.find(LookupObject.class, columName, value);
    }
    
    @Override
    public List<DBAccess> getRevisions() {
        try {

            List<Object[]> list = getEntityRevisions(LookupObject.class);
            List<DBAccess> dBAccesses = new ArrayList<>();
            list.forEach(e -> {

                LookupObjectDA lookupObjectDA = new LookupObjectDA((LookupObject) e[0]);
                lookupObjectDA.revisionEntity = (AppRevisionEntity) e[1];
                lookupObjectDA.oRevisionType = (RevisionType) e[2];
                lookupObjectDA.initRevProprties();
                lookupObjectDA.searchColumns.addAll(lookupObjectDA.getRevSearchColumns());
                dBAccesses.add(lookupObjectDA);

            });

            return dBAccesses;
        } catch (Exception e) {
            throw e;
        } finally {
            if (entityManager == null) {
                entityManager.close();
            }
        }

    }

}
