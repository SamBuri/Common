/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.common.dbaccess;

import com.saburi.common.entities.Options;
import javafx.beans.property.*;
import java.util.ArrayList;
import java.util.List;
import javafx.util.Pair;
import com.saburi.common.utils.SearchColumn;
import com.saburi.common.utils.SearchColumn.SearchDataTypes;
import com.saburi.common.utils.CommonEnums.DataTypes;

public class OptionsDA extends DBAccess {

    private Options options;
    private SimpleStringProperty optionID = new SimpleStringProperty(this, "optionID");
    private SimpleStringProperty optionName = new SimpleStringProperty(this, "optionName");
    private SimpleObjectProperty dataType = new SimpleObjectProperty(this, "dataType");
    private SimpleStringProperty optionValue = new SimpleStringProperty(this, "optionValue");

    public OptionsDA() {
        createSearchColumns();
    }

    public OptionsDA(String persistenceUnit) {
        super(persistenceUnit);
    }

    public OptionsDA(Options options) {
        this.options = options;
        initialseProprties();
        createSearchColumns();
    }

    public OptionsDA(String persistenceUnit, Options options) {
        super(persistenceUnit);
        this.options = options;
        initialseProprties();
        createSearchColumns();
    }

    public OptionsDA(String optionID, String optionName, DataTypes dataType, String optionValue) {
        this.options = new Options(optionID, optionName, dataType, optionValue);
        initialseProprties();
        createSearchColumns();
    }

    public OptionsDA(String persistenceUnit, String optionID, String optionName, DataTypes dataType, String optionValue) {
        super(persistenceUnit);
        this.options = new Options(optionID, optionName, dataType, optionValue);
        initialseProprties();
        createSearchColumns();
    }

    public String getOptionID() {
        return optionID.get();
    }

    public void setOptionID(String optionID) {
        options.setOptionID(optionID);
        this.optionID.set(optionID);
    }

    public String getOptionName() {
        return optionName.get();
    }

    public void setOptionName(String optionName) {
        options.setOptionName(optionName);
        this.optionName.set(optionName);
    }

    public Object getDataType() {
        return dataType.get();
    }

    public void setDataType(DataTypes dataType) {
        options.setDataType(dataType);
        this.dataType.set(dataType);
    }

    public String getOptionValue() {
        return optionValue.get();
    }

    public void setOptionValue(String optionValue) {
        options.setOptionValue(optionValue);
        this.optionValue.set(optionValue);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof OptionsDA)) {
            return false;
        }

        OptionsDA optionsDA = (OptionsDA) o;

        if (optionsDA.getDBEntity() == null || this.getDBEntity() == null) {
            return false;
        }
        return this.getId().equals(optionsDA.getId());
    }

    @Override
    public int hashCode() {
        return options.getId().hashCode();
    }

    private void initialseProprties() {
        this.dBEntity = options;
        this.optionID = new SimpleStringProperty(options.getOptionID());
        this.optionName = new SimpleStringProperty(options.getOptionName());
        this.dataType = new SimpleObjectProperty(options.getDataType());
        this.optionValue = new SimpleStringProperty(options.getOptionValue());
        initCommonProprties();
    }

    private void createSearchColumns() {
        this.searchColumns.add(new SearchColumn("optionID", "Option ID", this.optionID.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("optionName", "Option Name", this.optionName.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("dataType", "Data Type", this.dataType.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal));
        this.searchColumns.add(new SearchColumn("optionValue", "Option Value", this.optionValue.get(), SearchDataTypes.STRING));
        this.searchColumns.addAll(this.getDefaultSearchColumns());
    }

    @Override
    public List<SearchColumn> getSearchColumns() {
        return this.searchColumns;
    }

    @Override
    public Object getId() {
        return this.options.getId();
    }

    @Override
    public String getDisplayKey() {
        return this.options.getDisplayKey();
    }

    public static List<OptionsDA> getOptionsDAs(List<Options> optionss) {
        List<OptionsDA> list = new ArrayList<>();
        optionss.forEach((options) -> {
            list.add(new OptionsDA(options));
        });
        return list;
    }

    public static List<Options> getOptionsList(List<OptionsDA> optionsDAs) {
        List<Options> optionss = new ArrayList<>();
        optionsDAs.forEach(a -> optionss.add(a.options));
        return optionss;
    }

    public boolean save() throws Exception {
        return super.persist(this.options);

    }

    public boolean update() throws Exception {
        return super.merge(this.options);

    }

    public boolean delete() {
        return super.remove(this.options);

    }

    public Options getOptions(String optionID) {
        return (Options) super.find(Options.class, optionID);
    }

    public List<Options> getOptionss() {
        return super.find(Options.class);
    }

    @Override
    public List<DBAccess> get() {
        List<DBAccess> list = new ArrayList<>();
        List<Options> datas = super.find(Options.class);
        datas.forEach((data) -> {
            list.add(new OptionsDA(data));
        });
        return list;
    }

    public OptionsDA get(String optionID) throws Exception {
        Options oOptions = getOptions(optionID);
        if (oOptions == null) {
            throw new Exception("No Record with id: " + optionID);
        }
        return new OptionsDA(oOptions);
    }

    public List<OptionsDA> get(String columName, Object value) {
        List<Options> data = super.find(Options.class, columName, value);
        List<OptionsDA> list = new ArrayList<>();
        data.forEach(da -> list.add(new OptionsDA(da)));
        return list;
    }

    public List<Pair<String, Object>> keyValuePairs() {
        List<Pair<String, Object>> pairs = new ArrayList<>();
        this.get().forEach((t) -> pairs.add(t.keyValuePair()));
        return pairs;
    }

    public List<Pair<String, Object>> keyValuePairs(String columName, Object value) {
        List<Pair<String, Object>> pairs = new ArrayList<>();
        this.get(columName, value).forEach((t) -> pairs.add(t.keyValuePair()));
        return pairs;
    }

    public int getMax(String columnName) {
        return super.getMax(Options.class, columnName);
    }

    public int getMax(String columnName, String comparatorColumn, Object comparatorVaue) {
        return super.getMax(Options.class, columnName, comparatorColumn, comparatorVaue);
    }

    public List<Options> getOptionss(String columName, Object value) {
        return super.find(Options.class, columName, value);
    }
    
    public static boolean getBooleanOptionValue(String optionID){
      return Boolean.parseBoolean(new OptionsDA().getOptions(optionID).getOptionValue());
    }

}
