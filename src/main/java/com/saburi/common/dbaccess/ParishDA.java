/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.common.dbaccess;

import com.saburi.common.entities.Parish;
import javafx.beans.property.*;
import java.util.ArrayList;
import com.saburi.common.entities.AppRevisionEntity;
import java.util.List;
import com.saburi.common.utils.SearchColumn;
import com.saburi.common.utils.SearchColumn.SearchDataTypes;
import org.hibernate.envers.RevisionType;
import static com.saburi.common.utils.Utilities.formatInteger;
import com.saburi.common.entities.LookupData;
import com.saburi.common.entities.County;
import com.saburi.common.entities.SubCounty;

public class ParishDA extends DBAccess {

    private Parish parish = new Parish();
    private final SimpleIntegerProperty idHelper = new SimpleIntegerProperty(this, "idHelper");
    private final SimpleStringProperty idHelperDisplay = new SimpleStringProperty(this, "idHelperDisplay");
    private final SimpleStringProperty districtDisplay = new SimpleStringProperty(this, "districtDisplay");
    private final SimpleObjectProperty districtID = new SimpleObjectProperty(this, "districtID");
    private LookupData district;
    private final SimpleStringProperty countyDisplay = new SimpleStringProperty(this, "countyDisplay");
    private final SimpleObjectProperty countyID = new SimpleObjectProperty(this, "countyID");
    private County county;
    private final SimpleStringProperty subCountyDisplay = new SimpleStringProperty(this, "subCountyDisplay");
    private final SimpleObjectProperty subCountyID = new SimpleObjectProperty(this, "subCountyID");
    private SubCounty subCounty;
    private final SimpleStringProperty parishID = new SimpleStringProperty(this, "parishID");
    private final SimpleStringProperty parishName = new SimpleStringProperty(this, "parishName");

    public ParishDA() {
        createSearchColumns();
    }

    public ParishDA(String persistenceUnit) {
        super(persistenceUnit);
    }

    public ParishDA(Parish parish) {
        this.parish = parish;
        initialseProprties();
        createSearchColumns();
    }

    public ParishDA(String persistenceUnit, Parish parish) {
        super(persistenceUnit);
        this.parish = parish;
        initialseProprties();
        createSearchColumns();
    }

    public ParishDA(SubCounty subCounty, String parishID, String parishName) {
        this.parish = new Parish(getNextIdHelper(subCounty), subCounty, parishID, parishName);
        initialseProprties();
        createSearchColumns();
    }

    public ParishDA(String persistenceUnit, SubCounty subCounty, String parishID, String parishName) {
        super(persistenceUnit);
        this.parish = new Parish(getNextIdHelper(subCounty), subCounty, parishID, parishName);
        initialseProprties();
        createSearchColumns();
    }

    public int getIdHelper() {
        return idHelper.get();
    }

    public String getIdHelperDisplay() {
        return idHelperDisplay.get();
    }

    public void setIdHelper(int idHelper) {
        parish.setIdHelper(idHelper);
        this.idHelper.set(idHelper);
    }

    public LookupData getDistrict() {
        return district;
    }

    public Object getDistrictID() {
        return districtID.get();
    }

    public String getDistrictDisplay() {
        return districtDisplay.get();
    }

    public LookupDataDA getDistrictDA() {
        return this.district != null ? new LookupDataDA(this.district) : null;
    }

    public County getCounty() {
        return county;
    }

    public Object getCountyID() {
        return countyID.get();
    }

    public String getCountyDisplay() {
        return countyDisplay.get();
    }

    public CountyDA getCountyDA() {
        return this.county != null ? new CountyDA(this.county) : null;
    }

    public SubCounty getSubCounty() {
        return subCounty;
    }

    public Object getSubCountyID() {
        return subCountyID.get();
    }

    public String getSubCountyDisplay() {
        return subCountyDisplay.get();
    }

    public SubCountyDA getSubCountyDA() {
        return this.subCounty != null ? new SubCountyDA(this.subCounty) : null;
    }

    public void setSubCounty(SubCounty subCounty) {
        parish.setSubCounty(subCounty);
        this.subCounty = subCounty;
        this.subCountyID.set(subCounty.getId());
        this.subCountyDisplay.set(subCounty.getDisplayKey());
    }

    public String getParishID() {
        return parishID.get();
    }

    public void setParishID(String parishID) {
        parish.setParishID(parishID);
        this.parishID.set(parishID);
    }

    public String getParishName() {
        return parishName.get();
    }

    public void setParishName(String parishName) {
        parish.setParishName(parishName);
        this.parishName.set(parishName);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof ParishDA)) {
            return false;
        }

        ParishDA parishDA = (ParishDA) o;

        if (parishDA.getDBEntity() == null || this.getDBEntity() == null) {
            return false;
        }
        return this.getId().equals(parishDA.getId());
    }

    @Override
    public int hashCode() {
        return parish.getId().hashCode();
    }

    private void initialseProprties() {
        this.dBEntity = parish;
        this.idHelper.set(parish.getIdHelper());
        this.idHelperDisplay.set(formatInteger(parish.getIdHelper()));

        this.subCounty = parish.getSubCounty();
        if (this.subCounty != null) {
            this.subCountyID.set(subCounty.getId());
            this.subCountyDisplay.set(subCounty.getDisplayKey());
            this.county = subCounty.getCounty();
            if (this.county != null) {
                this.countyID.set(county.getId());
                this.countyDisplay.set(county.getDisplayKey());
                this.district = this.county.getDistrict();
                if (this.district != null) {
                    this.districtID.set(district.getId());
                    this.districtDisplay.set(district.getDisplayKey());
                }
            }
        }
        this.parishID.set(parish.getParishID());
        this.parishName.set(parish.getParishName());
        initCommonProprties();
    }

    private void createSearchColumns() {
        this.searchColumns.add(new SearchColumn("districtID", "District ID", this.districtID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("districtDisplay", "District", this.districtDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("countyID", "County ID", this.countyID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("countyDisplay", "County", this.countyDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("subCountyID", "Sub County ID", this.subCountyID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("subCountyDisplay", "Sub County", this.subCountyDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("parishID", "Parish ID", this.parishID.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("parishName", "Parish Name", this.parishName.get(), SearchDataTypes.STRING));
        this.searchColumns.addAll(this.getDefaultSearchColumns());
    }

    @Override
    public List<SearchColumn> getSearchColumns() {
        return this.searchColumns;
    }

    @Override
    public Object getId() {
        return this.parish.getId();
    }

    @Override
    public String getDisplayKey() {
        return this.parish.getDisplayKey();
    }

    public static List<ParishDA> getParishDAs(List<Parish> parishs) {
        List<ParishDA> list = new ArrayList<>();
        parishs.forEach((parish) -> {
            list.add(new ParishDA(parish));
        });
        return list;
    }

    public static List<Parish> getParishList(List<ParishDA> parishDAs) {
        List<Parish> parishs = new ArrayList<>();
        parishDAs.forEach(a -> parishs.add(a.parish));
        return parishs;
    }

    public boolean save() throws Exception {
        if (!isValid()) {
            return false;
        }
        return super.persist(this.parish);

    }

    public boolean update() throws Exception {
        if (!isValid()) {
            return false;
        }
        return super.merge(this.parish);

    }

    public boolean delete() {
        return super.remove(this.parish);

    }

    public Parish getParish(String parishID) {
        return (Parish) super.find(Parish.class, parishID);
    }

    public Parish getParish() {
        return this.parish;
    }

    public List<Parish> getParishs() {
        return super.find(Parish.class);
    }

    @Override
    public List<DBAccess> get() {
        List<DBAccess> list = new ArrayList<>();
        selectQuery(Parish.class).forEach(o -> list.add(new ParishDA((Parish) o)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public ParishDA get(String parishID) throws Exception {
        Parish oParish = getParish(parishID);
        if (oParish == null) {
            throw new Exception("No Record with id: " + parishID);
        }
        return new ParishDA(oParish);
    }

    public List<ParishDA> get(String columName, Object value) {
        List<ParishDA> list = new ArrayList<>();
        super.selectQuery(Parish.class, columName, value).forEach(da -> list.add(new ParishDA((Parish) da)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public List<ParishDA> toDaList(List<Parish> parishs) {
        List<ParishDA> parishDAs = new ArrayList<>();
        parishs.forEach(s -> parishDAs.add(new ParishDA(s)));
        return parishDAs;
    }

    public List<DBAccess> toDBAccessList(List<Parish> parishs) {
        List<DBAccess> dbAccesses = new ArrayList<>();
        parishs.forEach(s -> dbAccesses.add(new ParishDA(s)));
        return dbAccesses;
    }

    public int getMax(String columnName) {
        return super.getMax(Parish.class, columnName);
    }

    public int getMax(String columnName, String comparatorColumn, Object comparatorVaue) {
        return super.getMax(Parish.class, columnName, comparatorColumn, comparatorVaue);
    }

    public final int getNextIdHelper(SubCounty subCounty) {
        return this.getMax("idHelper", "subCounty", subCounty) + 1;
    }

    public String getNextParishID(int idHelper, String subCounty) {
        return new IDGeneratorDA().getToAppendString(Parish.class.getSimpleName(), subCounty, idHelper);
    }

    public List<Parish> getParishs(String columName, Object value) {
        return super.find(Parish.class, columName, value);
    }

    @Override
    public List<DBAccess> getRevisions() {
        try {

            List<Object[]> list = getEntityRevisions(Parish.class);
            List<DBAccess> dBAccesses = new ArrayList<>();
            list.forEach(e -> {

                ParishDA parishDA = new ParishDA((Parish) e[0]);
                parishDA.revisionEntity = (AppRevisionEntity) e[1];
                parishDA.oRevisionType = (RevisionType) e[2];
                parishDA.initRevProprties();
                parishDA.searchColumns.addAll(parishDA.getRevSearchColumns());
                dBAccesses.add(parishDA);

            });

            return dBAccesses;
        } catch (Exception e) {
            throw e;
        } finally {
            if (entityManager == null) {
                entityManager.close();
            }
        }

    }

    private boolean isValid() throws Exception {
        List<Parish> parishes = super.find(Parish.class, "subCounty", this.subCounty, "parishName", parish.getParishName());
        parishes.remove(this.parish);
        if (!parishes.isEmpty()) {
            throw new Exception("The parish with name " + parish.getParishName() + " and Sub County " + subCounty.getSubCountyName() + " already exists");
        }
        return true;
    }

    public List<Parish> getParishes(SubCounty subCounty) {
        return getParishs("subCounty", subCounty);
    }

}
