/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.common.dbaccess;

import com.saburi.common.entities.Parish;
import javafx.beans.property.*;
import java.util.ArrayList;
import java.util.List;
import javafx.util.Pair;
import com.saburi.common.utils.SearchColumn;
import com.saburi.common.utils.SearchColumn.SearchDataTypes;
import com.saburi.common.entities.SubCounty;

public class ParishDA extends DBAccess {

    private Parish parish;
    private SimpleIntegerProperty idHelper = new SimpleIntegerProperty(this, "idHelper");
    private SimpleStringProperty subCountyDisplay = new SimpleStringProperty(this, "subCountyDisplay");
    private SimpleObjectProperty subCountyID = new SimpleObjectProperty(this, "subCountyID");
    private SubCounty subCounty;
    private SimpleStringProperty parishID = new SimpleStringProperty(this, "parishID");
    private SimpleStringProperty parishName = new SimpleStringProperty(this, "parishName");

    public ParishDA() {
        createSearchColumns();
    }

    public ParishDA(String persistenceUnit) {
        super(persistenceUnit);
    }

    public ParishDA(Parish parish) {
        this.parish = parish;
        initialseProprties();
        createSearchColumns();
    }

    public ParishDA(String persistenceUnit, Parish parish) {
        super(persistenceUnit);
        this.parish = parish;
        initialseProprties();
        createSearchColumns();
    }

    public ParishDA(SubCounty subCounty, String parishID, String parishName) {
        this.parish = new Parish(getNextIdHelper(subCounty), subCounty, parishID, parishName);
        initialseProprties();
        createSearchColumns();
    }

    public ParishDA(String persistenceUnit, SubCounty subCounty, String parishID, String parishName) {
        super(persistenceUnit);
        this.parish = new Parish(getNextIdHelper(subCounty), subCounty, parishID, parishName);
        initialseProprties();
        createSearchColumns();
    }

    public int getIdHelper() {
        return idHelper.get();
    }

    public void setIdHelper(int idHelper) {
        parish.setIdHelper(idHelper);
        this.idHelper.set(idHelper);
    }

    public SubCounty getSubCounty() {
        return subCounty;
    }

    public Object getSubCountyID() {
        return subCountyID.get();
    }

    public String getSubCountyDisplay() {
        return subCountyDisplay.get();
    }

    public SubCountyDA getSubCountyDA() {
        if (this.subCounty == null) {
            return new SubCountyDA();
        } else {
            return new SubCountyDA(this.subCounty);
        }
    }

    public Pair<String, Object> getSubCountyPair() {
        if (this.getSubCountyDA() == null) {
            return new Pair<>("", "");
        } else {
            return this.getSubCountyDA().keyValuePair();
        }
    }

    public void setSubCounty(SubCounty subCounty) {
        parish.setSubCounty(subCounty);
        this.subCounty = subCounty;
    }

    public String getParishID() {
        return parishID.get();
    }

    public void setParishID(String parishID) {
        parish.setParishID(parishID);
        this.parishID.set(parishID);
    }

    public String getParishName() {
        return parishName.get();
    }

    public void setParishName(String parishName) {
        parish.setParishName(parishName);
        this.parishName.set(parishName);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof ParishDA)) {
            return false;
        }

        ParishDA parishDA = (ParishDA) o;

        if (parishDA.getDBEntity() == null || this.getDBEntity() == null) {
            return false;
        }
        return this.getId().equals(parishDA.getId());
    }

    @Override
    public int hashCode() {
        return parish.getId().hashCode();
    }

    private void initialseProprties() {
        this.dBEntity = parish;
        this.idHelper = new SimpleIntegerProperty(parish.getIdHelper());
        this.subCounty = parish.getSubCounty();
        this.subCountyID = new SimpleObjectProperty(subCounty.getId());
        this.subCountyDisplay = new SimpleStringProperty(subCounty.getDisplayKey());
        this.parishID = new SimpleStringProperty(parish.getParishID());
        this.parishName = new SimpleStringProperty(parish.getParishName());
        initCommonProprties();
    }

    private void createSearchColumns() {
        this.searchColumns.add(new SearchColumn("subCountyID", "Sub County ID", this.subCountyID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal));
        this.searchColumns.add(new SearchColumn("subCountyDisplay", "Sub County", this.subCountyDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("parishID", "Parish ID", this.parishID.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("parishName", "Parish Name", this.parishName.get(), SearchDataTypes.STRING));
        this.searchColumns.addAll(defaultSearchColumns);
    }

    @Override
    public List<SearchColumn> getSearchColumns() {
        return this.searchColumns;
    }

    @Override
    public Object getId() {
        return this.parish.getId();
    }

    @Override
    public String getDisplayKey() {
        return this.parish.getDisplayKey();
    }

    public static List<ParishDA> getParishDAs(List<Parish> parishs) {
        List<ParishDA> list = new ArrayList<>();
        parishs.forEach((parish) -> {
            list.add(new ParishDA(parish));
        });
        return list;
    }

    public static List<Parish> getParishList(List<ParishDA> parishDAs) {
        List<Parish> parishs = new ArrayList<>();
        parishDAs.forEach(a -> parishs.add(a.parish));
        return parishs;
    }

    public boolean save() throws Exception {
        return super.persist(this.parish);

    }

    public boolean update() throws Exception {
        return super.merge(this.parish);

    }

    public boolean delete() {
        return super.remove(this.parish);

    }

    public Parish getParish(String parishID) {
        return (Parish) super.find(Parish.class, parishID);
    }

    public List<Parish> getParishs() {
        return super.find(Parish.class);
    }

    @Override
    public List<DBAccess> get() {
        List<DBAccess> list = new ArrayList<>();
        List<Parish> datas = super.find(Parish.class);
        datas.forEach((data) -> {
            list.add(new ParishDA(data));
        });
        return list;
    }

    public ParishDA get(String parishID) throws Exception {
        Parish oParish = (Parish) super.find(Parish.class, parishID);
        if (oParish == null) {
            throw new Exception("No Record with id: " + parishID);
        }
        return new ParishDA(oParish);
    }

    public List<ParishDA> get(String columName, Object value) {
        List<Parish> data = super.find(Parish.class, columName, value);
        List<ParishDA> list = new ArrayList<>();
        data.forEach(da -> list.add(new ParishDA(da)));
        return list;
    }

    public List<Pair<String, Object>> keyValuePairs() {
        List<Pair<String, Object>> pairs = new ArrayList<>();
        this.get().forEach((t) -> pairs.add(t.keyValuePair()));
        return pairs;
    }

    public List<Pair<String, Object>> keyValuePairs(String columName, Object value) {
        List<Pair<String, Object>> pairs = new ArrayList<>();
        this.get(columName, value).forEach((t) -> pairs.add(t.keyValuePair()));
        return pairs;
    }

    public int getMax(String columnName) {
        return super.getMax(Parish.class, columnName);
    }

    public int getMax(String columnName, String comparatorColumn, Object comparatorVaue) {
        return super.getMax(Parish.class, columnName, comparatorColumn, comparatorVaue);
    }

    public final int getNextIdHelper(SubCounty subCounty) {
        return this.getMax("idHelper", "subCounty", subCounty) + 1;
    }

    public String getNextParishID(int idHelper, String subCounty) {
        return new IDGeneratorDA().getToAppendString(Parish.class.getSimpleName(), subCounty, idHelper);
    }

    public List<Parish> getParishs(String columName, Object value) {
        return super.find(Parish.class, columName, value);
    }

}
