/*
 Sam Buriima
generated by Saburi Tools
*/
package com.saburi.common.dbaccess;

import com.saburi.common.entities.Requisition;import javafx.beans.property.*;
import java.util.ArrayList;
import com.saburi.common.entities.AppRevisionEntity;
import java.util.List;
import com.saburi.common.utils.SearchColumn;
import com.saburi.common.utils.SearchColumn.SearchDataTypes;
import org.hibernate.envers.RevisionType;
import java.time.LocalDate;
import static com.saburi.common.utils.Utilities.formatDate;
import com.saburi.common.utils.CommonEnums.OpenStatus;
import com.saburi.common.entities.LookupData;


public class RequisitionDA  extends DBAccess{

private Requisition requisition= new Requisition();
private final SimpleIntegerProperty idHelper =  new SimpleIntegerProperty(this,"idHelper");
private final SimpleStringProperty requisitionID =  new SimpleStringProperty(this,"requisitionID");
private final SimpleObjectProperty requistionDate =  new SimpleObjectProperty(this,"requistionDate");
private final SimpleStringProperty requistionDateDisplay =  new SimpleStringProperty(this,"requistionDateDisplay");
private final SimpleObjectProperty status =  new SimpleObjectProperty(this,"status");
private final SimpleStringProperty itemGroupDisplay =  new SimpleStringProperty(this,"itemGroupDisplay");
private final SimpleObjectProperty itemGroupID =  new SimpleObjectProperty(this,"itemGroupID");
private LookupData itemGroup;

public  RequisitionDA(){
 createSearchColumns();
}
public  RequisitionDA(String persistenceUnit){
 super(persistenceUnit);
}
public  RequisitionDA(Requisition requisition){
 this.requisition = requisition;
initialseProprties();
createSearchColumns();
}
public  RequisitionDA(String persistenceUnit, Requisition requisition){
 super(persistenceUnit);
this.requisition = requisition;
initialseProprties();
createSearchColumns();
}
public  RequisitionDA(String requisitionID, LocalDate requistionDate, OpenStatus status, LookupData itemGroup){
 this.requisition = new Requisition(getNextIdHelper(), requisitionID, requistionDate, status, itemGroup);initialseProprties();
createSearchColumns();
}
public  RequisitionDA(String persistenceUnit, String requisitionID, LocalDate requistionDate, OpenStatus status, LookupData itemGroup){
 super(persistenceUnit);
this.requisition = new Requisition(getNextIdHelper(), requisitionID, requistionDate, status, itemGroup);initialseProprties();
createSearchColumns();
}

public int getIdHelper(){
 return idHelper.get();
}
public void setIdHelper(int idHelper){
 requisition.setIdHelper(idHelper);
this.idHelper.set(idHelper);
}
public String getRequisitionID(){
 return requisitionID.get();
}
public void setRequisitionID(String requisitionID){
 requisition.setRequisitionID(requisitionID);
this.requisitionID.set(requisitionID);
}
public Object getRequistionDate(){
 return requistionDate.get();
}
public String getRequistionDateDisplay(){
 return requistionDateDisplay.get();
}
public void setRequistionDate(LocalDate requistionDate){
 requisition.setRequistionDate(requistionDate);
this.requistionDate.set(requistionDate);
}
public Object getStatus(){
 return status.get();
}
public void setStatus(OpenStatus status){
 requisition.setStatus(status);
this.status.set(status);
}
public LookupData getItemGroup(){
 return itemGroup;
}
public Object getItemGroupID(){
 return itemGroupID.get();
}
public String getItemGroupDisplay(){
 return itemGroupDisplay.get();
}
public LookupDataDA getItemGroupDA(){
 return this.itemGroup!=null? new LookupDataDA(this.itemGroup):null;
}
public void setItemGroup(LookupData itemGroup){
 requisition.setItemGroup(itemGroup);
this.itemGroup = itemGroup;this.itemGroupID.set(itemGroup.getId());
        this.itemGroupDisplay.set(itemGroup.getDisplayKey());
}

         @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof RequisitionDA)) {
            return false;
        }
        
        RequisitionDA requisitionDA = (RequisitionDA) o;
        
        if(requisitionDA.getDBEntity()== null||this.getDBEntity() == null){
            return false;
        }
        return this.getId().equals(requisitionDA.getId());    } @Override
            public int hashCode
            
                () {
        return requisition.getId().hashCode();
            }private void initialseProprties(){
 this.dBEntity = requisition;
this.idHelper.set(requisition. getIdHelper());
this.requisitionID.set(requisition. getRequisitionID());
this.requistionDate.set(requisition. getRequistionDate());
this.requistionDateDisplay.set(formatDate(requisition. getRequistionDate()));
this.status.set(requisition. getStatus());
this.itemGroup= requisition. getItemGroup();
if(this.itemGroup!= null){this.itemGroupID.set(itemGroup.getId());
this.itemGroupDisplay.set(itemGroup.getDisplayKey());
}
initCommonProprties();
}
private void createSearchColumns(){
 this.searchColumns.add(new SearchColumn("requisitionID", "Requistion ID", this.requisitionID.get(), SearchDataTypes.STRING));
this.searchColumns.add(new SearchColumn("requistionDate", "Requisition Date", this.requistionDate.get(), SearchDataTypes.STRING));
this.searchColumns.add(new SearchColumn("status", "Status", this.status.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal));
this.searchColumns.add(new SearchColumn("itemGroupID", "Item Group ID", this.itemGroupID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal,false));
this.searchColumns.add(new SearchColumn("itemGroupDisplay", "Item Group", this.itemGroupDisplay.get(), SearchDataTypes.STRING));
this.searchColumns.addAll(this.getDefaultSearchColumns());
}
 @Override
    public List<SearchColumn> getSearchColumns() {
       return this.searchColumns;
    }
 @Override
    public Object getId() {
        return this.requisition.getId();
    }@Override
    public String getDisplayKey() {
        return this.requisition.getDisplayKey();
    } public static List<RequisitionDA> getRequisitionDAs(List<Requisition> requisitions) {
        List<RequisitionDA> list = new ArrayList<>();
        requisitions.forEach((requisition) -> {
            list.add(new RequisitionDA(requisition));
        });
        return list;
    } public static List<Requisition> getRequisitionList(List<RequisitionDA> requisitionDAs){
       List<Requisition> requisitions = new ArrayList<>();
       requisitionDAs.forEach(a->requisitions.add(a.requisition));
       return requisitions;
    }public boolean save() throws Exception{
 return super.persist(this.requisition);

}
 public boolean update() throws Exception{
return super.merge(this.requisition);

}
 public boolean delete() {
return super.remove(this.requisition);

}
public Requisition getRequisition(String requisitionID){
 return (Requisition) super.find(Requisition.class, requisitionID);
}
public Requisition getRequisition(){
        return this.requisition;
    }public List<Requisition> getRequisitions() {
return super.find(Requisition.class);
} @Override
    public List<DBAccess> get() {
        List<DBAccess> list = new ArrayList<>();
        selectQuery(Requisition.class).forEach(o -> list.add(new RequisitionDA((Requisition) o)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }public RequisitionDA get(String requisitionID) throws Exception {
       Requisition oRequisition = getRequisition(requisitionID);
       if(oRequisition == null) throw new Exception("No Record with id: "+requisitionID);
        return new RequisitionDA(oRequisition);
    }
 public List<RequisitionDA> get(String columName, Object value) {
        List<RequisitionDA> list = new ArrayList<>();
        super.selectQuery(Requisition.class, columName, value).forEach(da -> list.add(new RequisitionDA((Requisition) da)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }public List<RequisitionDA> toDaList(List<Requisition> requisitions) {
        List<RequisitionDA> requisitionDAs = new ArrayList<>();
        requisitions.forEach(s -> requisitionDAs.add(new RequisitionDA(s)));
        return requisitionDAs;
    }public List<DBAccess> toDBAccessList(List<Requisition> requisitions) {
        List<DBAccess> dbAccesses = new ArrayList<>();
        requisitions.forEach(s -> dbAccesses.add(new RequisitionDA(s)));
        return dbAccesses;
    } public int getMax(String columnName) {
return super.getMax(Requisition.class, columnName);
}
public int getMax(String columnName, String comparatorColumn, Object comparatorVaue) {
        return super.getMax(Requisition.class, columnName, comparatorColumn, comparatorVaue);
    }
public final int getNextIdHelper() {
        return this.getMax("idHelper") + 1;
    }
public String getNextRequisitionID(int idHelper ) {
        return new IDGeneratorDA().getToAppendString(Requisition.class.getSimpleName(), idHelper);
    }
public List<Requisition> getRequisitions(String columName, Object value) {
        return  super.find(Requisition.class, columName, value);}
 @Override
    public List<DBAccess> getRevisions() {
        try {

            List<Object[]> list = getEntityRevisions(Requisition.class);
            List<DBAccess> dBAccesses = new ArrayList<>();
            list.forEach(e -> {

                RequisitionDA requisitionDA = new RequisitionDA((Requisition) e[0]);
                requisitionDA.revisionEntity = (AppRevisionEntity) e[1];
                requisitionDA.oRevisionType = (RevisionType) e[2];
                requisitionDA.initRevProprties();
                requisitionDA.searchColumns.addAll(requisitionDA.getRevSearchColumns());
                dBAccesses.add(requisitionDA);

            });

            return dBAccesses;
        } catch (Exception e) {
            throw e;
        } finally {
            if (entityManager == null) {
                entityManager.close();
            }
        }

    }


}
