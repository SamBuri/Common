/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.common.dbaccess;

import com.saburi.common.entities.SearchColumn;
import javafx.beans.property.*;
import java.util.ArrayList;
import java.util.List;
import javafx.util.Pair;

import com.saburi.common.utils.SearchColumn.SearchDataTypes;
import com.saburi.common.entities.AccessObject;


public class SearchColumnDA extends DBAccess {

    private SearchColumn searchColumn;
    private SimpleStringProperty columnID = new SimpleStringProperty(this, "columnID");
    private SimpleStringProperty accessObjectDisplay = new SimpleStringProperty(this, "accessObjectDisplay");
    private SimpleObjectProperty accessObjectID = new SimpleObjectProperty(this, "accessObjectID");
    private AccessObject accessObject;
    private SimpleStringProperty name = new SimpleStringProperty(this, "name");
    private SimpleStringProperty displayValue = new SimpleStringProperty(this, "displayValue");
    private SimpleObjectProperty columnValue = new SimpleObjectProperty(this, "columnValue");
    private SimpleObjectProperty dataType = new SimpleObjectProperty(this, "dataType");
    private SimpleBooleanProperty hidden = new SimpleBooleanProperty(this, "hidden");

    public SearchColumnDA() {

    }

    public SearchColumnDA(String persistenceUnit) {
        super(persistenceUnit);
    }

    public SearchColumnDA(SearchColumn searchColumn) {
        this.searchColumn = searchColumn;
        initialseProprties();
        createSearchColumns();
    }

    public SearchColumnDA(String persistenceUnit, SearchColumn searchColumn) {
        super(persistenceUnit);
        this.searchColumn = searchColumn;
        initialseProprties();
        createSearchColumns();
    }

    public SearchColumnDA(String columnID, String accessObjectID, String name, String displayValue, String value, SearchDataTypes dataType, boolean hidden) {
        this.searchColumn = new SearchColumn(columnID, (AccessObject) super.find(AccessObject.class, accessObjectID), name, displayValue, value, dataType, hidden);
        initialseProprties();
        createSearchColumns();
    }

    public SearchColumnDA(String persistenceUnit, String columnID, String accessObjectID, String name, String displayValue, String value, SearchDataTypes dataType, boolean hidden) {
        super(persistenceUnit);
        this.searchColumn = new SearchColumn(columnID, (AccessObject) super.find(AccessObject.class, accessObjectID), name, displayValue, value, dataType, hidden);
        initialseProprties();
        createSearchColumns();
    }

    public String getColumnID() {
        return columnID.get();
    }

    public void setColumnID(String columnID) {
        searchColumn.setColumnID(columnID);
        this.columnID.set(columnID);
    }

    public AccessObject getAccessObject() {
        return accessObject;
    }

    public Object getAccessObjectID() {
        return accessObjectID.get();
    }

    public String getAccessObjectDisplay() {
        return accessObjectDisplay.get();
    }

    public AccessObjectDA getAccessObjectDA() {
        if (this.accessObject == null) {
            return new AccessObjectDA();
        } else {
            return new AccessObjectDA(this.accessObject);
        }
    }

    public Pair<String, Object> getAccessObjectPair() {
        if (this.getAccessObjectDA() == null) {
            return new Pair<>("", "");
        } else {
            return this.getAccessObjectDA().keyValuePair();
        }
    }

    public void setAccessObject(AccessObject accessObject) {
        searchColumn.setAccessObject(accessObject);
        this.accessObject = accessObject;
    }

    public String getName() {
        return name.get();
    }

    public void setName(String name) {
        searchColumn.setName(name);
        this.name.set(name);
    }

    public String getDisplayValue() {
        return displayValue.get();
    }

    public void setDisplayValue(String displayValue) {
        searchColumn.setDisplayValue(displayValue);
        this.displayValue.set(displayValue);
    }

    public Object getCcolumnValue() {
        return columnValue.get();
    }

    public void setColumnValue(String value) {
        searchColumn.setColumnValue(value);
        this.columnValue.set(value);
    }

    public Object getDataType() {
        return dataType.get();
    }

    public void setDataType(SearchDataTypes dataType) {
        searchColumn.setDataType(dataType);
        this.dataType.set(dataType);
    }

    public boolean isHidden() {
        return hidden.get();
    }

    public void setHidden(boolean hidden) {
        searchColumn.setHidden(hidden);
        this.hidden.set(hidden);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof SearchColumnDA)) {
            return false;
        }

        SearchColumnDA searchColumnDA = (SearchColumnDA) o;

        if (searchColumnDA.getDBEntity() == null || this.getDBEntity() == null) {
            return false;
        }
        return this.getId().equals(searchColumnDA.getId());
    }

    @Override
    public int hashCode() {
        return searchColumn.getId().hashCode();
    }

    private void initialseProprties() {
        this.dBEntity = searchColumn;
        this.columnID = new SimpleStringProperty(searchColumn.getColumnID());
        this.accessObject = searchColumn.getAccessObject();
        this.accessObjectID = new SimpleObjectProperty(accessObject.getId());
        this.accessObjectDisplay = new SimpleStringProperty(accessObject.getDisplayKey());
        this.name = new SimpleStringProperty(searchColumn.getName());
        this.displayValue = new SimpleStringProperty(searchColumn.getDisplayValue());
        this.columnValue = new SimpleObjectProperty(searchColumn.getColumnValue());
        this.dataType = new SimpleObjectProperty(searchColumn.getDataType());
        this.hidden = new SimpleBooleanProperty(searchColumn.isHidden());
        initCommonProprties();
    }

    private void createSearchColumns() {
        

    }

    

    @Override
    public Object getId() {
        return this.searchColumn.getId();
    }

    @Override
    public String getDisplayKey() {
        return this.searchColumn.getDisplayKey();
    }

    public Pair<String, Object> keyValuePair() {
        return new Pair(this.searchColumn.getDisplayKey(), this.searchColumn.getId());
    }

    public static List<SearchColumnDA> getSearchColumnDAs(List<SearchColumn> searchColumns) {
        List<SearchColumnDA> list = new ArrayList<>();
        searchColumns.forEach((searchColumn) -> {
            list.add(new SearchColumnDA(searchColumn));
        });
        return list;
    }

    public static List<SearchColumn> getSearchColumnList(List<SearchColumnDA> searchColumnDAs) {
        List<SearchColumn> searchColumns = new ArrayList<>();
        searchColumnDAs.forEach(a -> searchColumns.add(a.searchColumn));
        return searchColumns;
    }

    public boolean save() throws Exception {
        return super.persist(this.searchColumn);

    }

    public boolean update() throws Exception {
        return super.merge(this.searchColumn);

    }

    public boolean delete() {
        return super.remove(this.searchColumn);

    }

    public SearchColumn getSearchColumn(String columnID) {
        return (SearchColumn) super.find(SearchColumn.class, columnID);
    }

    public List<SearchColumn> getSearchColumns1() {
        return super.find(SearchColumn.class);
    }

    @Override
    public List<DBAccess> get() {
        List<DBAccess> list = new ArrayList<>();
        List<SearchColumn> datas = super.find(SearchColumn.class);
        datas.forEach((data) -> {
            list.add(new SearchColumnDA(data));
        });
        return list;
    }

    public SearchColumnDA get(String columnID) throws Exception {
        SearchColumn oSearchColumn = (SearchColumn) super.find(SearchColumn.class, columnID);
        if (oSearchColumn == null) {
            throw new Exception("No Record with id: " + columnID);
        }
        return new SearchColumnDA(oSearchColumn);
    }

    public List<SearchColumnDA> get(String columName, Object value) {
        List<SearchColumn> data = super.find(SearchColumn.class, columName, value);
        List<SearchColumnDA> list = new ArrayList<>();
        data.forEach(da -> list.add(new SearchColumnDA(da)));
        return list;
    }

    public List<Pair<String, Object>> keyValuePairs() {
        List<Pair<String, Object>> pairs = new ArrayList<>();
        this.get().forEach((t) -> pairs.add(t.keyValuePair()));
        return pairs;
    }

    public List<Pair<String, Object>> keyValuePairs(String columName, Object value) {
        List<Pair<String, Object>> pairs = new ArrayList<>();
        this.get(columName, value).forEach((t) -> pairs.add(t.keyValuePair()));
        return pairs;
    }

    public int getMax(String columnName) {
        return super.getMax(SearchColumn.class, columnName);
    }

    public int getMax(String columnName, String comparatorColumn, Object comparatorVaue) {
        return super.getMax(SearchColumn.class, columnName, comparatorColumn, comparatorVaue);
    }

    public List<SearchColumn> getSearchColumns(String columName, Object value) {
        return super.find(SearchColumn.class, columName, value);
    }
    
    public List<SearchColumnDA> getSearchColumnsByObjectName(String value){
        return getSearchColumnDAs(getSearchColumns("AccessObject", super.find(AccessObject.class,value)));
    }

}
