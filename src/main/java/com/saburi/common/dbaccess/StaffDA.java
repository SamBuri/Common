/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.common.dbaccess;

import com.saburi.common.entities.Staff;
import javafx.beans.property.*;
import java.util.ArrayList;
import com.saburi.common.entities.AppRevisionEntity;
import java.util.List;
import com.saburi.common.utils.SearchColumn;
import com.saburi.common.utils.SearchColumn.SearchDataTypes;
import org.hibernate.envers.RevisionType;
import javafx.scene.image.ImageView;
import com.saburi.common.utils.FXUIUtils;
import com.saburi.common.utils.CommonEnums.Gender;
import java.time.LocalDate;
import static com.saburi.common.utils.Utilities.formatDate;
import com.saburi.common.entities.LookupData;
import com.saburi.common.entities.Village;

public class StaffDA extends DBAccess {

    private Staff staff = new Staff();
    private final SimpleIntegerProperty idHelper = new SimpleIntegerProperty(this, "idHelper");
    private final SimpleStringProperty staffID = new SimpleStringProperty(this, "staffID");
    private byte[] photo;
    private ImageView imvPhoto = new ImageView();
    private final SimpleStringProperty firstName = new SimpleStringProperty(this, "firstName");
    private final SimpleStringProperty lastName = new SimpleStringProperty(this, "lastName");
    private final SimpleStringProperty otherNames = new SimpleStringProperty(this, "otherNames");
    private final SimpleStringProperty initials = new SimpleStringProperty(this, "initials");
    private final SimpleObjectProperty gender = new SimpleObjectProperty(this, "gender");
    private final SimpleObjectProperty birthDate = new SimpleObjectProperty(this, "birthDate");
    private final SimpleStringProperty birthDateDisplay = new SimpleStringProperty(this, "birthDateDisplay");
    private final SimpleObjectProperty joinDate = new SimpleObjectProperty(this, "joinDate");
    private final SimpleStringProperty joinDateDisplay = new SimpleStringProperty(this, "joinDateDisplay");
    private final SimpleStringProperty nationalID = new SimpleStringProperty(this, "nationalID");
    private final SimpleStringProperty countryDisplay = new SimpleStringProperty(this, "countryDisplay");
    private final SimpleObjectProperty countryID = new SimpleObjectProperty(this, "countryID");
    private LookupData country;
    private final SimpleStringProperty villageDisplay = new SimpleStringProperty(this, "villageDisplay");
    private final SimpleObjectProperty villageID = new SimpleObjectProperty(this, "villageID");
    private Village village;
    private final SimpleStringProperty staffTitleDisplay = new SimpleStringProperty(this, "staffTitleDisplay");
    private final SimpleObjectProperty staffTitleID = new SimpleObjectProperty(this, "staffTitleID");
    private LookupData staffTitle;
    private final SimpleStringProperty qualificationDisplay = new SimpleStringProperty(this, "qualificationDisplay");
    private final SimpleObjectProperty qualificationID = new SimpleObjectProperty(this, "qualificationID");
    private LookupData qualification;
    private final SimpleStringProperty departmentDisplay = new SimpleStringProperty(this, "departmentDisplay");
    private final SimpleObjectProperty departmentID = new SimpleObjectProperty(this, "departmentID");
    private LookupData department;
    private final SimpleStringProperty phoneNo = new SimpleStringProperty(this, "phoneNo");
    private final SimpleStringProperty emailAddress = new SimpleStringProperty(this, "emailAddress");
    private final SimpleStringProperty physicalAddress = new SimpleStringProperty(this, "physicalAddress");
    private final SimpleStringProperty specialSkills = new SimpleStringProperty(this, "specialSkills");
    private final SimpleBooleanProperty active = new SimpleBooleanProperty(this, "active");

    public StaffDA() {
        createSearchColumns();
    }

    public StaffDA(String persistenceUnit) {
        super(persistenceUnit);
    }

    public StaffDA(Staff staff) {
        this.staff = staff;
        initialseProprties();
        createSearchColumns();
    }

    public StaffDA(String persistenceUnit, Staff staff) {
        super(persistenceUnit);
        this.staff = staff;
        initialseProprties();
        createSearchColumns();
    }

    public StaffDA(String staffID, byte[] photo, String firstName, String lastName, String otherNames, String initials, Gender gender, LocalDate birthDate, LocalDate joinDate, String nationalID, LookupData country, Village village, LookupData staffTitle, LookupData qualification, LookupData department, String phoneNo, String emailAddress, String physicalAddress, String specialSkills, boolean active) {
        this.staff = new Staff(getNextIdHelper(), staffID, photo, firstName, lastName, otherNames, initials, gender, birthDate, joinDate, nationalID, country, village, staffTitle, qualification, department, phoneNo, emailAddress, physicalAddress, specialSkills, active);
        initialseProprties();
        createSearchColumns();
    }

    public StaffDA(String persistenceUnit, String staffID, byte[] photo, String firstName, String lastName, String otherNames, String initials, Gender gender, LocalDate birthDate, LocalDate joinDate, String nationalID, LookupData country, Village village, LookupData staffTitle, LookupData qualification, LookupData department, String phoneNo, String emailAddress, String physicalAddress, String specialSkills, boolean active) {
        super(persistenceUnit);
        this.staff = new Staff(getNextIdHelper(), staffID, photo, firstName, lastName, otherNames, initials, gender, birthDate, joinDate, nationalID, country, village, staffTitle, qualification, department, phoneNo, emailAddress, physicalAddress, specialSkills, active);
        initialseProprties();
        createSearchColumns();
    }

    public int getIdHelper() {
        return idHelper.get();
    }

    public void setIdHelper(int idHelper) {
        staff.setIdHelper(idHelper);
        this.idHelper.set(idHelper);
    }

    public String getStaffID() {
        return staffID.get();
    }

    public void setStaffID(String staffID) {
        staff.setStaffID(staffID);
        this.staffID.set(staffID);
    }

    public byte[] getPhoto() {
        return photo;
    }

    public ImageView getImvPhoto() {
        return imvPhoto;
    }

    public void setPhoto(byte[] photo) {
        staff.setPhoto(photo);
        this.photo = photo;
    }

    public void setImvPhoto(ImageView imvPhoto) {
        this.imvPhoto = imvPhoto;
    }

    public String getFirstName() {
        return firstName.get();
    }

    public void setFirstName(String firstName) {
        staff.setFirstName(firstName);
        this.firstName.set(firstName);
    }

    public String getLastName() {
        return lastName.get();
    }

    public void setLastName(String lastName) {
        staff.setLastName(lastName);
        this.lastName.set(lastName);
    }

    public String getOtherNames() {
        return otherNames.get();
    }

    public void setOtherNames(String otherNames) {
        staff.setOtherNames(otherNames);
        this.otherNames.set(otherNames);
    }

    public String getInitials() {
        return initials.get();
    }

    public void setInitials(String initials) {
        staff.setInitials(initials);
        this.initials.set(initials);
    }

    public Object getGender() {
        return gender.get();
    }

    public void setGender(Gender gender) {
        staff.setGender(gender);
        this.gender.set(gender);
    }

    public Object getBirthDate() {
        return birthDate.get();
    }

    public String getBirthDateDisplay() {
        return birthDateDisplay.get();
    }

    public void setBirthDate(LocalDate birthDate) {
        staff.setBirthDate(birthDate);
        this.birthDate.set(birthDate);
    }

    public Object getJoinDate() {
        return joinDate.get();
    }

    public String getJoinDateDisplay() {
        return joinDateDisplay.get();
    }

    public void setJoinDate(LocalDate joinDate) {
        staff.setJoinDate(joinDate);
        this.joinDate.set(joinDate);
    }

    public String getNationalID() {
        return nationalID.get();
    }

    public void setNationalID(String nationalID) {
        staff.setNationalID(nationalID);
        this.nationalID.set(nationalID);
    }

    public LookupData getCountry() {
        return country;
    }

    public Object getCountryID() {
        return countryID.get();
    }

    public String getCountryDisplay() {
        return countryDisplay.get();
    }

    public LookupDataDA getCountryDA() {
        return this.country != null ? new LookupDataDA(this.country) : null;
    }

    public void setCountry(LookupData country) {
        staff.setCountry(country);
        this.country = country;
        this.countryID.set(country.getId());
        this.countryDisplay.set(country.getDisplayKey());
    }

    public Village getVillage() {
        return village;
    }

    public Object getVillageID() {
        return villageID.get();
    }

    public String getVillageDisplay() {
        return villageDisplay.get();
    }

    public VillageDA getVillageDA() {
        return this.village != null ? new VillageDA(this.village) : null;
    }

    public void setVillage(Village village) {
        staff.setVillage(village);
        this.village = village;
        this.villageID.set(village.getId());
        this.villageDisplay.set(village.getDisplayKey());
    }

    public LookupData getStaffTitle() {
        return staffTitle;
    }

    public Object getStaffTitleID() {
        return staffTitleID.get();
    }

    public String getStaffTitleDisplay() {
        return staffTitleDisplay.get();
    }

    public LookupDataDA getStaffTitleDA() {
        return this.staffTitle != null ? new LookupDataDA(this.staffTitle) : null;
    }

    public void setStaffTitle(LookupData staffTitle) {
        staff.setStaffTitle(staffTitle);
        this.staffTitle = staffTitle;
        this.staffTitleID.set(staffTitle.getId());
        this.staffTitleDisplay.set(staffTitle.getDisplayKey());
    }

    public LookupData getQualification() {
        return qualification;
    }

    public Object getQualificationID() {
        return qualificationID.get();
    }

    public String getQualificationDisplay() {
        return qualificationDisplay.get();
    }

    public LookupDataDA getQualificationDA() {
        return this.qualification != null ? new LookupDataDA(this.qualification) : null;
    }

    public void setQualification(LookupData qualification) {
        staff.setQualification(qualification);
        this.qualification = qualification;
        this.qualificationID.set(qualification.getId());
        this.qualificationDisplay.set(qualification.getDisplayKey());
    }

    public LookupData getDepartment() {
        return department;
    }

    public Object getDepartmentID() {
        return departmentID.get();
    }

    public String getDepartmentDisplay() {
        return departmentDisplay.get();
    }

    public LookupDataDA getDepartmentDA() {
        return this.department != null ? new LookupDataDA(this.department) : null;
    }

    public void setDepartment(LookupData department) {
        staff.setDepartment(department);
        this.department = department;
        this.departmentID.set(department.getId());
        this.departmentDisplay.set(department.getDisplayKey());
    }

    public String getPhoneNo() {
        return phoneNo.get();
    }

    public void setPhoneNo(String phoneNo) {
        staff.setPhoneNo(phoneNo);
        this.phoneNo.set(phoneNo);
    }

    public String getEmailAddress() {
        return emailAddress.get();
    }

    public void setEmailAddress(String emailAddress) {
        staff.setEmailAddress(emailAddress);
        this.emailAddress.set(emailAddress);
    }

    public String getPhysicalAddress() {
        return physicalAddress.get();
    }

    public void setPhysicalAddress(String physicalAddress) {
        staff.setPhysicalAddress(physicalAddress);
        this.physicalAddress.set(physicalAddress);
    }

    public String getSpecialSkills() {
        return specialSkills.get();
    }

    public void setSpecialSkills(String specialSkills) {
        staff.setSpecialSkills(specialSkills);
        this.specialSkills.set(specialSkills);
    }

    public boolean isActive() {
        return active.get();
    }

    public void setActive(boolean active) {
        staff.setActive(active);
        this.active.set(active);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof StaffDA)) {
            return false;
        }

        StaffDA staffDA = (StaffDA) o;

        if (staffDA.getDBEntity() == null || this.getDBEntity() == null) {
            return false;
        }
        return this.getId().equals(staffDA.getId());
    }

    @Override
    public int hashCode() {
        return staff.getId().hashCode();
    }

    private void initialseProprties() {
        this.dBEntity = staff;
        this.idHelper.set(staff.getIdHelper());
        this.staffID.set(staff.getStaffID());
        this.photo = staff.getPhoto();
        this.imvPhoto = FXUIUtils.setTableSizeImage(imvPhoto, staff.getPhoto());
        this.firstName.set(staff.getFirstName());
        this.lastName.set(staff.getLastName());
        this.otherNames.set(staff.getOtherNames());
        this.initials.set(staff.getInitials());
        this.gender.set(staff.getGender());
        this.birthDate.set(staff.getBirthDate());
        this.birthDateDisplay.set(formatDate(staff.getBirthDate()));
        this.joinDate.set(staff.getJoinDate());
        this.joinDateDisplay.set(formatDate(staff.getJoinDate()));
        this.nationalID.set(staff.getNationalID());
        this.country = staff.getCountry();
        if (this.country != null) {
            this.countryID.set(country.getId());
            this.countryDisplay.set(country.getDisplayKey());
        }
        this.village = staff.getVillage();
        if (this.village != null) {
            this.villageID.set(village.getId());
            this.villageDisplay.set(village.getDisplayKey());
        }
        this.staffTitle = staff.getStaffTitle();
        if (this.staffTitle != null) {
            this.staffTitleID.set(staffTitle.getId());
            this.staffTitleDisplay.set(staffTitle.getDisplayKey());
        }
        this.qualification = staff.getQualification();
        if (this.qualification != null) {
            this.qualificationID.set(qualification.getId());
            this.qualificationDisplay.set(qualification.getDisplayKey());
        }
        this.department = staff.getDepartment();
        if (this.department != null) {
            this.departmentID.set(department.getId());
            this.departmentDisplay.set(department.getDisplayKey());
        }
        this.phoneNo.set(staff.getPhoneNo());
        this.emailAddress.set(staff.getEmailAddress());
        this.physicalAddress.set(staff.getPhysicalAddress());
        this.specialSkills.set(staff.getSpecialSkills());
        this.active.set(staff.isActive());
        initCommonProprties();
    }

    private void createSearchColumns() {
        this.searchColumns.add(new SearchColumn("staffID", "Staff ID", this.staffID.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("firstName", "First Name", this.firstName.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("lastName", "Last Name", this.lastName.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("otherNames", "Other Names", this.otherNames.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("initials", "Initials", this.initials.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("gender", "Gender", this.gender.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal));
        this.searchColumns.add(new SearchColumn("birthDate", "Birth Date", this.birthDate.get(), birthDateDisplay.get(), SearchDataTypes.DATE));
        this.searchColumns.add(new SearchColumn("joinDate", "Join Date", this.joinDate.get(), joinDateDisplay.get(), SearchDataTypes.DATE));
        this.searchColumns.add(new SearchColumn("nationalID", "National ID", this.nationalID.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("countryID", "Country ID", this.countryID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("countryDisplay", "Country", this.countryDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("villageID", "Village ID", this.villageID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("villageDisplay", "Village", this.villageDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("staffTitleID", "Staff Title ID", this.staffTitleID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("staffTitleDisplay", "Staff Title", this.staffTitleDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("qualificationID", "Qualification ID", this.qualificationID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("qualificationDisplay", "Qualification", this.qualificationDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("departmentID", "Department ID", this.departmentID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("departmentDisplay", "Department", this.departmentDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("phoneNo", "Phone No", this.phoneNo.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("emailAddress", "Email Address", this.emailAddress.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("physicalAddress", "Physical Address", this.physicalAddress.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("specialSkills", "Special Skills", this.specialSkills.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("active", "Active", this.active.get(), SearchDataTypes.BOOLEAN));
        this.searchColumns.addAll(this.getDefaultSearchColumns());
    }

    @Override
    public List<SearchColumn> getSearchColumns() {
        return this.searchColumns;
    }

    @Override
    public Object getId() {
        return this.staff.getId();
    }

    @Override
    public String getDisplayKey() {
        return this.staff.getDisplayKey();
    }

    public static List<StaffDA> getStaffDAs(List<Staff> staffs) {
        List<StaffDA> list = new ArrayList<>();
        staffs.forEach((staff) -> {
            list.add(new StaffDA(staff));
        });
        return list;
    }

    public static List<Staff> getStaffList(List<StaffDA> staffDAs) {
        List<Staff> staffs = new ArrayList<>();
        staffDAs.forEach(a -> staffs.add(a.staff));
        return staffs;
    }

    public boolean save() throws Exception {
        return super.persist(this.staff);

    }

    public boolean update() throws Exception {
        return super.merge(this.staff);

    }

    public boolean delete() {
        return super.remove(this.staff);

    }

    public Staff getStaff(String staffID) {
        return (Staff) super.find(Staff.class, staffID);
    }

    public Staff getStaff() {
        return this.staff;
    }

    public List<Staff> getStaffs() {
        return super.find(Staff.class);
    }

    @Override
    public List<DBAccess> get() {
        List<DBAccess> list = new ArrayList<>();
        selectQuery(Staff.class).forEach(o -> list.add(new StaffDA((Staff) o)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public StaffDA get(String staffID) throws Exception {
        Staff oStaff = getStaff(staffID);
        if (oStaff == null) {
            throw new Exception("No Record with id: " + staffID);
        }
        return new StaffDA(oStaff);
    }

    public List<StaffDA> get(String columName, Object value) {
        List<StaffDA> list = new ArrayList<>();
        super.selectQuery(Staff.class, columName, value).forEach(da -> list.add(new StaffDA((Staff) da)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public List<StaffDA> toDaList(List<Staff> staffs) {
        List<StaffDA> staffDAs = new ArrayList<>();
        staffs.forEach(s -> staffDAs.add(new StaffDA(s)));
        return staffDAs;
    }

    public List<DBAccess> toDBAccessList(List<Staff> staffs) {
        List<DBAccess> dbAccesses = new ArrayList<>();
        staffs.forEach(s -> dbAccesses.add(new StaffDA(s)));
        return dbAccesses;
    }

    public int getMax(String columnName) {
        return super.getMax(Staff.class, columnName);
    }

    public int getMax(String columnName, String comparatorColumn, Object comparatorVaue) {
        return super.getMax(Staff.class, columnName, comparatorColumn, comparatorVaue);
    }

    public final int getNextIdHelper() {
        return this.getMax("idHelper") + 1;
    }

    public String getNextStaffID(int idHelper) {
        return new IDGeneratorDA().getToAppendString(Staff.class.getSimpleName(), idHelper);
    }

    public List<Staff> getStaffs(String columName, Object value) {
        return super.find(Staff.class, columName, value);
    }

    @Override
    public List<DBAccess> getRevisions() {
        try {

            List<Object[]> list = getEntityRevisions(Staff.class);
            List<DBAccess> dBAccesses = new ArrayList<>();
            list.forEach(e -> {

                StaffDA staffDA = new StaffDA((Staff) e[0]);
                staffDA.revisionEntity = (AppRevisionEntity) e[1];
                staffDA.oRevisionType = (RevisionType) e[2];
                staffDA.initRevProprties();
                staffDA.searchColumns.addAll(staffDA.getRevSearchColumns());
                dBAccesses.add(staffDA);

            });

            return dBAccesses;
        } catch (Exception e) {
            throw e;
        } finally {
            if (entityManager == null) {
                entityManager.close();
            }
        }

    }

}
