/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.common.dbaccess;

import com.saburi.common.entities.SubCounty;
import javafx.beans.property.*;
import java.util.ArrayList;
import com.saburi.common.entities.AppRevisionEntity;
import java.util.List;
import com.saburi.common.utils.SearchColumn;
import com.saburi.common.utils.SearchColumn.SearchDataTypes;
import org.hibernate.envers.RevisionType;
import com.saburi.common.entities.LookupData;
import static com.saburi.common.utils.Utilities.formatInteger;
import com.saburi.common.entities.County;

public class SubCountyDA extends DBAccess {

    private SubCounty subCounty = new SubCounty();
    private final SimpleStringProperty districtDisplay = new SimpleStringProperty(this, "districtDisplay");
    private final SimpleObjectProperty districtID = new SimpleObjectProperty(this, "districtID");
    private LookupData district;
    private final SimpleIntegerProperty idHelper = new SimpleIntegerProperty(this, "idHelper");
    private final SimpleStringProperty idHelperDisplay = new SimpleStringProperty(this, "idHelperDisplay");
    private final SimpleStringProperty countyDisplay = new SimpleStringProperty(this, "countyDisplay");
    private final SimpleObjectProperty countyID = new SimpleObjectProperty(this, "countyID");
    private County county;
    private final SimpleStringProperty subCountyID = new SimpleStringProperty(this, "subCountyID");
    private final SimpleStringProperty subCountyName = new SimpleStringProperty(this, "subCountyName");

    public SubCountyDA() {
        createSearchColumns();
    }

    public SubCountyDA(String persistenceUnit) {
        super(persistenceUnit);
    }

    public SubCountyDA(SubCounty subCounty) {
        this.subCounty = subCounty;
        initialseProprties();
        createSearchColumns();
    }

    public SubCountyDA(String persistenceUnit, SubCounty subCounty) {
        super(persistenceUnit);
        this.subCounty = subCounty;
        initialseProprties();
        createSearchColumns();
    }

    public SubCountyDA(County county, String subCountyID, String subCountyName) {
        this.subCounty = new SubCounty(getNextIdHelper(county), county, subCountyID, subCountyName);
        initialseProprties();
        createSearchColumns();
    }

    public SubCountyDA(String persistenceUnit, LookupData district, County county, String subCountyID, String subCountyName) {
        super(persistenceUnit);
        this.subCounty = new SubCounty(getNextIdHelper(county), county, subCountyID, subCountyName);
        initialseProprties();
        createSearchColumns();
    }

    public LookupData getDistrict() {
        return county.getDistrict();
    }

    public Object getDistrictID() {
        return districtID.get();
    }

    public String getDistrictDisplay() {
        return districtDisplay.get();
    }

    public LookupDataDA getDistrictDA() {
        return this.district != null ? new LookupDataDA(this.district) : null;
    }

    public int getIdHelper() {
        return idHelper.get();
    }

    public String getIdHelperDisplay() {
        return idHelperDisplay.get();
    }

    public void setIdHelper(int idHelper) {
        subCounty.setIdHelper(idHelper);
        this.idHelper.set(idHelper);
    }

    public County getCounty() {
        return county;
    }

    public Object getCountyID() {
        return countyID.get();
    }

    public String getCountyDisplay() {
        return countyDisplay.get();
    }

    public CountyDA getCountyDA() {
        return this.county != null ? new CountyDA(this.county) : null;
    }

    public void setCounty(County county) {
        subCounty.setCounty(county);
        this.county = county;
        this.countyID.set(county.getId());
        this.countyDisplay.set(county.getDisplayKey());
    }

    public String getSubCountyID() {
        return subCountyID.get();
    }

    public void setSubCountyID(String subCountyID) {
        subCounty.setSubCountyID(subCountyID);
        this.subCountyID.set(subCountyID);
    }

    public String getSubCountyName() {
        return subCountyName.get();
    }

    public void setSubCountyName(String subCountyName) {
        subCounty.setSubCountyName(subCountyName);
        this.subCountyName.set(subCountyName);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof SubCountyDA)) {
            return false;
        }

        SubCountyDA subCountyDA = (SubCountyDA) o;

        if (subCountyDA.getDBEntity() == null || this.getDBEntity() == null) {
            return false;
        }
        return this.getId().equals(subCountyDA.getId());
    }

    @Override
    public int hashCode() {
        return subCounty.getId().hashCode();
    }

    private void initialseProprties() {
        this.dBEntity = subCounty;
        this.idHelper.set(subCounty.getIdHelper());
        this.idHelperDisplay.set(formatInteger(subCounty.getIdHelper()));
        this.county = subCounty.getCounty();
        if (this.county != null) {
            this.countyID.set(county.getId());
            this.countyDisplay.set(county.getDisplayKey());
            this.district = county.getDistrict();
            if (this.district != null) {
                this.districtID.set(district.getId());
                this.districtDisplay.set(district.getDisplayKey());
            }
        }
       this.subCountyID.set(subCounty.getSubCountyID());
       this.subCountyName.set(subCounty.getSubCountyName());
        initCommonProprties();
    }

    private void createSearchColumns() {
        this.searchColumns.add(new SearchColumn("districtID", "District ID", this.districtID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("districtDisplay", "District", this.districtDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("countyID", "County ID", this.countyID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("countyDisplay", "County", this.countyDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("subCountyID", "Sub County ID", this.subCountyID.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("subCountyName", "Sub County Name", this.subCountyName.get(), SearchDataTypes.STRING));
        this.searchColumns.addAll(this.getDefaultSearchColumns());
    }

    @Override
    public List<SearchColumn> getSearchColumns() {
        return this.searchColumns;
    }

    @Override
    public Object getId() {
        return this.subCounty.getId();
    }

    @Override
    public String getDisplayKey() {
        return this.subCounty.getDisplayKey();
    }

    public static List<SubCountyDA> getSubCountyDAs(List<SubCounty> subCountys) {
        List<SubCountyDA> list = new ArrayList<>();
        subCountys.forEach((subCounty) -> {
            list.add(new SubCountyDA(subCounty));
        });
        return list;
    }

    public static List<SubCounty> getSubCountyList(List<SubCountyDA> subCountyDAs) {
        List<SubCounty> subCountys = new ArrayList<>();
        subCountyDAs.forEach(a -> subCountys.add(a.subCounty));
        return subCountys;
    }

    public boolean save() throws Exception {
        if (!isValid()) {
            return false;
        }
        return super.persist(this.subCounty);

    }

    public boolean update() throws Exception {
        if (!isValid()) {
            return false;
        }
        return super.merge(this.subCounty);

    }

    public boolean delete() {
        return super.remove(this.subCounty);

    }

    public SubCounty getSubCounty(String subCountyID) {
        return (SubCounty) super.find(SubCounty.class, subCountyID);
    }

    public SubCounty getSubCounty() {
        return this.subCounty;
    }

    public List<SubCounty> getSubCountys() {
        return super.find(SubCounty.class);
    }

    @Override
    public List<DBAccess> get() {
        List<DBAccess> list = new ArrayList<>();
        selectQuery(SubCounty.class).forEach(o -> list.add(new SubCountyDA((SubCounty) o)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public SubCountyDA get(String subCountyID) throws Exception {
        SubCounty oSubCounty = getSubCounty(subCountyID);
        if (oSubCounty == null) {
            throw new Exception("No Record with id: " + subCountyID);
        }
        return new SubCountyDA(oSubCounty);
    }

    public List<SubCountyDA> get(String columName, Object value) {
        List<SubCountyDA> list = new ArrayList<>();
        super.selectQuery(SubCounty.class, columName, value).forEach(da -> list.add(new SubCountyDA((SubCounty) da)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public List<SubCountyDA> toDaList(List<SubCounty> subCountys) {
        List<SubCountyDA> subCountyDAs = new ArrayList<>();
        subCountys.forEach(s -> subCountyDAs.add(new SubCountyDA(s)));
        return subCountyDAs;
    }

    public List<DBAccess> toDBAccessList(List<SubCounty> subCountys) {
        List<DBAccess> dbAccesses = new ArrayList<>();
        subCountys.forEach(s -> dbAccesses.add(new SubCountyDA(s)));
        return dbAccesses;
    }

    public int getMax(String columnName) {
        return super.getMax(SubCounty.class, columnName);
    }

    public int getMax(String columnName, String comparatorColumn, Object comparatorVaue) {
        return super.getMax(SubCounty.class, columnName, comparatorColumn, comparatorVaue);
    }

    public final int getNextIdHelper(County county) {
        return this.getMax("idHelper", "county", county) + 1;
    }

    public String getNextSubCountyID(int idHelper, String county) {
        return new IDGeneratorDA().getToAppendString(SubCounty.class.getSimpleName(), county, idHelper);
    }

    public List<SubCounty> getSubCountys(String columName, Object value) {
        return super.find(SubCounty.class, columName, value);
    }

    @Override
    public List<DBAccess> getRevisions() {
        try {

            List<Object[]> list = getEntityRevisions(SubCounty.class);
            List<DBAccess> dBAccesses = new ArrayList<>();
            list.forEach(e -> {

                SubCountyDA subCountyDA = new SubCountyDA((SubCounty) e[0]);
                subCountyDA.revisionEntity = (AppRevisionEntity) e[1];
                subCountyDA.oRevisionType = (RevisionType) e[2];
                subCountyDA.initRevProprties();
                subCountyDA.searchColumns.addAll(subCountyDA.getRevSearchColumns());
                dBAccesses.add(subCountyDA);

            });

            return dBAccesses;
        } catch (Exception e) {
            throw e;
        } finally {
            if (entityManager == null) {
                entityManager.close();
            }
        }

    }

    private boolean isValid() throws Exception {
        List<SubCounty> subCounties = super.find(SubCounty.class, "county", this.county, "subCountyName", subCounty.getSubCountyName());
        subCounties.remove(this.subCounty);
        if (!subCounties.isEmpty()) {
            throw new Exception("The Sub County with name " + subCounty.getSubCountyName() + " "
                    + "and County " + county.getCountyName() + " already exists");
        }
        return true;
    }
    
    public List<SubCounty> getSubCounties(County county) {
        return getSubCountys("county", county);
    }

}
