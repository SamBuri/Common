/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.common.dbaccess;

import com.saburi.common.entities.UserRoleDetail;
import javafx.beans.property.*;
import java.util.ArrayList;
import com.saburi.common.entities.AppRevisionEntity;
import java.util.List;
import com.saburi.common.utils.SearchColumn;
import com.saburi.common.utils.SearchColumn.SearchDataTypes;
import org.hibernate.envers.RevisionType;
import com.saburi.common.entities.UserRole;
import com.saburi.common.entities.AccessObject;

public class UserRoleDetailDA extends DBAccess {

    private UserRoleDetail userRoleDetail = new UserRoleDetail();
    private final SimpleStringProperty userRoleDisplay = new SimpleStringProperty(this, "userRoleDisplay");
    private final SimpleObjectProperty userRoleID = new SimpleObjectProperty(this, "userRoleID");
    private UserRole userRole;
    private final SimpleStringProperty accessObjectDisplay = new SimpleStringProperty(this, "accessObjectDisplay");
    private final SimpleObjectProperty accessObjectID = new SimpleObjectProperty(this, "accessObjectID");
    private AccessObject accessObject;
    private final SimpleStringProperty userRoleDetailID = new SimpleStringProperty(this, "userRoleDetailID");
    private final SimpleBooleanProperty canCreate = new SimpleBooleanProperty(this, "canCreate");
    private final SimpleBooleanProperty canUpdate = new SimpleBooleanProperty(this, "canUpdate");
    private final SimpleBooleanProperty canRead = new SimpleBooleanProperty(this, "canRead");
    private final SimpleBooleanProperty canDelete = new SimpleBooleanProperty(this, "canDelete");

    public UserRoleDetailDA() {
        createSearchColumns();
    }

    public UserRoleDetailDA(String persistenceUnit) {
        super(persistenceUnit);
    }

    public UserRoleDetailDA(UserRoleDetail userRoleDetail) {
        this.userRoleDetail = userRoleDetail;
        initialseProprties();
        createSearchColumns();
    }

    public UserRoleDetailDA(String persistenceUnit, UserRoleDetail userRoleDetail) {
        super(persistenceUnit);
        this.userRoleDetail = userRoleDetail;
        initialseProprties();
        createSearchColumns();
    }

    public UserRoleDetailDA(UserRole userRole, AccessObject accessObject, boolean canCreate, boolean canUpdate, boolean canRead, boolean canDelete) {
        this.userRoleDetail = new UserRoleDetail(userRole, accessObject, canCreate, canUpdate, canRead, canDelete);
        initialseProprties();
        createSearchColumns();
    }

    public UserRoleDetailDA(String persistenceUnit, UserRole userRole, AccessObject accessObject, boolean canCreate, boolean canUpdate, boolean canRead, boolean canDelete) {
        super(persistenceUnit);
        this.userRoleDetail = new UserRoleDetail(userRole, accessObject, canCreate, canUpdate, canRead, canDelete);
        initialseProprties();
        createSearchColumns();
    }

    public UserRole getUserRole() {
        return userRole;
    }

    public Object getUserRoleID() {
        return userRoleID.get();
    }

    public String getUserRoleDisplay() {
        return userRoleDisplay.get();
    }

    public UserRoleDA getUserRoleDA() {
        return this.userRole != null ? new UserRoleDA(this.userRole) : null;
    }

    public void setUserRole(UserRole userRole) {
        userRoleDetail.setUserRole(userRole);
        this.userRole = userRole;
        this.userRoleID.set(userRole.getId());
        this.userRoleDisplay.set(userRole.getDisplayKey());
    }

    public AccessObject getAccessObject() {
        return accessObject;
    }

    public Object getAccessObjectID() {
        return accessObjectID.get();
    }

    public String getAccessObjectDisplay() {
        return accessObjectDisplay.get();
    }

    public AccessObjectDA getAccessObjectDA() {
        return this.accessObject != null ? new AccessObjectDA(this.accessObject) : null;
    }

    public void setAccessObject(AccessObject accessObject) {
        userRoleDetail.setAccessObject(accessObject);
        this.accessObject = accessObject;
        this.accessObjectID.set(accessObject.getId());
        this.accessObjectDisplay.set(accessObject.getDisplayKey());
    }

    public String getUserRoleDetailID() {
        return userRoleDetailID.get();
    }

    public boolean isCanCreate() {
        return canCreate.get();
    }

    public void setCanCreate(boolean canCreate) {
        userRoleDetail.setCanCreate(canCreate);
        this.canCreate.set(canCreate);
    }

    public boolean isCanUpdate() {
        return canUpdate.get();
    }

    public void setCanUpdate(boolean canUpdate) {
        userRoleDetail.setCanUpdate(canUpdate);
        this.canUpdate.set(canUpdate);
    }

    public boolean isCanRead() {
        return canRead.get();
    }

    public void setCanRead(boolean canRead) {
        userRoleDetail.setCanRead(canRead);
        this.canRead.set(canRead);
    }

    public boolean isCanDelete() {
        return canDelete.get();
    }

    public void setCanDelete(boolean canDelete) {
        userRoleDetail.setCanDelete(canDelete);
        this.canDelete.set(canDelete);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof UserRoleDetailDA)) {
            return false;
        }

        UserRoleDetailDA userRoleDetailDA = (UserRoleDetailDA) o;

        if (userRoleDetailDA.getDBEntity() == null || this.getDBEntity() == null) {
            return false;
        }
        return this.getId().equals(userRoleDetailDA.getId());
    }

    @Override
    public int hashCode() {
        return userRoleDetail.getId().hashCode();
    }

    private void initialseProprties() {
        this.dBEntity = userRoleDetail;
        this.userRole = userRoleDetail.getUserRole();
        if (this.userRole != null) {
            this.userRoleID.set(userRole.getId());
            this.userRoleDisplay.set(userRole.getDisplayKey());
        }
        this.accessObject = userRoleDetail.getAccessObject();
        if (this.accessObject != null) {
            this.accessObjectID.set(accessObject.getId());
            this.accessObjectDisplay.set(accessObject.getDisplayKey());
        }
        this.userRoleDetailID.set(userRoleDetail.getUserRoleDetailID());
        this.canCreate.set(userRoleDetail.isCanCreate());
        this.canUpdate.set(userRoleDetail.isCanUpdate());
        this.canRead.set(userRoleDetail.isCanRead());
        this.canDelete.set(userRoleDetail.isCanDelete());
        initCommonProprties();
    }

    private void createSearchColumns() {
        this.searchColumns.add(new SearchColumn("userRoleID", "User Role ID", this.userRoleID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("userRoleDisplay", "User Role", this.userRoleDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("accessObjectID", "AccessObject ID", this.accessObjectID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("accessObjectDisplay", "AccessObject", this.accessObjectDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("userRoleDetailID", "User Role Detail ID", this.userRoleDetailID.get(), SearchDataTypes.STRING, false));
        this.searchColumns.add(new SearchColumn("canCreate", "Create", this.canCreate.get(), SearchDataTypes.BOOLEAN));
        this.searchColumns.add(new SearchColumn("canUpdate", "Update", this.canUpdate.get(), SearchDataTypes.BOOLEAN));
        this.searchColumns.add(new SearchColumn("canRead", "Read", this.canRead.get(), SearchDataTypes.BOOLEAN));
        this.searchColumns.add(new SearchColumn("canDelete", "Delete", this.canDelete.get(), SearchDataTypes.BOOLEAN));
        this.searchColumns.addAll(this.getDefaultSearchColumns());
    }

    @Override
    public List<SearchColumn> getSearchColumns() {
        return this.searchColumns;
    }

    @Override
    public Object getId() {
        return this.userRoleDetail.getId();
    }

    @Override
    public String getDisplayKey() {
        return this.userRoleDetail.getDisplayKey();
    }

    public static List<UserRoleDetailDA> getUserRoleDetailDAs(List<UserRoleDetail> userRoleDetails) {
        List<UserRoleDetailDA> list = new ArrayList<>();
        userRoleDetails.forEach((userRoleDetail) -> {
            list.add(new UserRoleDetailDA(userRoleDetail));
        });
        return list;
    }

    public static List<UserRoleDetail> getUserRoleDetailList(List<UserRoleDetailDA> userRoleDetailDAs) {
        List<UserRoleDetail> userRoleDetails = new ArrayList<>();
        userRoleDetailDAs.forEach(a -> userRoleDetails.add(a.userRoleDetail));
        return userRoleDetails;
    }

    public boolean save() throws Exception {
        return super.persist(this.userRoleDetail);

    }

    public boolean update() throws Exception {
        return super.merge(this.userRoleDetail);

    }

    public boolean delete() {
        return super.remove(this.userRoleDetail);

    }

    public UserRoleDetail getUserRoleDetail(String userRoleDetailID) {
        return (UserRoleDetail) super.find(UserRoleDetail.class, userRoleDetailID);
    }

    public UserRoleDetail getUserRoleDetail() {
        return this.userRoleDetail;
    }

    public List<UserRoleDetail> getUserRoleDetails() {
        return super.find(UserRoleDetail.class);
    }

    @Override
    public List<DBAccess> get() {
        List<DBAccess> list = new ArrayList<>();
        selectQuery(UserRoleDetail.class).forEach(o -> list.add(new UserRoleDetailDA((UserRoleDetail) o)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public UserRoleDetailDA get(String userRoleDetailID) throws Exception {
        UserRoleDetail oUserRoleDetail = getUserRoleDetail(userRoleDetailID);
        if (oUserRoleDetail == null) {
            throw new Exception("No Record with id: " + userRoleDetailID);
        }
        return new UserRoleDetailDA(oUserRoleDetail);
    }

    public List<UserRoleDetailDA> get(String columName, Object value) {
        List<UserRoleDetailDA> list = new ArrayList<>();
        super.selectQuery(UserRoleDetail.class, columName, value).forEach(da -> list.add(new UserRoleDetailDA((UserRoleDetail) da)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public List<UserRoleDetailDA> toDaList(List<UserRoleDetail> userRoleDetails) {
        List<UserRoleDetailDA> userRoleDetailDAs = new ArrayList<>();
        userRoleDetails.forEach(s -> userRoleDetailDAs.add(new UserRoleDetailDA(s)));
        return userRoleDetailDAs;
    }

    public List<DBAccess> toDBAccessList(List<UserRoleDetail> userRoleDetails) {
        List<DBAccess> dbAccesses = new ArrayList<>();
        userRoleDetails.forEach(s -> dbAccesses.add(new UserRoleDetailDA(s)));
        return dbAccesses;
    }

    public int getMax(String columnName) {
        return super.getMax(UserRoleDetail.class, columnName);
    }

    public int getMax(String columnName, String comparatorColumn, Object comparatorVaue) {
        return super.getMax(UserRoleDetail.class, columnName, comparatorColumn, comparatorVaue);
    }

    public List<UserRoleDetail> getUserRoleDetails(String columName, Object value) {
        return super.find(UserRoleDetail.class, columName, value);
    }

    @Override
    public List<DBAccess> getRevisions() {
        try {

            List<Object[]> list = getEntityRevisions(UserRoleDetail.class);
            List<DBAccess> dBAccesses = new ArrayList<>();
            list.forEach(e -> {

                UserRoleDetailDA userRoleDetailDA = new UserRoleDetailDA((UserRoleDetail) e[0]);
                userRoleDetailDA.revisionEntity = (AppRevisionEntity) e[1];
                userRoleDetailDA.oRevisionType = (RevisionType) e[2];
                userRoleDetailDA.initRevProprties();
                userRoleDetailDA.searchColumns.addAll(userRoleDetailDA.getRevSearchColumns());
                dBAccesses.add(userRoleDetailDA);

            });

            return dBAccesses;
        } catch (Exception e) {
            throw e;
        } finally {
            if (entityManager == null) {
                entityManager.close();
            }
        }

    }

    public SimpleBooleanProperty getCanCreate() {
        return canCreate;
    }

    public SimpleBooleanProperty getCanUpdate() {
        return canUpdate;
    }

    public SimpleBooleanProperty getCanRead() {
        return canRead;
    }

    public SimpleBooleanProperty getCanDelete() {
        return canDelete;
    }
    
    

    public UserRoleDetail getUserRoleDetail(UserRole userRole, AccessObject accessObject) {
        List<UserRoleDetail> userRoleDetails = super.find(UserRoleDetail.class, "userRole", userRole, "accessObject", accessObject);
        return userRoleDetails.size() > 0 ? userRoleDetails.get(0) : null;
    }

    public UserRoleDetail getUserRoleDetail(UserRole userRole, String accessObject) {
        List<UserRoleDetail> userRoleDetails = super.find(UserRoleDetail.class, "userRole", userRole, "accessObject", super.find(AccessObject.class, accessObject));
        return userRoleDetails.size() > 0 ? userRoleDetails.get(0) : null;
    }

}
