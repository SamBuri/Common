/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.common.dbaccess;

import com.saburi.common.entities.Village;
import javafx.beans.property.*;
import java.util.ArrayList;
import com.saburi.common.entities.AppRevisionEntity;
import java.util.List;
import com.saburi.common.utils.SearchColumn;
import com.saburi.common.utils.SearchColumn.SearchDataTypes;
import org.hibernate.envers.RevisionType;
import static com.saburi.common.utils.Utilities.formatInteger;
import com.saburi.common.entities.LookupData;
import com.saburi.common.entities.County;
import com.saburi.common.entities.SubCounty;
import com.saburi.common.entities.Parish;

public class VillageDA extends DBAccess {

    private Village village = new Village();
    private final SimpleIntegerProperty idHelper = new SimpleIntegerProperty(this, "idHelper");
    private final SimpleStringProperty idHelperDisplay = new SimpleStringProperty(this, "idHelperDisplay");
    private final SimpleStringProperty districtDisplay = new SimpleStringProperty(this, "districtDisplay");
    private final SimpleObjectProperty districtID = new SimpleObjectProperty(this, "districtID");
    private LookupData district;
    private final SimpleStringProperty countyDisplay = new SimpleStringProperty(this, "countyDisplay");
    private final SimpleObjectProperty countyID = new SimpleObjectProperty(this, "countyID");
    private County county;
    private final SimpleStringProperty subCountyDisplay = new SimpleStringProperty(this, "subCountyDisplay");
    private final SimpleObjectProperty subCountyID = new SimpleObjectProperty(this, "subCountyID");
    private SubCounty subCounty;
    private final SimpleStringProperty parishDisplay = new SimpleStringProperty(this, "parishDisplay");
    private final SimpleObjectProperty parishID = new SimpleObjectProperty(this, "parishID");
    private Parish parish;
    private final SimpleStringProperty villageID = new SimpleStringProperty(this, "villageID");
    private final SimpleStringProperty villageName = new SimpleStringProperty(this, "villageName");

    public VillageDA() {
        createSearchColumns();
    }

    public VillageDA(String persistenceUnit) {
        super(persistenceUnit);
    }

    public VillageDA(Village village) {
        this.village = village;
        initialseProprties();
        createSearchColumns();
    }

    public VillageDA(String persistenceUnit, Village village) {
        super(persistenceUnit);
        this.village = village;
        initialseProprties();
        createSearchColumns();
    }

    public VillageDA(Parish parish, String villageID, String villageName) {
        this.village = new Village(getNextIdHelper(parish), parish, villageID, villageName);
        initialseProprties();
        createSearchColumns();
    }

    public VillageDA(String persistenceUnit, Parish parish, String villageID, String villageName) {
        super(persistenceUnit);
        this.village = new Village(getNextIdHelper(parish), parish, villageID, villageName);
        initialseProprties();
        createSearchColumns();
    }

    public int getIdHelper() {
        return idHelper.get();
    }

    public String getIdHelperDisplay() {
        return idHelperDisplay.get();
    }

    public void setIdHelper(int idHelper) {
        village.setIdHelper(idHelper);
        this.idHelper.set(idHelper);
    }

    public LookupData getDistrict() {
        return district;
    }

    public Object getDistrictID() {
        return districtID.get();
    }

    public String getDistrictDisplay() {
        return districtDisplay.get();
    }

    public LookupDataDA getDistrictDA() {
        return this.district != null ? new LookupDataDA(this.district) : null;
    }

    public County getCounty() {
        return county;
    }

    public Object getCountyID() {
        return countyID.get();
    }

    public String getCountyDisplay() {
        return countyDisplay.get();
    }

    public CountyDA getCountyDA() {
        return this.county != null ? new CountyDA(this.county) : null;
    }

    public SubCounty getSubCounty() {
        return subCounty;
    }

    public Object getSubCountyID() {
        return subCountyID.get();
    }

    public String getSubCountyDisplay() {
        return subCountyDisplay.get();
    }

    public SubCountyDA getSubCountyDA() {
        return this.subCounty != null ? new SubCountyDA(this.subCounty) : null;
    }

    public Parish getParish() {
        return parish;
    }

    public Object getParishID() {
        return parishID.get();
    }

    public String getParishDisplay() {
        return parishDisplay.get();
    }

    public ParishDA getParishDA() {
        return this.parish != null ? new ParishDA(this.parish) : null;
    }

    public void setParish(Parish parish) {
        village.setParish(parish);
        this.parish = parish;
        this.parishID.set(parish.getId());
        this.parishDisplay.set(parish.getDisplayKey());
    }

    public String getVillageID() {
        return villageID.get();
    }

    public void setVillageID(String villageID) {
        village.setVillageID(villageID);
        this.villageID.set(villageID);
    }

    public String getVillageName() {
        return villageName.get();
    }

    public void setVillageName(String villageName) {
        village.setVillageName(villageName);
        this.villageName.set(villageName);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof VillageDA)) {
            return false;
        }

        VillageDA villageDA = (VillageDA) o;

        if (villageDA.getDBEntity() == null || this.getDBEntity() == null) {
            return false;
        }
        return this.getId().equals(villageDA.getId());
    }

    @Override
    public int hashCode() {
        return village.getId().hashCode();
    }

    private void initialseProprties() {
        this.dBEntity = village;
        this.idHelper.set(village.getIdHelper());
        this.idHelperDisplay.set(formatInteger(village.getIdHelper()));
        this.parish = village.getParish();
        if (this.parish != null) {
            this.parishID.set(parish.getId());
            this.parishDisplay.set(parish.getDisplayKey());
            this.subCounty = parish.getSubCounty();
            if (this.subCounty != null) {
                this.subCountyID.set(subCounty.getId());
                this.subCountyDisplay.set(subCounty.getDisplayKey());
                this.county = subCounty.getCounty();
                if (this.county != null) {
                    this.countyID.set(county.getId());
                    this.countyDisplay.set(county.getDisplayKey());

                    this.district = county.getDistrict();
                    if (this.district != null) {
                        this.districtID.set(district.getId());
                        this.districtDisplay.set(district.getDisplayKey());
                    }
                }
            }
        }
        this.villageID.set(village.getVillageID());
        this.villageName.set(village.getVillageName());
        initCommonProprties();
    }

    private void createSearchColumns() {
        this.searchColumns.add(new SearchColumn("districtID", "District ID", this.districtID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("districtDisplay", "District", this.districtDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("countyID", "County ID", this.countyID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("countyDisplay", "County", this.countyDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("subCountyID", "Sub County ID", this.subCountyID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("subCountyDisplay", "Sub County", this.subCountyDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("parishID", "Parish ID", this.parishID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("parishDisplay", "Parish", this.parishDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("villageID", "Village ID", this.villageID.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("villageName", "Village Name", this.villageName.get(), SearchDataTypes.STRING));
        this.searchColumns.addAll(this.getDefaultSearchColumns());
    }

    @Override
    public List<SearchColumn> getSearchColumns() {
        return this.searchColumns;
    }

    @Override
    public Object getId() {
        return this.village.getId();
    }

    @Override
    public String getDisplayKey() {
        return this.village.getDisplayKey();
    }

    public static List<VillageDA> getVillageDAs(List<Village> villages) {
        List<VillageDA> list = new ArrayList<>();
        villages.forEach((village) -> {
            list.add(new VillageDA(village));
        });
        return list;
    }

    public static List<Village> getVillageList(List<VillageDA> villageDAs) {
        List<Village> villages = new ArrayList<>();
        villageDAs.forEach(a -> villages.add(a.village));
        return villages;
    }

    public boolean save() throws Exception {
        if (!isValid()) {
            return false;
        }
        return super.persist(this.village);

    }

    public boolean update() throws Exception {
        if (!isValid()) {
            return false;
        }
        return super.merge(this.village);

    }

    public boolean delete() {
        return super.remove(this.village);

    }

    public Village getVillage(String villageID) {
        return (Village) super.find(Village.class, villageID);
    }

    public Village getVillage() {
        return this.village;
    }

    public List<Village> getVillages() {
        return super.find(Village.class);
    }

    @Override
    public List<DBAccess> get() {
        List<DBAccess> list = new ArrayList<>();
        selectQuery(Village.class, true).forEach(o -> list.add(new VillageDA((Village) o)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public VillageDA get(String villageID) throws Exception {
        Village oVillage = getVillage(villageID);
        if (oVillage == null) {
            throw new Exception("No Record with id: " + villageID);
        }
        return new VillageDA(oVillage);
    }

    public List<VillageDA> get(String columName, Object value) {
        List<VillageDA> list = new ArrayList<>();
        super.selectQuery(Village.class, columName, value).forEach(da -> list.add(new VillageDA((Village) da)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public List<VillageDA> toDaList(List<Village> villages) {
        List<VillageDA> villageDAs = new ArrayList<>();
        villages.forEach(s -> villageDAs.add(new VillageDA(s)));
        return villageDAs;
    }

    public List<DBAccess> toDBAccessList(List<Village> villages) {
        List<DBAccess> dbAccesses = new ArrayList<>();
        villages.forEach(s -> dbAccesses.add(new VillageDA(s)));
        return dbAccesses;
    }

    public int getMax(String columnName) {
        return super.getMax(Village.class, columnName);
    }

    public int getMax(String columnName, String comparatorColumn, Object comparatorVaue) {
        return super.getMax(Village.class, columnName, comparatorColumn, comparatorVaue);
    }

    public final int getNextIdHelper(Parish parish) {
        return this.getMax("idHelper", "parish", parish) + 1;
    }

    public String getNextVillageID(int idHelper, String parish) {
        return new IDGeneratorDA().getToAppendString(Village.class.getSimpleName(), parish, idHelper);
    }

    public List<Village> getVillages(String columName, Object value) {
        return super.find(Village.class, columName, value);
    }

    @Override
    public List<DBAccess> getRevisions() {
        try {

            List<Object[]> list = getEntityRevisions(Village.class);
            List<DBAccess> dBAccesses = new ArrayList<>();
            list.forEach(e -> {

                VillageDA villageDA = new VillageDA((Village) e[0]);
                villageDA.revisionEntity = (AppRevisionEntity) e[1];
                villageDA.oRevisionType = (RevisionType) e[2];
                villageDA.initRevProprties();
                villageDA.searchColumns.addAll(villageDA.getRevSearchColumns());
                dBAccesses.add(villageDA);

            });

            return dBAccesses;
        } catch (Exception e) {
            throw e;
        } finally {
            if (entityManager == null) {
                entityManager.close();
            }
        }

    }

    private boolean isValid() throws Exception {
        List<Village> villages = super.find(Village.class, "parish", this.parish, "villageName", village.getVillageName());
        villages.remove(this.village);
        if (!villages.isEmpty()) {
            throw new Exception("The village with name " + village.getVillageName() + " and parish " + parish.getParishName() + " already exists");
        }
        return true;
    }

}
