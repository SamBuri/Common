/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.common.dbaccess;

import com.saburi.common.entities.Village;
import javafx.beans.property.*;
import java.util.ArrayList;
import java.util.List;
import javafx.util.Pair;
import com.saburi.common.utils.SearchColumn;
import com.saburi.common.utils.SearchColumn.SearchDataTypes;
import com.saburi.common.entities.Parish;

public class VillageDA extends DBAccess {

    private Village village;
    private SimpleIntegerProperty idHelper = new SimpleIntegerProperty(this, "idHelper");
    private SimpleStringProperty parishDisplay = new SimpleStringProperty(this, "parishDisplay");
    private SimpleObjectProperty parishID = new SimpleObjectProperty(this, "parishID");
    private Parish parish;
    private SimpleStringProperty villageID = new SimpleStringProperty(this, "villageID");
    private SimpleStringProperty villageName = new SimpleStringProperty(this, "villageName");

    public VillageDA() {
        createSearchColumns();
    }

    public VillageDA(String persistenceUnit) {
        super(persistenceUnit);
    }

    public VillageDA(Village village) {
        this.village = village;
        initialseProprties();
        createSearchColumns();
    }

    public VillageDA(String persistenceUnit, Village village) {
        super(persistenceUnit);
        this.village = village;
        initialseProprties();
        createSearchColumns();
    }

    public VillageDA(Parish parish, String villageID, String villageName) {
        this.village = new Village(getNextIdHelper(parish), parish, villageID, villageName);
        initialseProprties();
        createSearchColumns();
    }

    public VillageDA(String persistenceUnit, Parish parish, String villageID, String villageName) {
        super(persistenceUnit);
        this.village = new Village(getNextIdHelper(parish), parish, villageID, villageName);
        initialseProprties();
        createSearchColumns();
    }

    public int getIdHelper() {
        return idHelper.get();
    }

    public void setIdHelper(int idHelper) {
        village.setIdHelper(idHelper);
        this.idHelper.set(idHelper);
    }

    public Parish getParish() {
        return parish;
    }

    public Object getParishID() {
        return parishID.get();
    }

    public String getParishDisplay() {
        return parishDisplay.get();
    }

    public ParishDA getParishDA() {
        if (this.parish == null) {
            return new ParishDA();
        } else {
            return new ParishDA(this.parish);
        }
    }

    public Pair<String, Object> getParishPair() {
        if (this.getParishDA() == null) {
            return new Pair<>("", "");
        } else {
            return this.getParishDA().keyValuePair();
        }
    }

    public void setParish(Parish parish) {
        village.setParish(parish);
        this.parish = parish;
    }

    public String getVillageID() {
        return villageID.get();
    }

    public void setVillageID(String villageID) {
        village.setVillageID(villageID);
        this.villageID.set(villageID);
    }

    public String getVillageName() {
        return villageName.get();
    }

    public void setVillageName(String villageName) {
        village.setVillageName(villageName);
        this.villageName.set(villageName);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof VillageDA)) {
            return false;
        }

        VillageDA villageDA = (VillageDA) o;

        if (villageDA.getDBEntity() == null || this.getDBEntity() == null) {
            return false;
        }
        return this.getId().equals(villageDA.getId());
    }

    @Override
    public int hashCode() {
        return village.getId().hashCode();
    }

    private void initialseProprties() {
        this.dBEntity = village;
        this.idHelper = new SimpleIntegerProperty(village.getIdHelper());
        this.parish = village.getParish();
        this.parishID = new SimpleObjectProperty(parish.getId());
        this.parishDisplay = new SimpleStringProperty(parish.getDisplayKey());
        this.villageID = new SimpleStringProperty(village.getVillageID());
        this.villageName = new SimpleStringProperty(village.getVillageName());
        initCommonProprties();
    }

    private void createSearchColumns() {
        this.searchColumns.add(new SearchColumn("parishID", "Parish ID", this.parishID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal));
        this.searchColumns.add(new SearchColumn("parishDisplay", "Parish", this.parishDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("villageID", "Village ID", this.villageID.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("villageName", "Village Name", this.villageName.get(), SearchDataTypes.STRING));
        this.searchColumns.addAll(this.getDefaultSearchColumns());
    }

    @Override
    public List<SearchColumn> getSearchColumns() {
        return this.searchColumns;
    }

    @Override
    public Object getId() {
        return this.village.getId();
    }

    @Override
    public String getDisplayKey() {
        return this.village.getDisplayKey();
    }

    public static List<VillageDA> getVillageDAs(List<Village> villages) {
        List<VillageDA> list = new ArrayList<>();
        villages.forEach((village) -> {
            list.add(new VillageDA(village));
        });
        return list;
    }

    public static List<Village> getVillageList(List<VillageDA> villageDAs) {
        List<Village> villages = new ArrayList<>();
        villageDAs.forEach(a -> villages.add(a.village));
        return villages;
    }

    public boolean save() throws Exception {
        return super.persist(this.village);

    }

    public boolean update() throws Exception {
        return super.merge(this.village);

    }

    public boolean delete() {
        return super.remove(this.village);

    }

    public Village getVillage(String villageID) {
        return (Village) super.find(Village.class, villageID);
    }

    public List<Village> getVillages() {
        return super.find(Village.class);
    }

    @Override
    public List<DBAccess> get() {
        List<DBAccess> list = new ArrayList<>();
        List<Village> datas = super.find(Village.class);
        datas.forEach((data) -> {
            list.add(new VillageDA(data));
        });
        return list;
    }

    public VillageDA get(String villageID) throws Exception {
        Village oVillage = (Village) super.find(Village.class, villageID);
        if (oVillage == null) {
            throw new Exception("No Record with id: " + villageID);
        }
        return new VillageDA(oVillage);
    }

    public List<VillageDA> get(String columName, Object value) {
        List<Village> data = super.find(Village.class, columName, value);
        List<VillageDA> list = new ArrayList<>();
        data.forEach(da -> list.add(new VillageDA(da)));
        return list;
    }

    public List<Pair<String, Object>> keyValuePairs() {
        List<Pair<String, Object>> pairs = new ArrayList<>();
        this.get().forEach((t) -> pairs.add(t.keyValuePair()));
        return pairs;
    }

    public List<Pair<String, Object>> keyValuePairs(String columName, Object value) {
        List<Pair<String, Object>> pairs = new ArrayList<>();
        this.get(columName, value).forEach((t) -> pairs.add(t.keyValuePair()));
        return pairs;
    }

    public int getMax(String columnName) {
        return super.getMax(Village.class, columnName);
    }

    public int getMax(String columnName, String comparatorColumn, Object comparatorVaue) {
        return super.getMax(Village.class, columnName, comparatorColumn, comparatorVaue);
    }

    public final int getNextIdHelper(Parish parish) {
        return this.getMax("idHelper", "parish", parish) + 1;
    }

    public String getNextVillageID(int idHelper, String parish) {
        return new IDGeneratorDA().getToAppendString(Village.class.getSimpleName(), parish, idHelper);
    }

    public List<Village> getVillages(String columName, Object value) {
        return super.find(Village.class, columName, value);
    }

}
