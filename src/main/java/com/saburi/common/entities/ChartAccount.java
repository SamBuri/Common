/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.common.entities;

import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ForeignKey;
import javax.persistence.OneToOne;
import javax.persistence.Column;
import com.saburi.common.utils.CommonEnums.AccountActions;
import javax.persistence.Enumerated;
import com.saburi.common.utils.CommonEnums.AccountReports;

@Entity
public class ChartAccount extends DBEntity {

    @Column(name = "idHelper", updatable = false)
    private int idHelper;
    @OneToOne
    @JoinColumn(name = "categoryID", foreignKey = @ForeignKey(name = "fkCategoryIDChartAccount"), nullable = false)
    private AccountCategory category;
    @Id
    @Column(name = "accountID", updatable = false, length = 20, nullable = false)
    private String accountID;
    @Column(name = "accountName", length = 100, nullable = false)
    private String accountName;
    @Enumerated
    @Column(name = "accountAction")
    private AccountActions accountAction;
    @Enumerated
    @Column(name = "accountReport")
    private AccountReports accountReport;
    private double openingBalance;
    private double closingBalance;
    private boolean contra;
    private boolean readOnly;
    private boolean controlAccount;
    private boolean hidden;

    public ChartAccount() {
    }

    public ChartAccount(int idHelper, AccountCategory category, String accountID, String accountName, AccountActions accountAction, AccountReports accountReport, double openingBalance, double closingBalance, boolean contra, boolean readOnly, boolean controlAccount, boolean hidden) {
        this.idHelper = idHelper;
        this.category = category;
        this.accountID = accountID;
        this.accountName = accountName;
        this.accountAction = accountAction;
        this.accountReport = accountReport;
        this.openingBalance = openingBalance;
        this.closingBalance = closingBalance;
        this.contra = contra;
        this.readOnly = readOnly;
        this.controlAccount = controlAccount;
        this.hidden = hidden;

    }

    public int getIdHelper() {
        return idHelper;
    }

    public void setIdHelper(int idHelper) {
        this.idHelper = idHelper;
    }

    public AccountCategory getCategory() {
        return category;
    }

    public void setCategory(AccountCategory category) {
        this.category = category;
    }

    public String getAccountID() {
        return accountID;
    }

    public void setAccountID(String accountID) {
        this.accountID = accountID;
    }

    public String getAccountName() {
        return accountName;
    }

    public void setAccountName(String accountName) {
        this.accountName = accountName;
    }

    public AccountActions getAccountAction() {
        return accountAction;
    }

    public void setAccountAction(AccountActions accountAction) {
        this.accountAction = accountAction;
    }

    public AccountReports getAccountReport() {
        return accountReport;
    }

    public void setAccountReport(AccountReports accountReport) {
        this.accountReport = accountReport;
    }

    public double getOpeningBalance() {
        return openingBalance;
    }

    public void setOpeningBalance(double openingBalance) {
        this.openingBalance = openingBalance;
    }

    public double getClosingBalance() {
        return closingBalance;
    }

    public void setClosingBalance(double closingBalance) {
        this.closingBalance = closingBalance;
    }

    public boolean isContra() {
        return contra;
    }

    public void setContra(boolean contra) {
        this.contra = contra;
    }

    public boolean isReadOnly() {
        return readOnly;
    }

    public void setReadOnly(boolean readOnly) {
        this.readOnly = readOnly;
    }

    public boolean isControlAccount() {
        return controlAccount;
    }

    public void setControlAccount(boolean controlAccount) {
        this.controlAccount = controlAccount;
    }

    public boolean isHidden() {
        return hidden;
    }

    public void setHidden(boolean hidden) {
        this.hidden = hidden;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof ChartAccount)) {
            return false;
        }

        ChartAccount chartAccount = (ChartAccount) o;

        return this.getId().equals(chartAccount.getId());
    }

    @Override
    public int hashCode() {
        return this.accountID.hashCode();

    }

    @Override
    public Object getId() {
        return this.accountID;
    }

    @Override
    public String getDisplayKey() {
        return this.accountName;
    }

}
