/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.common.entities;

import javax.persistence.Entity;
import javax.persistence.Id;
import org.hibernate.envers.Audited;
import org.hibernate.envers.RelationTargetAuditMode;
import javax.validation.constraints.NotNull;
import javax.persistence.JoinColumn;
import javax.persistence.ForeignKey;
import javax.persistence.OneToOne;
import javax.persistence.Column;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.Size;

@Entity
@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
@Table(
        name = "LookupData",
        uniqueConstraints = @UniqueConstraint(columnNames = {"lookupDataName", "lookupObjectID"}, name = "uqLookupDataNameLookupObjectIDLookupData")
)
public class LookupData extends DBEntity {

    @Column(updatable = false)
    private int idHelper;
    @NotNull(message = "The field: Lookup Object cannot be null")
    @OneToOne
    @JoinColumn(name = "lookupObjectID", foreignKey = @ForeignKey(name = "fkLookupObjectIDLookupData"))
    private LookupObject lookupObject;
    @Id
    @NotNull(message = "The field: Lookup Data ID cannot be null")
    @Size(max = 100, message = "The field: Lookup Data ID size cannot be greater than 100")
    @Column(length = 100, updatable = false)
    private String lookupDataID;
    @Size(max = 100, message = "The field: Lookup Data Name size cannot be greater than 100")
    @NotNull(message = "The field: Lookup Data Name cannot be null")
    @Column(length = 100)
    private String lookupDataName;
    private boolean readOnly;
    private boolean hidden;
    private boolean isDefault;

    public LookupData() {
    }

    public LookupData(int idHelper, LookupObject lookupObject, String lookupDataID, String lookupDataName, boolean readOnly, boolean hidden, boolean isDefault) {
        this.idHelper = idHelper;
        this.lookupObject = lookupObject;
        this.lookupDataID = lookupDataID;
        this.lookupDataName = lookupDataName;
        this.readOnly = readOnly;
        this.hidden = hidden;
        this.isDefault = isDefault;

    }

    public int getIdHelper() {
        return idHelper;
    }

    public void setIdHelper(int idHelper) {
        this.idHelper = idHelper;
    }

    public LookupObject getLookupObject() {
        return lookupObject;
    }

    public void setLookupObject(LookupObject lookupObject) {
        this.lookupObject = lookupObject;
    }

    public String getLookupDataID() {
        return lookupDataID;
    }

    public void setLookupDataID(String lookupDataID) {
        this.lookupDataID = lookupDataID;
    }

    public String getLookupDataName() {
        return lookupDataName;
    }

    public void setLookupDataName(String lookupDataName) {
        this.lookupDataName = lookupDataName;
    }

    public boolean isReadOnly() {
        return readOnly;
    }

    public void setReadOnly(boolean readOnly) {
        this.readOnly = readOnly;
    }

    public boolean isHidden() {
        return hidden;
    }

    public void setHidden(boolean hidden) {
        this.hidden = hidden;
    }

    public boolean isIsDefault() {
        return isDefault;
    }

    public void setIsDefault(boolean isDefault) {
        this.isDefault = isDefault;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof LookupData)) {
            return false;
        }

        LookupData lookupData = (LookupData) o;

        return this.getId().equals(lookupData.getId());
    }

    @Override
    public int hashCode() {
        return this.lookupDataID.hashCode();

    }

    @Override
    public Object getId() {
        return this.lookupDataID;
    }

    @Override
    public String getDisplayKey() {
        return this.lookupDataName;
    }

}
