/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.common.entities;

import javax.persistence.Entity;
import javax.persistence.Id;
import org.hibernate.envers.Audited;
import org.hibernate.envers.RelationTargetAuditMode;
import javax.validation.constraints.NotNull;
import javax.persistence.JoinColumn;
import javax.persistence.ForeignKey;
import javax.persistence.OneToOne;
import javax.persistence.Column;
import javax.validation.constraints.Size;

@Entity
@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
public class UserRoleDetail extends DBEntity {

    @NotNull(message = "The field: User Role cannot be null")
    @OneToOne
    @JoinColumn(name = "userRoleID", foreignKey = @ForeignKey(name = "fkUserRoleIDUserRoleDetail"))
    private UserRole userRole;
    @NotNull(message = "The field: AccessObject cannot be null")
    @OneToOne
    @JoinColumn(name = "accessObjectID", foreignKey = @ForeignKey(name = "fkAccessObjectIDUserRoleDetail"))
    private AccessObject accessObject;
    @Id
    @NotNull(message = "The field: User Role Detail ID cannot be null")
    @Size(max = 80, message = "The field: User Role Detail ID size cannot be greater than 80")
    @Column(length = 80, updatable = false)
    private String userRoleDetailID;
    private boolean canCreate;
    private boolean canUpdate;
    private boolean canRead;
    private boolean canDelete;

    public UserRoleDetail() {
    }

    public UserRoleDetail(UserRole userRole, AccessObject accessObject, boolean canCreate, boolean canUpdate, boolean canRead, boolean canDelete) {
        this.userRole = userRole;
        this.accessObject = accessObject;
        setUserRoleDetailID();
        this.canCreate = canCreate;
        this.canUpdate = canUpdate;
        this.canRead = canRead;
        this.canDelete = canDelete;

    }

    public UserRole getUserRole() {
        return userRole;
    }

    public void setUserRole(UserRole userRole) {
        this.userRole = userRole;
        setUserRoleDetailID();
    }

    public AccessObject getAccessObject() {
        return accessObject;
    }

    public void setAccessObject(AccessObject accessObject) {
        this.accessObject = accessObject;
        setUserRoleDetailID();
    }

    public String getUserRoleDetailID() {
        return userRoleDetailID;
    }

    private void setUserRoleDetailID() {
        String rolePart = userRole == null ? "" : userRole.getRoleName();
        String accessObjectPart = accessObject == null ? "" : accessObject.getObjectName();
        this.userRoleDetailID = rolePart.concat(accessObjectPart);
    }

    public boolean isCanCreate() {
        return canCreate;
    }

    public void setCanCreate(boolean canCreate) {
        this.canCreate = canCreate;
    }

    public boolean isCanUpdate() {
        return canUpdate;
    }

    public void setCanUpdate(boolean canUpdate) {
        this.canUpdate = canUpdate;
    }

    public boolean isCanRead() {
        return canRead;
    }

    public void setCanRead(boolean canRead) {
        this.canRead = canRead;
    }

    public boolean isCanDelete() {
        return canDelete;
    }

    public void setCanDelete(boolean canDelete) {
        this.canDelete = canDelete;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof UserRoleDetail)) {
            return false;
        }

        UserRoleDetail userRoleDetail = (UserRoleDetail) o;

        return this.getId().equals(userRoleDetail.getId());
    }

    @Override
    public int hashCode() {
        return this.userRoleDetailID.hashCode();

    }

    @Override
    public Object getId() {
        return this.userRoleDetailID;
    }

    @Override
    public String getDisplayKey() {
        return this.userRole.getDisplayKey() + " " + this.accessObject.getDisplayKey();
    }

}
