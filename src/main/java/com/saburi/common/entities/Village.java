/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.common.entities;

import java.util.Objects;
import javax.persistence.Cacheable;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import org.hibernate.envers.Audited;
import org.hibernate.envers.RelationTargetAuditMode;
import javax.validation.constraints.NotNull;
import javax.persistence.JoinColumn;
import javax.persistence.ForeignKey;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.Size;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;

@Entity
@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
@Table(uniqueConstraints = @UniqueConstraint(columnNames = {"parishID", "villageName"}, name = "uqParishIDVillageNameVillage"))
@Cacheable
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
public class Village extends DBEntity {

    @Column(updatable = false)
    private int idHelper;
    @NotNull(message = "The field: Parish cannot be null")
    @OneToOne
    @JoinColumn(name = "parishID", foreignKey = @ForeignKey(name = "fkParishIDVillage"))
    private Parish parish;
    @Id
    @NotNull(message = "The field: Village ID cannot be null")
    @Size(max = 20, message = "The field: Village ID size cannot be greater than 20")
    @Column(length = 20, updatable = false)
    private String villageID;
    @Size(max = 100, message = "The field: Village Name size cannot be greater than 100")
    @NotNull(message = "The field: Village Name cannot be null")
    @Column(length = 100)
    private String villageName;

    public Village() {
    }

    public Village(int idHelper, Parish parish, String villageID, String villageName) {
        this.idHelper = idHelper;
        this.parish = parish;
        this.villageID = villageID;
        this.villageName = villageName;

    }

    public int getIdHelper() {
        return idHelper;
    }

    public void setIdHelper(int idHelper) {
        this.idHelper = idHelper;
    }

    public Parish getParish() {
        return parish;
    }

    public void setParish(Parish parish) {
        this.parish = parish;
    }

    public String getVillageID() {
        return villageID;
    }

    public void setVillageID(String villageID) {
        this.villageID = villageID;
    }

    public String getVillageName() {
        return villageName;
    }

    public void setVillageName(String villageName) {
        this.villageName = villageName;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof Village)) {
            return false;
        }

        Village village = (Village) o;

        return this.getId().equals(village.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hashCode(this.villageID);

    }

    @Override
    public Object getId() {
        return this.villageID;
    }

    @Override
    public String getDisplayKey() {
        return this.villageName;
    }

}
